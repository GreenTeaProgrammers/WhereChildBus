// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: where_child_bus/v1/bus.proto

package where_child_busv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BusService_CreateBus_FullMethodName                 = "/where_child_bus.v1.BusService/CreateBus"
	BusService_GetBusListByNurseryId_FullMethodName     = "/where_child_bus.v1.BusService/GetBusListByNurseryId"
	BusService_GetRunningBusByGuardianId_FullMethodName = "/where_child_bus.v1.BusService/GetRunningBusByGuardianId"
	BusService_UpdateBus_FullMethodName                 = "/where_child_bus.v1.BusService/UpdateBus"
	BusService_ChangeBusStatus_FullMethodName           = "/where_child_bus.v1.BusService/ChangeBusStatus"
	BusService_SendLocationContinuous_FullMethodName    = "/where_child_bus.v1.BusService/SendLocationContinuous"
	BusService_TrackBusContinuous_FullMethodName        = "/where_child_bus.v1.BusService/TrackBusContinuous"
	BusService_StreamBusVideo_FullMethodName            = "/where_child_bus.v1.BusService/StreamBusVideo"
)

// BusServiceClient is the client API for BusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusServiceClient interface {
	CreateBus(ctx context.Context, in *CreateBusRequest, opts ...grpc.CallOption) (*CreateBusResponse, error)
	GetBusListByNurseryId(ctx context.Context, in *GetBusListByNurseryIdRequest, opts ...grpc.CallOption) (*GetBusListByNurseryIdResponse, error)
	GetRunningBusByGuardianId(ctx context.Context, in *GetRunningBusByGuardianIdRequest, opts ...grpc.CallOption) (*GetRunningBusByGuardianIdResponse, error)
	UpdateBus(ctx context.Context, in *UpdateBusRequest, opts ...grpc.CallOption) (*UpdateBusResponse, error)
	ChangeBusStatus(ctx context.Context, in *ChangeBusStatusRequest, opts ...grpc.CallOption) (*ChangeBusStatusResponse, error)
	SendLocationContinuous(ctx context.Context, opts ...grpc.CallOption) (BusService_SendLocationContinuousClient, error)
	TrackBusContinuous(ctx context.Context, in *TrackBusContinuousRequest, opts ...grpc.CallOption) (BusService_TrackBusContinuousClient, error)
	StreamBusVideo(ctx context.Context, opts ...grpc.CallOption) (BusService_StreamBusVideoClient, error)
}

type busServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusServiceClient(cc grpc.ClientConnInterface) BusServiceClient {
	return &busServiceClient{cc}
}

func (c *busServiceClient) CreateBus(ctx context.Context, in *CreateBusRequest, opts ...grpc.CallOption) (*CreateBusResponse, error) {
	out := new(CreateBusResponse)
	err := c.cc.Invoke(ctx, BusService_CreateBus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busServiceClient) GetBusListByNurseryId(ctx context.Context, in *GetBusListByNurseryIdRequest, opts ...grpc.CallOption) (*GetBusListByNurseryIdResponse, error) {
	out := new(GetBusListByNurseryIdResponse)
	err := c.cc.Invoke(ctx, BusService_GetBusListByNurseryId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busServiceClient) GetRunningBusByGuardianId(ctx context.Context, in *GetRunningBusByGuardianIdRequest, opts ...grpc.CallOption) (*GetRunningBusByGuardianIdResponse, error) {
	out := new(GetRunningBusByGuardianIdResponse)
	err := c.cc.Invoke(ctx, BusService_GetRunningBusByGuardianId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busServiceClient) UpdateBus(ctx context.Context, in *UpdateBusRequest, opts ...grpc.CallOption) (*UpdateBusResponse, error) {
	out := new(UpdateBusResponse)
	err := c.cc.Invoke(ctx, BusService_UpdateBus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busServiceClient) ChangeBusStatus(ctx context.Context, in *ChangeBusStatusRequest, opts ...grpc.CallOption) (*ChangeBusStatusResponse, error) {
	out := new(ChangeBusStatusResponse)
	err := c.cc.Invoke(ctx, BusService_ChangeBusStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busServiceClient) SendLocationContinuous(ctx context.Context, opts ...grpc.CallOption) (BusService_SendLocationContinuousClient, error) {
	stream, err := c.cc.NewStream(ctx, &BusService_ServiceDesc.Streams[0], BusService_SendLocationContinuous_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &busServiceSendLocationContinuousClient{stream}
	return x, nil
}

type BusService_SendLocationContinuousClient interface {
	Send(*SendLocationContinuousRequest) error
	CloseAndRecv() (*SendLocationContinuousResponse, error)
	grpc.ClientStream
}

type busServiceSendLocationContinuousClient struct {
	grpc.ClientStream
}

func (x *busServiceSendLocationContinuousClient) Send(m *SendLocationContinuousRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *busServiceSendLocationContinuousClient) CloseAndRecv() (*SendLocationContinuousResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendLocationContinuousResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *busServiceClient) TrackBusContinuous(ctx context.Context, in *TrackBusContinuousRequest, opts ...grpc.CallOption) (BusService_TrackBusContinuousClient, error) {
	stream, err := c.cc.NewStream(ctx, &BusService_ServiceDesc.Streams[1], BusService_TrackBusContinuous_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &busServiceTrackBusContinuousClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BusService_TrackBusContinuousClient interface {
	Recv() (*TrackBusContinuousResponse, error)
	grpc.ClientStream
}

type busServiceTrackBusContinuousClient struct {
	grpc.ClientStream
}

func (x *busServiceTrackBusContinuousClient) Recv() (*TrackBusContinuousResponse, error) {
	m := new(TrackBusContinuousResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *busServiceClient) StreamBusVideo(ctx context.Context, opts ...grpc.CallOption) (BusService_StreamBusVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &BusService_ServiceDesc.Streams[2], BusService_StreamBusVideo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &busServiceStreamBusVideoClient{stream}
	return x, nil
}

type BusService_StreamBusVideoClient interface {
	Send(*StreamBusVideoRequest) error
	CloseAndRecv() (*StreamBusVideoResponse, error)
	grpc.ClientStream
}

type busServiceStreamBusVideoClient struct {
	grpc.ClientStream
}

func (x *busServiceStreamBusVideoClient) Send(m *StreamBusVideoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *busServiceStreamBusVideoClient) CloseAndRecv() (*StreamBusVideoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamBusVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BusServiceServer is the server API for BusService service.
// All implementations should embed UnimplementedBusServiceServer
// for forward compatibility
type BusServiceServer interface {
	CreateBus(context.Context, *CreateBusRequest) (*CreateBusResponse, error)
	GetBusListByNurseryId(context.Context, *GetBusListByNurseryIdRequest) (*GetBusListByNurseryIdResponse, error)
	GetRunningBusByGuardianId(context.Context, *GetRunningBusByGuardianIdRequest) (*GetRunningBusByGuardianIdResponse, error)
	UpdateBus(context.Context, *UpdateBusRequest) (*UpdateBusResponse, error)
	ChangeBusStatus(context.Context, *ChangeBusStatusRequest) (*ChangeBusStatusResponse, error)
	SendLocationContinuous(BusService_SendLocationContinuousServer) error
	TrackBusContinuous(*TrackBusContinuousRequest, BusService_TrackBusContinuousServer) error
	StreamBusVideo(BusService_StreamBusVideoServer) error
}

// UnimplementedBusServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBusServiceServer struct {
}

func (UnimplementedBusServiceServer) CreateBus(context.Context, *CreateBusRequest) (*CreateBusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBus not implemented")
}
func (UnimplementedBusServiceServer) GetBusListByNurseryId(context.Context, *GetBusListByNurseryIdRequest) (*GetBusListByNurseryIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusListByNurseryId not implemented")
}
func (UnimplementedBusServiceServer) GetRunningBusByGuardianId(context.Context, *GetRunningBusByGuardianIdRequest) (*GetRunningBusByGuardianIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningBusByGuardianId not implemented")
}
func (UnimplementedBusServiceServer) UpdateBus(context.Context, *UpdateBusRequest) (*UpdateBusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBus not implemented")
}
func (UnimplementedBusServiceServer) ChangeBusStatus(context.Context, *ChangeBusStatusRequest) (*ChangeBusStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBusStatus not implemented")
}
func (UnimplementedBusServiceServer) SendLocationContinuous(BusService_SendLocationContinuousServer) error {
	return status.Errorf(codes.Unimplemented, "method SendLocationContinuous not implemented")
}
func (UnimplementedBusServiceServer) TrackBusContinuous(*TrackBusContinuousRequest, BusService_TrackBusContinuousServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackBusContinuous not implemented")
}
func (UnimplementedBusServiceServer) StreamBusVideo(BusService_StreamBusVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBusVideo not implemented")
}

// UnsafeBusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusServiceServer will
// result in compilation errors.
type UnsafeBusServiceServer interface {
	mustEmbedUnimplementedBusServiceServer()
}

func RegisterBusServiceServer(s grpc.ServiceRegistrar, srv BusServiceServer) {
	s.RegisterService(&BusService_ServiceDesc, srv)
}

func _BusService_CreateBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusServiceServer).CreateBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusService_CreateBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusServiceServer).CreateBus(ctx, req.(*CreateBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusService_GetBusListByNurseryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusListByNurseryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusServiceServer).GetBusListByNurseryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusService_GetBusListByNurseryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusServiceServer).GetBusListByNurseryId(ctx, req.(*GetBusListByNurseryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusService_GetRunningBusByGuardianId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunningBusByGuardianIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusServiceServer).GetRunningBusByGuardianId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusService_GetRunningBusByGuardianId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusServiceServer).GetRunningBusByGuardianId(ctx, req.(*GetRunningBusByGuardianIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusService_UpdateBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusServiceServer).UpdateBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusService_UpdateBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusServiceServer).UpdateBus(ctx, req.(*UpdateBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusService_ChangeBusStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBusStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusServiceServer).ChangeBusStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusService_ChangeBusStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusServiceServer).ChangeBusStatus(ctx, req.(*ChangeBusStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusService_SendLocationContinuous_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BusServiceServer).SendLocationContinuous(&busServiceSendLocationContinuousServer{stream})
}

type BusService_SendLocationContinuousServer interface {
	SendAndClose(*SendLocationContinuousResponse) error
	Recv() (*SendLocationContinuousRequest, error)
	grpc.ServerStream
}

type busServiceSendLocationContinuousServer struct {
	grpc.ServerStream
}

func (x *busServiceSendLocationContinuousServer) SendAndClose(m *SendLocationContinuousResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *busServiceSendLocationContinuousServer) Recv() (*SendLocationContinuousRequest, error) {
	m := new(SendLocationContinuousRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BusService_TrackBusContinuous_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrackBusContinuousRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BusServiceServer).TrackBusContinuous(m, &busServiceTrackBusContinuousServer{stream})
}

type BusService_TrackBusContinuousServer interface {
	Send(*TrackBusContinuousResponse) error
	grpc.ServerStream
}

type busServiceTrackBusContinuousServer struct {
	grpc.ServerStream
}

func (x *busServiceTrackBusContinuousServer) Send(m *TrackBusContinuousResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BusService_StreamBusVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BusServiceServer).StreamBusVideo(&busServiceStreamBusVideoServer{stream})
}

type BusService_StreamBusVideoServer interface {
	SendAndClose(*StreamBusVideoResponse) error
	Recv() (*StreamBusVideoRequest, error)
	grpc.ServerStream
}

type busServiceStreamBusVideoServer struct {
	grpc.ServerStream
}

func (x *busServiceStreamBusVideoServer) SendAndClose(m *StreamBusVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *busServiceStreamBusVideoServer) Recv() (*StreamBusVideoRequest, error) {
	m := new(StreamBusVideoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BusService_ServiceDesc is the grpc.ServiceDesc for BusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "where_child_bus.v1.BusService",
	HandlerType: (*BusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBus",
			Handler:    _BusService_CreateBus_Handler,
		},
		{
			MethodName: "GetBusListByNurseryId",
			Handler:    _BusService_GetBusListByNurseryId_Handler,
		},
		{
			MethodName: "GetRunningBusByGuardianId",
			Handler:    _BusService_GetRunningBusByGuardianId_Handler,
		},
		{
			MethodName: "UpdateBus",
			Handler:    _BusService_UpdateBus_Handler,
		},
		{
			MethodName: "ChangeBusStatus",
			Handler:    _BusService_ChangeBusStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendLocationContinuous",
			Handler:       _BusService_SendLocationContinuous_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TrackBusContinuous",
			Handler:       _BusService_TrackBusContinuous_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBusVideo",
			Handler:       _BusService_StreamBusVideo_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "where_child_bus/v1/bus.proto",
}
