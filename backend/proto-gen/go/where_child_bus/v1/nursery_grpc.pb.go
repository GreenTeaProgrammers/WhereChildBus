// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: where_child_bus/v1/nursery.proto

package where_child_busv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NurseryService_GetNurseryByGuardianId_FullMethodName = "/where_child_bus.v1.NurseryService/GetNurseryByGuardianId"
	NurseryService_CreateNursery_FullMethodName          = "/where_child_bus.v1.NurseryService/CreateNursery"
	NurseryService_NurseryLogin_FullMethodName           = "/where_child_bus.v1.NurseryService/NurseryLogin"
	NurseryService_UpdateNursery_FullMethodName          = "/where_child_bus.v1.NurseryService/UpdateNursery"
)

// NurseryServiceClient is the client API for NurseryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NurseryServiceClient interface {
	GetNurseryByGuardianId(ctx context.Context, in *GetNurseryByGuardianIdRequest, opts ...grpc.CallOption) (*GetNurseryByGuardianIdResponse, error)
	CreateNursery(ctx context.Context, in *CreateNurseryRequest, opts ...grpc.CallOption) (*CreateNurseryResponse, error)
	NurseryLogin(ctx context.Context, in *NurseryLoginRequest, opts ...grpc.CallOption) (*NurseryLoginResponse, error)
	UpdateNursery(ctx context.Context, in *UpdateNurseryRequest, opts ...grpc.CallOption) (*UpdateNurseryResponse, error)
}

type nurseryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNurseryServiceClient(cc grpc.ClientConnInterface) NurseryServiceClient {
	return &nurseryServiceClient{cc}
}

func (c *nurseryServiceClient) GetNurseryByGuardianId(ctx context.Context, in *GetNurseryByGuardianIdRequest, opts ...grpc.CallOption) (*GetNurseryByGuardianIdResponse, error) {
	out := new(GetNurseryByGuardianIdResponse)
	err := c.cc.Invoke(ctx, NurseryService_GetNurseryByGuardianId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseryServiceClient) CreateNursery(ctx context.Context, in *CreateNurseryRequest, opts ...grpc.CallOption) (*CreateNurseryResponse, error) {
	out := new(CreateNurseryResponse)
	err := c.cc.Invoke(ctx, NurseryService_CreateNursery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseryServiceClient) NurseryLogin(ctx context.Context, in *NurseryLoginRequest, opts ...grpc.CallOption) (*NurseryLoginResponse, error) {
	out := new(NurseryLoginResponse)
	err := c.cc.Invoke(ctx, NurseryService_NurseryLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseryServiceClient) UpdateNursery(ctx context.Context, in *UpdateNurseryRequest, opts ...grpc.CallOption) (*UpdateNurseryResponse, error) {
	out := new(UpdateNurseryResponse)
	err := c.cc.Invoke(ctx, NurseryService_UpdateNursery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NurseryServiceServer is the server API for NurseryService service.
// All implementations should embed UnimplementedNurseryServiceServer
// for forward compatibility
type NurseryServiceServer interface {
	GetNurseryByGuardianId(context.Context, *GetNurseryByGuardianIdRequest) (*GetNurseryByGuardianIdResponse, error)
	CreateNursery(context.Context, *CreateNurseryRequest) (*CreateNurseryResponse, error)
	NurseryLogin(context.Context, *NurseryLoginRequest) (*NurseryLoginResponse, error)
	UpdateNursery(context.Context, *UpdateNurseryRequest) (*UpdateNurseryResponse, error)
}

// UnimplementedNurseryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNurseryServiceServer struct {
}

func (UnimplementedNurseryServiceServer) GetNurseryByGuardianId(context.Context, *GetNurseryByGuardianIdRequest) (*GetNurseryByGuardianIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNurseryByGuardianId not implemented")
}
func (UnimplementedNurseryServiceServer) CreateNursery(context.Context, *CreateNurseryRequest) (*CreateNurseryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNursery not implemented")
}
func (UnimplementedNurseryServiceServer) NurseryLogin(context.Context, *NurseryLoginRequest) (*NurseryLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NurseryLogin not implemented")
}
func (UnimplementedNurseryServiceServer) UpdateNursery(context.Context, *UpdateNurseryRequest) (*UpdateNurseryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNursery not implemented")
}

// UnsafeNurseryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NurseryServiceServer will
// result in compilation errors.
type UnsafeNurseryServiceServer interface {
	mustEmbedUnimplementedNurseryServiceServer()
}

func RegisterNurseryServiceServer(s grpc.ServiceRegistrar, srv NurseryServiceServer) {
	s.RegisterService(&NurseryService_ServiceDesc, srv)
}

func _NurseryService_GetNurseryByGuardianId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNurseryByGuardianIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseryServiceServer).GetNurseryByGuardianId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NurseryService_GetNurseryByGuardianId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseryServiceServer).GetNurseryByGuardianId(ctx, req.(*GetNurseryByGuardianIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseryService_CreateNursery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNurseryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseryServiceServer).CreateNursery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NurseryService_CreateNursery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseryServiceServer).CreateNursery(ctx, req.(*CreateNurseryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseryService_NurseryLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NurseryLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseryServiceServer).NurseryLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NurseryService_NurseryLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseryServiceServer).NurseryLogin(ctx, req.(*NurseryLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseryService_UpdateNursery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNurseryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseryServiceServer).UpdateNursery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NurseryService_UpdateNursery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseryServiceServer).UpdateNursery(ctx, req.(*UpdateNurseryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NurseryService_ServiceDesc is the grpc.ServiceDesc for NurseryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NurseryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "where_child_bus.v1.NurseryService",
	HandlerType: (*NurseryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNurseryByGuardianId",
			Handler:    _NurseryService_GetNurseryByGuardianId_Handler,
		},
		{
			MethodName: "CreateNursery",
			Handler:    _NurseryService_CreateNursery_Handler,
		},
		{
			MethodName: "NurseryLogin",
			Handler:    _NurseryService_NurseryLogin_Handler,
		},
		{
			MethodName: "UpdateNursery",
			Handler:    _NurseryService_UpdateNursery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "where_child_bus/v1/nursery.proto",
}
