// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: where_child_bus/v1/child.proto

package where_child_busv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChildService_CreateChild_FullMethodName              = "/where_child_bus.v1.ChildService/CreateChild"
	ChildService_GetChildListByNurseryID_FullMethodName  = "/where_child_bus.v1.ChildService/GetChildListByNurseryID"
	ChildService_GetChildListByGuardianID_FullMethodName = "/where_child_bus.v1.ChildService/GetChildListByGuardianID"
	ChildService_GetChildListByBusID_FullMethodName      = "/where_child_bus.v1.ChildService/GetChildListByBusID"
)

// ChildServiceClient is the client API for ChildService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChildServiceClient interface {
	CreateChild(ctx context.Context, in *CreateChildRequest, opts ...grpc.CallOption) (*CreateChildResponse, error)
	GetChildListByNurseryID(ctx context.Context, in *GetChildListByNurseryIDRequest, opts ...grpc.CallOption) (ChildService_GetChildListByNurseryIDClient, error)
	GetChildListByGuardianID(ctx context.Context, in *GetChildListByGuardianIDRequest, opts ...grpc.CallOption) (ChildService_GetChildListByGuardianIDClient, error)
	GetChildListByBusID(ctx context.Context, in *GetChildListByBusIDRequest, opts ...grpc.CallOption) (ChildService_GetChildListByBusIDClient, error)
}

type childServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChildServiceClient(cc grpc.ClientConnInterface) ChildServiceClient {
	return &childServiceClient{cc}
}

func (c *childServiceClient) CreateChild(ctx context.Context, in *CreateChildRequest, opts ...grpc.CallOption) (*CreateChildResponse, error) {
	out := new(CreateChildResponse)
	err := c.cc.Invoke(ctx, ChildService_CreateChild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *childServiceClient) GetChildListByNurseryID(ctx context.Context, in *GetChildListByNurseryIDRequest, opts ...grpc.CallOption) (ChildService_GetChildListByNurseryIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChildService_ServiceDesc.Streams[0], ChildService_GetChildListByNurseryID_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &childServiceGetChildListByNurseryIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChildService_GetChildListByNurseryIDClient interface {
	Recv() (*GetChildListByNurseryIDResponse, error)
	grpc.ClientStream
}

type childServiceGetChildListByNurseryIDClient struct {
	grpc.ClientStream
}

func (x *childServiceGetChildListByNurseryIDClient) Recv() (*GetChildListByNurseryIDResponse, error) {
	m := new(GetChildListByNurseryIDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *childServiceClient) GetChildListByGuardianID(ctx context.Context, in *GetChildListByGuardianIDRequest, opts ...grpc.CallOption) (ChildService_GetChildListByGuardianIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChildService_ServiceDesc.Streams[1], ChildService_GetChildListByGuardianID_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &childServiceGetChildListByGuardianIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChildService_GetChildListByGuardianIDClient interface {
	Recv() (*GetChildListByGuardianIDResponse, error)
	grpc.ClientStream
}

type childServiceGetChildListByGuardianIDClient struct {
	grpc.ClientStream
}

func (x *childServiceGetChildListByGuardianIDClient) Recv() (*GetChildListByGuardianIDResponse, error) {
	m := new(GetChildListByGuardianIDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *childServiceClient) GetChildListByBusID(ctx context.Context, in *GetChildListByBusIDRequest, opts ...grpc.CallOption) (ChildService_GetChildListByBusIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChildService_ServiceDesc.Streams[2], ChildService_GetChildListByBusID_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &childServiceGetChildListByBusIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChildService_GetChildListByBusIDClient interface {
	Recv() (*GetChildListByBusIDResponse, error)
	grpc.ClientStream
}

type childServiceGetChildListByBusIDClient struct {
	grpc.ClientStream
}

func (x *childServiceGetChildListByBusIDClient) Recv() (*GetChildListByBusIDResponse, error) {
	m := new(GetChildListByBusIDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChildServiceServer is the server API for ChildService service.
// All implementations should embed UnimplementedChildServiceServer
// for forward compatibility
type ChildServiceServer interface {
	CreateChild(context.Context, *CreateChildRequest) (*CreateChildResponse, error)
	GetChildListByNurseryID(*GetChildListByNurseryIDRequest, ChildService_GetChildListByNurseryIDServer) error
	GetChildListByGuardianID(*GetChildListByGuardianIDRequest, ChildService_GetChildListByGuardianIDServer) error
	GetChildListByBusID(*GetChildListByBusIDRequest, ChildService_GetChildListByBusIDServer) error
}

// UnimplementedChildServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChildServiceServer struct {
}

func (UnimplementedChildServiceServer) CreateChild(context.Context, *CreateChildRequest) (*CreateChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChild not implemented")
}
func (UnimplementedChildServiceServer) GetChildListByNurseryID(*GetChildListByNurseryIDRequest, ChildService_GetChildListByNurseryIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChildListByNurseryID not implemented")
}
func (UnimplementedChildServiceServer) GetChildListByGuardianID(*GetChildListByGuardianIDRequest, ChildService_GetChildListByGuardianIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChildListByGuardianID not implemented")
}
func (UnimplementedChildServiceServer) GetChildListByBusID(*GetChildListByBusIDRequest, ChildService_GetChildListByBusIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChildListByBusID not implemented")
}

// UnsafeChildServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChildServiceServer will
// result in compilation errors.
type UnsafeChildServiceServer interface {
	mustEmbedUnimplementedChildServiceServer()
}

func RegisterChildServiceServer(s grpc.ServiceRegistrar, srv ChildServiceServer) {
	s.RegisterService(&ChildService_ServiceDesc, srv)
}

func _ChildService_CreateChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChildServiceServer).CreateChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChildService_CreateChild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChildServiceServer).CreateChild(ctx, req.(*CreateChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChildService_GetChildListByNurseryID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChildListByNurseryIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChildServiceServer).GetChildListByNurseryID(m, &childServiceGetChildListByNurseryIDServer{stream})
}

type ChildService_GetChildListByNurseryIDServer interface {
	Send(*GetChildListByNurseryIDResponse) error
	grpc.ServerStream
}

type childServiceGetChildListByNurseryIDServer struct {
	grpc.ServerStream
}

func (x *childServiceGetChildListByNurseryIDServer) Send(m *GetChildListByNurseryIDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChildService_GetChildListByGuardianID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChildListByGuardianIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChildServiceServer).GetChildListByGuardianID(m, &childServiceGetChildListByGuardianIDServer{stream})
}

type ChildService_GetChildListByGuardianIDServer interface {
	Send(*GetChildListByGuardianIDResponse) error
	grpc.ServerStream
}

type childServiceGetChildListByGuardianIDServer struct {
	grpc.ServerStream
}

func (x *childServiceGetChildListByGuardianIDServer) Send(m *GetChildListByGuardianIDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChildService_GetChildListByBusID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChildListByBusIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChildServiceServer).GetChildListByBusID(m, &childServiceGetChildListByBusIDServer{stream})
}

type ChildService_GetChildListByBusIDServer interface {
	Send(*GetChildListByBusIDResponse) error
	grpc.ServerStream
}

type childServiceGetChildListByBusIDServer struct {
	grpc.ServerStream
}

func (x *childServiceGetChildListByBusIDServer) Send(m *GetChildListByBusIDResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ChildService_ServiceDesc is the grpc.ServiceDesc for ChildService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChildService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "where_child_bus.v1.ChildService",
	HandlerType: (*ChildServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChild",
			Handler:    _ChildService_CreateChild_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChildListByNurseryID",
			Handler:       _ChildService_GetChildListByNurseryID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChildListByGuardianID",
			Handler:       _ChildService_GetChildListByGuardianID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChildListByBusID",
			Handler:       _ChildService_GetChildListByBusID_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "where_child_bus/v1/child.proto",
}
