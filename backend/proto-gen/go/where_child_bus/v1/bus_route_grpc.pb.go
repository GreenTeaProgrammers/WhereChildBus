// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: where_child_bus/v1/bus_route.proto

package where_child_busv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BusRouteService_CreateBusRoute_FullMethodName     = "/where_child_bus.v1.BusRouteService/CreateBusRoute"
	BusRouteService_GetBusRouteByBusID_FullMethodName = "/where_child_bus.v1.BusRouteService/GetBusRouteByBusID"
)

// BusRouteServiceClient is the client API for BusRouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusRouteServiceClient interface {
	CreateBusRoute(ctx context.Context, in *CreateBusRouteRequest, opts ...grpc.CallOption) (*CreateBusRouteResponse, error)
	GetBusRouteByBusID(ctx context.Context, in *GetBusRouteByBusIDRequest, opts ...grpc.CallOption) (*GetBusRouteByBusIDResponse, error)
}

type busRouteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusRouteServiceClient(cc grpc.ClientConnInterface) BusRouteServiceClient {
	return &busRouteServiceClient{cc}
}

func (c *busRouteServiceClient) CreateBusRoute(ctx context.Context, in *CreateBusRouteRequest, opts ...grpc.CallOption) (*CreateBusRouteResponse, error) {
	out := new(CreateBusRouteResponse)
	err := c.cc.Invoke(ctx, BusRouteService_CreateBusRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busRouteServiceClient) GetBusRouteByBusID(ctx context.Context, in *GetBusRouteByBusIDRequest, opts ...grpc.CallOption) (*GetBusRouteByBusIDResponse, error) {
	out := new(GetBusRouteByBusIDResponse)
	err := c.cc.Invoke(ctx, BusRouteService_GetBusRouteByBusID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusRouteServiceServer is the server API for BusRouteService service.
// All implementations should embed UnimplementedBusRouteServiceServer
// for forward compatibility
type BusRouteServiceServer interface {
	CreateBusRoute(context.Context, *CreateBusRouteRequest) (*CreateBusRouteResponse, error)
	GetBusRouteByBusID(context.Context, *GetBusRouteByBusIDRequest) (*GetBusRouteByBusIDResponse, error)
}

// UnimplementedBusRouteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBusRouteServiceServer struct {
}

func (UnimplementedBusRouteServiceServer) CreateBusRoute(context.Context, *CreateBusRouteRequest) (*CreateBusRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusRoute not implemented")
}
func (UnimplementedBusRouteServiceServer) GetBusRouteByBusID(context.Context, *GetBusRouteByBusIDRequest) (*GetBusRouteByBusIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusRouteByBusID not implemented")
}

// UnsafeBusRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusRouteServiceServer will
// result in compilation errors.
type UnsafeBusRouteServiceServer interface {
	mustEmbedUnimplementedBusRouteServiceServer()
}

func RegisterBusRouteServiceServer(s grpc.ServiceRegistrar, srv BusRouteServiceServer) {
	s.RegisterService(&BusRouteService_ServiceDesc, srv)
}

func _BusRouteService_CreateBusRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusRouteServiceServer).CreateBusRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusRouteService_CreateBusRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusRouteServiceServer).CreateBusRoute(ctx, req.(*CreateBusRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusRouteService_GetBusRouteByBusID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusRouteByBusIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusRouteServiceServer).GetBusRouteByBusID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusRouteService_GetBusRouteByBusID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusRouteServiceServer).GetBusRouteByBusID(ctx, req.(*GetBusRouteByBusIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusRouteService_ServiceDesc is the grpc.ServiceDesc for BusRouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusRouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "where_child_bus.v1.BusRouteService",
	HandlerType: (*BusRouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusRoute",
			Handler:    _BusRouteService_CreateBusRoute_Handler,
		},
		{
			MethodName: "GetBusRouteByBusID",
			Handler:    _BusRouteService_GetBusRouteByBusID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "where_child_bus/v1/bus_route.proto",
}
