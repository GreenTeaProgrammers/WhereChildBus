// Code generated by ent, DO NOT EDIT.

package busroute

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the busroute type in the database.
	Label = "bus_route"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusType holds the string denoting the bus_type field in the database.
	FieldBusType = "bus_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeBus holds the string denoting the bus edge name in mutations.
	EdgeBus = "bus"
	// EdgeChildBusAssociations holds the string denoting the childbusassociations edge name in mutations.
	EdgeChildBusAssociations = "childBusAssociations"
	// EdgeBusRouteAssociations holds the string denoting the busrouteassociations edge name in mutations.
	EdgeBusRouteAssociations = "busRouteAssociations"
	// EdgeMorningBuses holds the string denoting the morning_buses edge name in mutations.
	EdgeMorningBuses = "morning_buses"
	// EdgeEveningBuses holds the string denoting the evening_buses edge name in mutations.
	EdgeEveningBuses = "evening_buses"
	// Table holds the table name of the busroute in the database.
	Table = "bus_routes"
	// BusTable is the table that holds the bus relation/edge. The primary key declared below.
	BusTable = "bus_route_bus"
	// BusInverseTable is the table name for the Bus entity.
	// It exists in this package in order to avoid circular dependency with the "bus" package.
	BusInverseTable = "bus"
	// ChildBusAssociationsTable is the table that holds the childBusAssociations relation/edge.
	ChildBusAssociationsTable = "child_bus_associations"
	// ChildBusAssociationsInverseTable is the table name for the ChildBusAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "childbusassociation" package.
	ChildBusAssociationsInverseTable = "child_bus_associations"
	// ChildBusAssociationsColumn is the table column denoting the childBusAssociations relation/edge.
	ChildBusAssociationsColumn = "bus_route_id"
	// BusRouteAssociationsTable is the table that holds the busRouteAssociations relation/edge.
	BusRouteAssociationsTable = "bus_route_associations"
	// BusRouteAssociationsInverseTable is the table name for the BusRouteAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "busrouteassociation" package.
	BusRouteAssociationsInverseTable = "bus_route_associations"
	// BusRouteAssociationsColumn is the table column denoting the busRouteAssociations relation/edge.
	BusRouteAssociationsColumn = "bus_route_id"
	// MorningBusesTable is the table that holds the morning_buses relation/edge.
	MorningBusesTable = "bus"
	// MorningBusesInverseTable is the table name for the Bus entity.
	// It exists in this package in order to avoid circular dependency with the "bus" package.
	MorningBusesInverseTable = "bus"
	// MorningBusesColumn is the table column denoting the morning_buses relation/edge.
	MorningBusesColumn = "bus_latest_morning_route"
	// EveningBusesTable is the table that holds the evening_buses relation/edge.
	EveningBusesTable = "bus"
	// EveningBusesInverseTable is the table name for the Bus entity.
	// It exists in this package in order to avoid circular dependency with the "bus" package.
	EveningBusesInverseTable = "bus"
	// EveningBusesColumn is the table column denoting the evening_buses relation/edge.
	EveningBusesColumn = "bus_latest_evening_route"
)

// Columns holds all SQL columns for busroute fields.
var Columns = []string{
	FieldID,
	FieldBusType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// BusPrimaryKey and BusColumn2 are the table columns denoting the
	// primary key for the bus relation (M2M).
	BusPrimaryKey = []string{"bus_route_id", "bus_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// BusType defines the type for the "bus_type" enum field.
type BusType string

// BusType values.
const (
	BusTypeMorning BusType = "morning"
	BusTypeEvening BusType = "evening"
)

func (bt BusType) String() string {
	return string(bt)
}

// BusTypeValidator is a validator for the "bus_type" field enum values. It is called by the builders before save.
func BusTypeValidator(bt BusType) error {
	switch bt {
	case BusTypeMorning, BusTypeEvening:
		return nil
	default:
		return fmt.Errorf("busroute: invalid enum value for bus_type field: %q", bt)
	}
}

// OrderOption defines the ordering options for the BusRoute queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusType orders the results by the bus_type field.
func ByBusType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBusCount orders the results by bus count.
func ByBusCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBusStep(), opts...)
	}
}

// ByBus orders the results by bus terms.
func ByBus(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChildBusAssociationsCount orders the results by childBusAssociations count.
func ByChildBusAssociationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildBusAssociationsStep(), opts...)
	}
}

// ByChildBusAssociations orders the results by childBusAssociations terms.
func ByChildBusAssociations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildBusAssociationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBusRouteAssociationsCount orders the results by busRouteAssociations count.
func ByBusRouteAssociationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBusRouteAssociationsStep(), opts...)
	}
}

// ByBusRouteAssociations orders the results by busRouteAssociations terms.
func ByBusRouteAssociations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusRouteAssociationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMorningBusesCount orders the results by morning_buses count.
func ByMorningBusesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMorningBusesStep(), opts...)
	}
}

// ByMorningBuses orders the results by morning_buses terms.
func ByMorningBuses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMorningBusesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEveningBusesCount orders the results by evening_buses count.
func ByEveningBusesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEveningBusesStep(), opts...)
	}
}

// ByEveningBuses orders the results by evening_buses terms.
func ByEveningBuses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEveningBusesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, BusTable, BusPrimaryKey...),
	)
}
func newChildBusAssociationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChildBusAssociationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildBusAssociationsTable, ChildBusAssociationsColumn),
	)
}
func newBusRouteAssociationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusRouteAssociationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BusRouteAssociationsTable, BusRouteAssociationsColumn),
	)
}
func newMorningBusesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MorningBusesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MorningBusesTable, MorningBusesColumn),
	)
}
func newEveningBusesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EveningBusesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EveningBusesTable, EveningBusesColumn),
	)
}
