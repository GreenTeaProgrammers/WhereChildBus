// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/bus"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busroute"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busrouteassociation"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/childbusassociation"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
	"github.com/google/uuid"
)

// BusRouteUpdate is the builder for updating BusRoute entities.
type BusRouteUpdate struct {
	config
	hooks    []Hook
	mutation *BusRouteMutation
}

// Where appends a list predicates to the BusRouteUpdate builder.
func (bru *BusRouteUpdate) Where(ps ...predicate.BusRoute) *BusRouteUpdate {
	bru.mutation.Where(ps...)
	return bru
}

// SetBusType sets the "bus_type" field.
func (bru *BusRouteUpdate) SetBusType(bt busroute.BusType) *BusRouteUpdate {
	bru.mutation.SetBusType(bt)
	return bru
}

// SetNillableBusType sets the "bus_type" field if the given value is not nil.
func (bru *BusRouteUpdate) SetNillableBusType(bt *busroute.BusType) *BusRouteUpdate {
	if bt != nil {
		bru.SetBusType(*bt)
	}
	return bru
}

// SetCreatedAt sets the "created_at" field.
func (bru *BusRouteUpdate) SetCreatedAt(t time.Time) *BusRouteUpdate {
	bru.mutation.SetCreatedAt(t)
	return bru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bru *BusRouteUpdate) SetNillableCreatedAt(t *time.Time) *BusRouteUpdate {
	if t != nil {
		bru.SetCreatedAt(*t)
	}
	return bru
}

// SetUpdatedAt sets the "updated_at" field.
func (bru *BusRouteUpdate) SetUpdatedAt(t time.Time) *BusRouteUpdate {
	bru.mutation.SetUpdatedAt(t)
	return bru
}

// AddBuIDs adds the "bus" edge to the Bus entity by IDs.
func (bru *BusRouteUpdate) AddBuIDs(ids ...uuid.UUID) *BusRouteUpdate {
	bru.mutation.AddBuIDs(ids...)
	return bru
}

// AddBus adds the "bus" edges to the Bus entity.
func (bru *BusRouteUpdate) AddBus(b ...*Bus) *BusRouteUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bru.AddBuIDs(ids...)
}

// AddChildBusAssociationIDs adds the "childBusAssociations" edge to the ChildBusAssociation entity by IDs.
func (bru *BusRouteUpdate) AddChildBusAssociationIDs(ids ...int) *BusRouteUpdate {
	bru.mutation.AddChildBusAssociationIDs(ids...)
	return bru
}

// AddChildBusAssociations adds the "childBusAssociations" edges to the ChildBusAssociation entity.
func (bru *BusRouteUpdate) AddChildBusAssociations(c ...*ChildBusAssociation) *BusRouteUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bru.AddChildBusAssociationIDs(ids...)
}

// AddBusRouteAssociationIDs adds the "busRouteAssociations" edge to the BusRouteAssociation entity by IDs.
func (bru *BusRouteUpdate) AddBusRouteAssociationIDs(ids ...int) *BusRouteUpdate {
	bru.mutation.AddBusRouteAssociationIDs(ids...)
	return bru
}

// AddBusRouteAssociations adds the "busRouteAssociations" edges to the BusRouteAssociation entity.
func (bru *BusRouteUpdate) AddBusRouteAssociations(b ...*BusRouteAssociation) *BusRouteUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bru.AddBusRouteAssociationIDs(ids...)
}

// AddMorningBusIDs adds the "morning_buses" edge to the Bus entity by IDs.
func (bru *BusRouteUpdate) AddMorningBusIDs(ids ...uuid.UUID) *BusRouteUpdate {
	bru.mutation.AddMorningBusIDs(ids...)
	return bru
}

// AddMorningBuses adds the "morning_buses" edges to the Bus entity.
func (bru *BusRouteUpdate) AddMorningBuses(b ...*Bus) *BusRouteUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bru.AddMorningBusIDs(ids...)
}

// AddEveningBusIDs adds the "evening_buses" edge to the Bus entity by IDs.
func (bru *BusRouteUpdate) AddEveningBusIDs(ids ...uuid.UUID) *BusRouteUpdate {
	bru.mutation.AddEveningBusIDs(ids...)
	return bru
}

// AddEveningBuses adds the "evening_buses" edges to the Bus entity.
func (bru *BusRouteUpdate) AddEveningBuses(b ...*Bus) *BusRouteUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bru.AddEveningBusIDs(ids...)
}

// Mutation returns the BusRouteMutation object of the builder.
func (bru *BusRouteUpdate) Mutation() *BusRouteMutation {
	return bru.mutation
}

// ClearBus clears all "bus" edges to the Bus entity.
func (bru *BusRouteUpdate) ClearBus() *BusRouteUpdate {
	bru.mutation.ClearBus()
	return bru
}

// RemoveBuIDs removes the "bus" edge to Bus entities by IDs.
func (bru *BusRouteUpdate) RemoveBuIDs(ids ...uuid.UUID) *BusRouteUpdate {
	bru.mutation.RemoveBuIDs(ids...)
	return bru
}

// RemoveBus removes "bus" edges to Bus entities.
func (bru *BusRouteUpdate) RemoveBus(b ...*Bus) *BusRouteUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bru.RemoveBuIDs(ids...)
}

// ClearChildBusAssociations clears all "childBusAssociations" edges to the ChildBusAssociation entity.
func (bru *BusRouteUpdate) ClearChildBusAssociations() *BusRouteUpdate {
	bru.mutation.ClearChildBusAssociations()
	return bru
}

// RemoveChildBusAssociationIDs removes the "childBusAssociations" edge to ChildBusAssociation entities by IDs.
func (bru *BusRouteUpdate) RemoveChildBusAssociationIDs(ids ...int) *BusRouteUpdate {
	bru.mutation.RemoveChildBusAssociationIDs(ids...)
	return bru
}

// RemoveChildBusAssociations removes "childBusAssociations" edges to ChildBusAssociation entities.
func (bru *BusRouteUpdate) RemoveChildBusAssociations(c ...*ChildBusAssociation) *BusRouteUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bru.RemoveChildBusAssociationIDs(ids...)
}

// ClearBusRouteAssociations clears all "busRouteAssociations" edges to the BusRouteAssociation entity.
func (bru *BusRouteUpdate) ClearBusRouteAssociations() *BusRouteUpdate {
	bru.mutation.ClearBusRouteAssociations()
	return bru
}

// RemoveBusRouteAssociationIDs removes the "busRouteAssociations" edge to BusRouteAssociation entities by IDs.
func (bru *BusRouteUpdate) RemoveBusRouteAssociationIDs(ids ...int) *BusRouteUpdate {
	bru.mutation.RemoveBusRouteAssociationIDs(ids...)
	return bru
}

// RemoveBusRouteAssociations removes "busRouteAssociations" edges to BusRouteAssociation entities.
func (bru *BusRouteUpdate) RemoveBusRouteAssociations(b ...*BusRouteAssociation) *BusRouteUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bru.RemoveBusRouteAssociationIDs(ids...)
}

// ClearMorningBuses clears all "morning_buses" edges to the Bus entity.
func (bru *BusRouteUpdate) ClearMorningBuses() *BusRouteUpdate {
	bru.mutation.ClearMorningBuses()
	return bru
}

// RemoveMorningBusIDs removes the "morning_buses" edge to Bus entities by IDs.
func (bru *BusRouteUpdate) RemoveMorningBusIDs(ids ...uuid.UUID) *BusRouteUpdate {
	bru.mutation.RemoveMorningBusIDs(ids...)
	return bru
}

// RemoveMorningBuses removes "morning_buses" edges to Bus entities.
func (bru *BusRouteUpdate) RemoveMorningBuses(b ...*Bus) *BusRouteUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bru.RemoveMorningBusIDs(ids...)
}

// ClearEveningBuses clears all "evening_buses" edges to the Bus entity.
func (bru *BusRouteUpdate) ClearEveningBuses() *BusRouteUpdate {
	bru.mutation.ClearEveningBuses()
	return bru
}

// RemoveEveningBusIDs removes the "evening_buses" edge to Bus entities by IDs.
func (bru *BusRouteUpdate) RemoveEveningBusIDs(ids ...uuid.UUID) *BusRouteUpdate {
	bru.mutation.RemoveEveningBusIDs(ids...)
	return bru
}

// RemoveEveningBuses removes "evening_buses" edges to Bus entities.
func (bru *BusRouteUpdate) RemoveEveningBuses(b ...*Bus) *BusRouteUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bru.RemoveEveningBusIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bru *BusRouteUpdate) Save(ctx context.Context) (int, error) {
	bru.defaults()
	return withHooks(ctx, bru.sqlSave, bru.mutation, bru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bru *BusRouteUpdate) SaveX(ctx context.Context) int {
	affected, err := bru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bru *BusRouteUpdate) Exec(ctx context.Context) error {
	_, err := bru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bru *BusRouteUpdate) ExecX(ctx context.Context) {
	if err := bru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bru *BusRouteUpdate) defaults() {
	if _, ok := bru.mutation.UpdatedAt(); !ok {
		v := busroute.UpdateDefaultUpdatedAt()
		bru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bru *BusRouteUpdate) check() error {
	if v, ok := bru.mutation.BusType(); ok {
		if err := busroute.BusTypeValidator(v); err != nil {
			return &ValidationError{Name: "bus_type", err: fmt.Errorf(`ent: validator failed for field "BusRoute.bus_type": %w`, err)}
		}
	}
	return nil
}

func (bru *BusRouteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(busroute.Table, busroute.Columns, sqlgraph.NewFieldSpec(busroute.FieldID, field.TypeUUID))
	if ps := bru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bru.mutation.BusType(); ok {
		_spec.SetField(busroute.FieldBusType, field.TypeEnum, value)
	}
	if value, ok := bru.mutation.CreatedAt(); ok {
		_spec.SetField(busroute.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bru.mutation.UpdatedAt(); ok {
		_spec.SetField(busroute.FieldUpdatedAt, field.TypeTime, value)
	}
	if bru.mutation.BusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   busroute.BusTable,
			Columns: busroute.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.RemovedBusIDs(); len(nodes) > 0 && !bru.mutation.BusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   busroute.BusTable,
			Columns: busroute.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.BusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   busroute.BusTable,
			Columns: busroute.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bru.mutation.ChildBusAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.ChildBusAssociationsTable,
			Columns: []string{busroute.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.RemovedChildBusAssociationsIDs(); len(nodes) > 0 && !bru.mutation.ChildBusAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.ChildBusAssociationsTable,
			Columns: []string{busroute.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.ChildBusAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.ChildBusAssociationsTable,
			Columns: []string{busroute.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bru.mutation.BusRouteAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.BusRouteAssociationsTable,
			Columns: []string{busroute.BusRouteAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(busrouteassociation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.RemovedBusRouteAssociationsIDs(); len(nodes) > 0 && !bru.mutation.BusRouteAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.BusRouteAssociationsTable,
			Columns: []string{busroute.BusRouteAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(busrouteassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.BusRouteAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.BusRouteAssociationsTable,
			Columns: []string{busroute.BusRouteAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(busrouteassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bru.mutation.MorningBusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.MorningBusesTable,
			Columns: []string{busroute.MorningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.RemovedMorningBusesIDs(); len(nodes) > 0 && !bru.mutation.MorningBusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.MorningBusesTable,
			Columns: []string{busroute.MorningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.MorningBusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.MorningBusesTable,
			Columns: []string{busroute.MorningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bru.mutation.EveningBusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.EveningBusesTable,
			Columns: []string{busroute.EveningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.RemovedEveningBusesIDs(); len(nodes) > 0 && !bru.mutation.EveningBusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.EveningBusesTable,
			Columns: []string{busroute.EveningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.EveningBusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.EveningBusesTable,
			Columns: []string{busroute.EveningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{busroute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bru.mutation.done = true
	return n, nil
}

// BusRouteUpdateOne is the builder for updating a single BusRoute entity.
type BusRouteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusRouteMutation
}

// SetBusType sets the "bus_type" field.
func (bruo *BusRouteUpdateOne) SetBusType(bt busroute.BusType) *BusRouteUpdateOne {
	bruo.mutation.SetBusType(bt)
	return bruo
}

// SetNillableBusType sets the "bus_type" field if the given value is not nil.
func (bruo *BusRouteUpdateOne) SetNillableBusType(bt *busroute.BusType) *BusRouteUpdateOne {
	if bt != nil {
		bruo.SetBusType(*bt)
	}
	return bruo
}

// SetCreatedAt sets the "created_at" field.
func (bruo *BusRouteUpdateOne) SetCreatedAt(t time.Time) *BusRouteUpdateOne {
	bruo.mutation.SetCreatedAt(t)
	return bruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bruo *BusRouteUpdateOne) SetNillableCreatedAt(t *time.Time) *BusRouteUpdateOne {
	if t != nil {
		bruo.SetCreatedAt(*t)
	}
	return bruo
}

// SetUpdatedAt sets the "updated_at" field.
func (bruo *BusRouteUpdateOne) SetUpdatedAt(t time.Time) *BusRouteUpdateOne {
	bruo.mutation.SetUpdatedAt(t)
	return bruo
}

// AddBuIDs adds the "bus" edge to the Bus entity by IDs.
func (bruo *BusRouteUpdateOne) AddBuIDs(ids ...uuid.UUID) *BusRouteUpdateOne {
	bruo.mutation.AddBuIDs(ids...)
	return bruo
}

// AddBus adds the "bus" edges to the Bus entity.
func (bruo *BusRouteUpdateOne) AddBus(b ...*Bus) *BusRouteUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bruo.AddBuIDs(ids...)
}

// AddChildBusAssociationIDs adds the "childBusAssociations" edge to the ChildBusAssociation entity by IDs.
func (bruo *BusRouteUpdateOne) AddChildBusAssociationIDs(ids ...int) *BusRouteUpdateOne {
	bruo.mutation.AddChildBusAssociationIDs(ids...)
	return bruo
}

// AddChildBusAssociations adds the "childBusAssociations" edges to the ChildBusAssociation entity.
func (bruo *BusRouteUpdateOne) AddChildBusAssociations(c ...*ChildBusAssociation) *BusRouteUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bruo.AddChildBusAssociationIDs(ids...)
}

// AddBusRouteAssociationIDs adds the "busRouteAssociations" edge to the BusRouteAssociation entity by IDs.
func (bruo *BusRouteUpdateOne) AddBusRouteAssociationIDs(ids ...int) *BusRouteUpdateOne {
	bruo.mutation.AddBusRouteAssociationIDs(ids...)
	return bruo
}

// AddBusRouteAssociations adds the "busRouteAssociations" edges to the BusRouteAssociation entity.
func (bruo *BusRouteUpdateOne) AddBusRouteAssociations(b ...*BusRouteAssociation) *BusRouteUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bruo.AddBusRouteAssociationIDs(ids...)
}

// AddMorningBusIDs adds the "morning_buses" edge to the Bus entity by IDs.
func (bruo *BusRouteUpdateOne) AddMorningBusIDs(ids ...uuid.UUID) *BusRouteUpdateOne {
	bruo.mutation.AddMorningBusIDs(ids...)
	return bruo
}

// AddMorningBuses adds the "morning_buses" edges to the Bus entity.
func (bruo *BusRouteUpdateOne) AddMorningBuses(b ...*Bus) *BusRouteUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bruo.AddMorningBusIDs(ids...)
}

// AddEveningBusIDs adds the "evening_buses" edge to the Bus entity by IDs.
func (bruo *BusRouteUpdateOne) AddEveningBusIDs(ids ...uuid.UUID) *BusRouteUpdateOne {
	bruo.mutation.AddEveningBusIDs(ids...)
	return bruo
}

// AddEveningBuses adds the "evening_buses" edges to the Bus entity.
func (bruo *BusRouteUpdateOne) AddEveningBuses(b ...*Bus) *BusRouteUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bruo.AddEveningBusIDs(ids...)
}

// Mutation returns the BusRouteMutation object of the builder.
func (bruo *BusRouteUpdateOne) Mutation() *BusRouteMutation {
	return bruo.mutation
}

// ClearBus clears all "bus" edges to the Bus entity.
func (bruo *BusRouteUpdateOne) ClearBus() *BusRouteUpdateOne {
	bruo.mutation.ClearBus()
	return bruo
}

// RemoveBuIDs removes the "bus" edge to Bus entities by IDs.
func (bruo *BusRouteUpdateOne) RemoveBuIDs(ids ...uuid.UUID) *BusRouteUpdateOne {
	bruo.mutation.RemoveBuIDs(ids...)
	return bruo
}

// RemoveBus removes "bus" edges to Bus entities.
func (bruo *BusRouteUpdateOne) RemoveBus(b ...*Bus) *BusRouteUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bruo.RemoveBuIDs(ids...)
}

// ClearChildBusAssociations clears all "childBusAssociations" edges to the ChildBusAssociation entity.
func (bruo *BusRouteUpdateOne) ClearChildBusAssociations() *BusRouteUpdateOne {
	bruo.mutation.ClearChildBusAssociations()
	return bruo
}

// RemoveChildBusAssociationIDs removes the "childBusAssociations" edge to ChildBusAssociation entities by IDs.
func (bruo *BusRouteUpdateOne) RemoveChildBusAssociationIDs(ids ...int) *BusRouteUpdateOne {
	bruo.mutation.RemoveChildBusAssociationIDs(ids...)
	return bruo
}

// RemoveChildBusAssociations removes "childBusAssociations" edges to ChildBusAssociation entities.
func (bruo *BusRouteUpdateOne) RemoveChildBusAssociations(c ...*ChildBusAssociation) *BusRouteUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bruo.RemoveChildBusAssociationIDs(ids...)
}

// ClearBusRouteAssociations clears all "busRouteAssociations" edges to the BusRouteAssociation entity.
func (bruo *BusRouteUpdateOne) ClearBusRouteAssociations() *BusRouteUpdateOne {
	bruo.mutation.ClearBusRouteAssociations()
	return bruo
}

// RemoveBusRouteAssociationIDs removes the "busRouteAssociations" edge to BusRouteAssociation entities by IDs.
func (bruo *BusRouteUpdateOne) RemoveBusRouteAssociationIDs(ids ...int) *BusRouteUpdateOne {
	bruo.mutation.RemoveBusRouteAssociationIDs(ids...)
	return bruo
}

// RemoveBusRouteAssociations removes "busRouteAssociations" edges to BusRouteAssociation entities.
func (bruo *BusRouteUpdateOne) RemoveBusRouteAssociations(b ...*BusRouteAssociation) *BusRouteUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bruo.RemoveBusRouteAssociationIDs(ids...)
}

// ClearMorningBuses clears all "morning_buses" edges to the Bus entity.
func (bruo *BusRouteUpdateOne) ClearMorningBuses() *BusRouteUpdateOne {
	bruo.mutation.ClearMorningBuses()
	return bruo
}

// RemoveMorningBusIDs removes the "morning_buses" edge to Bus entities by IDs.
func (bruo *BusRouteUpdateOne) RemoveMorningBusIDs(ids ...uuid.UUID) *BusRouteUpdateOne {
	bruo.mutation.RemoveMorningBusIDs(ids...)
	return bruo
}

// RemoveMorningBuses removes "morning_buses" edges to Bus entities.
func (bruo *BusRouteUpdateOne) RemoveMorningBuses(b ...*Bus) *BusRouteUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bruo.RemoveMorningBusIDs(ids...)
}

// ClearEveningBuses clears all "evening_buses" edges to the Bus entity.
func (bruo *BusRouteUpdateOne) ClearEveningBuses() *BusRouteUpdateOne {
	bruo.mutation.ClearEveningBuses()
	return bruo
}

// RemoveEveningBusIDs removes the "evening_buses" edge to Bus entities by IDs.
func (bruo *BusRouteUpdateOne) RemoveEveningBusIDs(ids ...uuid.UUID) *BusRouteUpdateOne {
	bruo.mutation.RemoveEveningBusIDs(ids...)
	return bruo
}

// RemoveEveningBuses removes "evening_buses" edges to Bus entities.
func (bruo *BusRouteUpdateOne) RemoveEveningBuses(b ...*Bus) *BusRouteUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bruo.RemoveEveningBusIDs(ids...)
}

// Where appends a list predicates to the BusRouteUpdate builder.
func (bruo *BusRouteUpdateOne) Where(ps ...predicate.BusRoute) *BusRouteUpdateOne {
	bruo.mutation.Where(ps...)
	return bruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bruo *BusRouteUpdateOne) Select(field string, fields ...string) *BusRouteUpdateOne {
	bruo.fields = append([]string{field}, fields...)
	return bruo
}

// Save executes the query and returns the updated BusRoute entity.
func (bruo *BusRouteUpdateOne) Save(ctx context.Context) (*BusRoute, error) {
	bruo.defaults()
	return withHooks(ctx, bruo.sqlSave, bruo.mutation, bruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bruo *BusRouteUpdateOne) SaveX(ctx context.Context) *BusRoute {
	node, err := bruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bruo *BusRouteUpdateOne) Exec(ctx context.Context) error {
	_, err := bruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bruo *BusRouteUpdateOne) ExecX(ctx context.Context) {
	if err := bruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bruo *BusRouteUpdateOne) defaults() {
	if _, ok := bruo.mutation.UpdatedAt(); !ok {
		v := busroute.UpdateDefaultUpdatedAt()
		bruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bruo *BusRouteUpdateOne) check() error {
	if v, ok := bruo.mutation.BusType(); ok {
		if err := busroute.BusTypeValidator(v); err != nil {
			return &ValidationError{Name: "bus_type", err: fmt.Errorf(`ent: validator failed for field "BusRoute.bus_type": %w`, err)}
		}
	}
	return nil
}

func (bruo *BusRouteUpdateOne) sqlSave(ctx context.Context) (_node *BusRoute, err error) {
	if err := bruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(busroute.Table, busroute.Columns, sqlgraph.NewFieldSpec(busroute.FieldID, field.TypeUUID))
	id, ok := bruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BusRoute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, busroute.FieldID)
		for _, f := range fields {
			if !busroute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != busroute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bruo.mutation.BusType(); ok {
		_spec.SetField(busroute.FieldBusType, field.TypeEnum, value)
	}
	if value, ok := bruo.mutation.CreatedAt(); ok {
		_spec.SetField(busroute.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bruo.mutation.UpdatedAt(); ok {
		_spec.SetField(busroute.FieldUpdatedAt, field.TypeTime, value)
	}
	if bruo.mutation.BusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   busroute.BusTable,
			Columns: busroute.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.RemovedBusIDs(); len(nodes) > 0 && !bruo.mutation.BusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   busroute.BusTable,
			Columns: busroute.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.BusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   busroute.BusTable,
			Columns: busroute.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bruo.mutation.ChildBusAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.ChildBusAssociationsTable,
			Columns: []string{busroute.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.RemovedChildBusAssociationsIDs(); len(nodes) > 0 && !bruo.mutation.ChildBusAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.ChildBusAssociationsTable,
			Columns: []string{busroute.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.ChildBusAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.ChildBusAssociationsTable,
			Columns: []string{busroute.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bruo.mutation.BusRouteAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.BusRouteAssociationsTable,
			Columns: []string{busroute.BusRouteAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(busrouteassociation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.RemovedBusRouteAssociationsIDs(); len(nodes) > 0 && !bruo.mutation.BusRouteAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.BusRouteAssociationsTable,
			Columns: []string{busroute.BusRouteAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(busrouteassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.BusRouteAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.BusRouteAssociationsTable,
			Columns: []string{busroute.BusRouteAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(busrouteassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bruo.mutation.MorningBusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.MorningBusesTable,
			Columns: []string{busroute.MorningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.RemovedMorningBusesIDs(); len(nodes) > 0 && !bruo.mutation.MorningBusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.MorningBusesTable,
			Columns: []string{busroute.MorningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.MorningBusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.MorningBusesTable,
			Columns: []string{busroute.MorningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bruo.mutation.EveningBusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.EveningBusesTable,
			Columns: []string{busroute.EveningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.RemovedEveningBusesIDs(); len(nodes) > 0 && !bruo.mutation.EveningBusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.EveningBusesTable,
			Columns: []string{busroute.EveningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.EveningBusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   busroute.EveningBusesTable,
			Columns: []string{busroute.EveningBusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BusRoute{config: bruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{busroute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bruo.mutation.done = true
	return _node, nil
}
