// Code generated by ent, DO NOT EDIT.

package bus

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Bus {
	return predicate.Bus(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Bus {
	return predicate.Bus(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Bus {
	return predicate.Bus(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Bus {
	return predicate.Bus(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Bus {
	return predicate.Bus(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Bus {
	return predicate.Bus(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Bus {
	return predicate.Bus(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldName, v))
}

// PlateNumber applies equality check predicate on the "plate_number" field. It's identical to PlateNumberEQ.
func PlateNumber(v string) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldPlateNumber, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldLatitude, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldLongitude, v))
}

// EnableFaceRecognition applies equality check predicate on the "enable_face_recognition" field. It's identical to EnableFaceRecognitionEQ.
func EnableFaceRecognition(v bool) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldEnableFaceRecognition, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Bus {
	return predicate.Bus(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Bus {
	return predicate.Bus(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Bus {
	return predicate.Bus(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Bus {
	return predicate.Bus(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Bus {
	return predicate.Bus(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Bus {
	return predicate.Bus(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Bus {
	return predicate.Bus(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Bus {
	return predicate.Bus(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Bus {
	return predicate.Bus(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Bus {
	return predicate.Bus(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Bus {
	return predicate.Bus(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Bus {
	return predicate.Bus(sql.FieldContainsFold(FieldName, v))
}

// PlateNumberEQ applies the EQ predicate on the "plate_number" field.
func PlateNumberEQ(v string) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldPlateNumber, v))
}

// PlateNumberNEQ applies the NEQ predicate on the "plate_number" field.
func PlateNumberNEQ(v string) predicate.Bus {
	return predicate.Bus(sql.FieldNEQ(FieldPlateNumber, v))
}

// PlateNumberIn applies the In predicate on the "plate_number" field.
func PlateNumberIn(vs ...string) predicate.Bus {
	return predicate.Bus(sql.FieldIn(FieldPlateNumber, vs...))
}

// PlateNumberNotIn applies the NotIn predicate on the "plate_number" field.
func PlateNumberNotIn(vs ...string) predicate.Bus {
	return predicate.Bus(sql.FieldNotIn(FieldPlateNumber, vs...))
}

// PlateNumberGT applies the GT predicate on the "plate_number" field.
func PlateNumberGT(v string) predicate.Bus {
	return predicate.Bus(sql.FieldGT(FieldPlateNumber, v))
}

// PlateNumberGTE applies the GTE predicate on the "plate_number" field.
func PlateNumberGTE(v string) predicate.Bus {
	return predicate.Bus(sql.FieldGTE(FieldPlateNumber, v))
}

// PlateNumberLT applies the LT predicate on the "plate_number" field.
func PlateNumberLT(v string) predicate.Bus {
	return predicate.Bus(sql.FieldLT(FieldPlateNumber, v))
}

// PlateNumberLTE applies the LTE predicate on the "plate_number" field.
func PlateNumberLTE(v string) predicate.Bus {
	return predicate.Bus(sql.FieldLTE(FieldPlateNumber, v))
}

// PlateNumberContains applies the Contains predicate on the "plate_number" field.
func PlateNumberContains(v string) predicate.Bus {
	return predicate.Bus(sql.FieldContains(FieldPlateNumber, v))
}

// PlateNumberHasPrefix applies the HasPrefix predicate on the "plate_number" field.
func PlateNumberHasPrefix(v string) predicate.Bus {
	return predicate.Bus(sql.FieldHasPrefix(FieldPlateNumber, v))
}

// PlateNumberHasSuffix applies the HasSuffix predicate on the "plate_number" field.
func PlateNumberHasSuffix(v string) predicate.Bus {
	return predicate.Bus(sql.FieldHasSuffix(FieldPlateNumber, v))
}

// PlateNumberIsNil applies the IsNil predicate on the "plate_number" field.
func PlateNumberIsNil() predicate.Bus {
	return predicate.Bus(sql.FieldIsNull(FieldPlateNumber))
}

// PlateNumberNotNil applies the NotNil predicate on the "plate_number" field.
func PlateNumberNotNil() predicate.Bus {
	return predicate.Bus(sql.FieldNotNull(FieldPlateNumber))
}

// PlateNumberEqualFold applies the EqualFold predicate on the "plate_number" field.
func PlateNumberEqualFold(v string) predicate.Bus {
	return predicate.Bus(sql.FieldEqualFold(FieldPlateNumber, v))
}

// PlateNumberContainsFold applies the ContainsFold predicate on the "plate_number" field.
func PlateNumberContainsFold(v string) predicate.Bus {
	return predicate.Bus(sql.FieldContainsFold(FieldPlateNumber, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.Bus {
	return predicate.Bus(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.Bus {
	return predicate.Bus(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldLTE(FieldLatitude, v))
}

// LatitudeIsNil applies the IsNil predicate on the "latitude" field.
func LatitudeIsNil() predicate.Bus {
	return predicate.Bus(sql.FieldIsNull(FieldLatitude))
}

// LatitudeNotNil applies the NotNil predicate on the "latitude" field.
func LatitudeNotNil() predicate.Bus {
	return predicate.Bus(sql.FieldNotNull(FieldLatitude))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.Bus {
	return predicate.Bus(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.Bus {
	return predicate.Bus(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.Bus {
	return predicate.Bus(sql.FieldLTE(FieldLongitude, v))
}

// LongitudeIsNil applies the IsNil predicate on the "longitude" field.
func LongitudeIsNil() predicate.Bus {
	return predicate.Bus(sql.FieldIsNull(FieldLongitude))
}

// LongitudeNotNil applies the NotNil predicate on the "longitude" field.
func LongitudeNotNil() predicate.Bus {
	return predicate.Bus(sql.FieldNotNull(FieldLongitude))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Bus {
	return predicate.Bus(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Bus {
	return predicate.Bus(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Bus {
	return predicate.Bus(sql.FieldNotIn(FieldStatus, vs...))
}

// EnableFaceRecognitionEQ applies the EQ predicate on the "enable_face_recognition" field.
func EnableFaceRecognitionEQ(v bool) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldEnableFaceRecognition, v))
}

// EnableFaceRecognitionNEQ applies the NEQ predicate on the "enable_face_recognition" field.
func EnableFaceRecognitionNEQ(v bool) predicate.Bus {
	return predicate.Bus(sql.FieldNEQ(FieldEnableFaceRecognition, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Bus {
	return predicate.Bus(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasNursery applies the HasEdge predicate on the "nursery" edge.
func HasNursery() predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, NurseryTable, NurseryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNurseryWith applies the HasEdge predicate on the "nursery" edge with a given conditions (other predicates).
func HasNurseryWith(preds ...predicate.Nursery) predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := newNurseryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStations applies the HasEdge predicate on the "stations" edge.
func HasStations() predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, StationsTable, StationsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationsWith applies the HasEdge predicate on the "stations" edge with a given conditions (other predicates).
func HasStationsWith(preds ...predicate.Station) predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := newStationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBoardingRecords applies the HasEdge predicate on the "boarding_records" edge.
func HasBoardingRecords() predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BoardingRecordsTable, BoardingRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBoardingRecordsWith applies the HasEdge predicate on the "boarding_records" edge with a given conditions (other predicates).
func HasBoardingRecordsWith(preds ...predicate.BoardingRecord) predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := newBoardingRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildBusAssociations applies the HasEdge predicate on the "childBusAssociations" edge.
func HasChildBusAssociations() predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildBusAssociationsTable, ChildBusAssociationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildBusAssociationsWith applies the HasEdge predicate on the "childBusAssociations" edge with a given conditions (other predicates).
func HasChildBusAssociationsWith(preds ...predicate.ChildBusAssociation) predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := newChildBusAssociationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDestinationStation applies the HasEdge predicate on the "destination_station" edge.
func HasDestinationStation() predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DestinationStationTable, DestinationStationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDestinationStationWith applies the HasEdge predicate on the "destination_station" edge with a given conditions (other predicates).
func HasDestinationStationWith(preds ...predicate.Station) predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := newDestinationStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMorningFirstStation applies the HasEdge predicate on the "morning_first_station" edge.
func HasMorningFirstStation() predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MorningFirstStationTable, MorningFirstStationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMorningFirstStationWith applies the HasEdge predicate on the "morning_first_station" edge with a given conditions (other predicates).
func HasMorningFirstStationWith(preds ...predicate.Station) predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := newMorningFirstStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEveningFirstStation applies the HasEdge predicate on the "evening_first_station" edge.
func HasEveningFirstStation() predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EveningFirstStationTable, EveningFirstStationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEveningFirstStationWith applies the HasEdge predicate on the "evening_first_station" edge with a given conditions (other predicates).
func HasEveningFirstStationWith(preds ...predicate.Station) predicate.Bus {
	return predicate.Bus(func(s *sql.Selector) {
		step := newEveningFirstStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bus) predicate.Bus {
	return predicate.Bus(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bus) predicate.Bus {
	return predicate.Bus(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bus) predicate.Bus {
	return predicate.Bus(sql.NotPredicates(p))
}
