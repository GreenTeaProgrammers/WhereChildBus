// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/migrate"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/boardingrecord"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/bus"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busroute"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busrouteassociation"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/child"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/childbusassociation"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/childphoto"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/guardian"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/nursery"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/station"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BoardingRecord is the client for interacting with the BoardingRecord builders.
	BoardingRecord *BoardingRecordClient
	// Bus is the client for interacting with the Bus builders.
	Bus *BusClient
	// BusRoute is the client for interacting with the BusRoute builders.
	BusRoute *BusRouteClient
	// BusRouteAssociation is the client for interacting with the BusRouteAssociation builders.
	BusRouteAssociation *BusRouteAssociationClient
	// Child is the client for interacting with the Child builders.
	Child *ChildClient
	// ChildBusAssociation is the client for interacting with the ChildBusAssociation builders.
	ChildBusAssociation *ChildBusAssociationClient
	// ChildPhoto is the client for interacting with the ChildPhoto builders.
	ChildPhoto *ChildPhotoClient
	// Guardian is the client for interacting with the Guardian builders.
	Guardian *GuardianClient
	// Nursery is the client for interacting with the Nursery builders.
	Nursery *NurseryClient
	// Station is the client for interacting with the Station builders.
	Station *StationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BoardingRecord = NewBoardingRecordClient(c.config)
	c.Bus = NewBusClient(c.config)
	c.BusRoute = NewBusRouteClient(c.config)
	c.BusRouteAssociation = NewBusRouteAssociationClient(c.config)
	c.Child = NewChildClient(c.config)
	c.ChildBusAssociation = NewChildBusAssociationClient(c.config)
	c.ChildPhoto = NewChildPhotoClient(c.config)
	c.Guardian = NewGuardianClient(c.config)
	c.Nursery = NewNurseryClient(c.config)
	c.Station = NewStationClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		BoardingRecord:      NewBoardingRecordClient(cfg),
		Bus:                 NewBusClient(cfg),
		BusRoute:            NewBusRouteClient(cfg),
		BusRouteAssociation: NewBusRouteAssociationClient(cfg),
		Child:               NewChildClient(cfg),
		ChildBusAssociation: NewChildBusAssociationClient(cfg),
		ChildPhoto:          NewChildPhotoClient(cfg),
		Guardian:            NewGuardianClient(cfg),
		Nursery:             NewNurseryClient(cfg),
		Station:             NewStationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		BoardingRecord:      NewBoardingRecordClient(cfg),
		Bus:                 NewBusClient(cfg),
		BusRoute:            NewBusRouteClient(cfg),
		BusRouteAssociation: NewBusRouteAssociationClient(cfg),
		Child:               NewChildClient(cfg),
		ChildBusAssociation: NewChildBusAssociationClient(cfg),
		ChildPhoto:          NewChildPhotoClient(cfg),
		Guardian:            NewGuardianClient(cfg),
		Nursery:             NewNurseryClient(cfg),
		Station:             NewStationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BoardingRecord.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.BoardingRecord, c.Bus, c.BusRoute, c.BusRouteAssociation, c.Child,
		c.ChildBusAssociation, c.ChildPhoto, c.Guardian, c.Nursery, c.Station,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.BoardingRecord, c.Bus, c.BusRoute, c.BusRouteAssociation, c.Child,
		c.ChildBusAssociation, c.ChildPhoto, c.Guardian, c.Nursery, c.Station,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BoardingRecordMutation:
		return c.BoardingRecord.mutate(ctx, m)
	case *BusMutation:
		return c.Bus.mutate(ctx, m)
	case *BusRouteMutation:
		return c.BusRoute.mutate(ctx, m)
	case *BusRouteAssociationMutation:
		return c.BusRouteAssociation.mutate(ctx, m)
	case *ChildMutation:
		return c.Child.mutate(ctx, m)
	case *ChildBusAssociationMutation:
		return c.ChildBusAssociation.mutate(ctx, m)
	case *ChildPhotoMutation:
		return c.ChildPhoto.mutate(ctx, m)
	case *GuardianMutation:
		return c.Guardian.mutate(ctx, m)
	case *NurseryMutation:
		return c.Nursery.mutate(ctx, m)
	case *StationMutation:
		return c.Station.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BoardingRecordClient is a client for the BoardingRecord schema.
type BoardingRecordClient struct {
	config
}

// NewBoardingRecordClient returns a client for the BoardingRecord from the given config.
func NewBoardingRecordClient(c config) *BoardingRecordClient {
	return &BoardingRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `boardingrecord.Hooks(f(g(h())))`.
func (c *BoardingRecordClient) Use(hooks ...Hook) {
	c.hooks.BoardingRecord = append(c.hooks.BoardingRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `boardingrecord.Intercept(f(g(h())))`.
func (c *BoardingRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.BoardingRecord = append(c.inters.BoardingRecord, interceptors...)
}

// Create returns a builder for creating a BoardingRecord entity.
func (c *BoardingRecordClient) Create() *BoardingRecordCreate {
	mutation := newBoardingRecordMutation(c.config, OpCreate)
	return &BoardingRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BoardingRecord entities.
func (c *BoardingRecordClient) CreateBulk(builders ...*BoardingRecordCreate) *BoardingRecordCreateBulk {
	return &BoardingRecordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BoardingRecordClient) MapCreateBulk(slice any, setFunc func(*BoardingRecordCreate, int)) *BoardingRecordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BoardingRecordCreateBulk{err: fmt.Errorf("calling to BoardingRecordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BoardingRecordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BoardingRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BoardingRecord.
func (c *BoardingRecordClient) Update() *BoardingRecordUpdate {
	mutation := newBoardingRecordMutation(c.config, OpUpdate)
	return &BoardingRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BoardingRecordClient) UpdateOne(br *BoardingRecord) *BoardingRecordUpdateOne {
	mutation := newBoardingRecordMutation(c.config, OpUpdateOne, withBoardingRecord(br))
	return &BoardingRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BoardingRecordClient) UpdateOneID(id uuid.UUID) *BoardingRecordUpdateOne {
	mutation := newBoardingRecordMutation(c.config, OpUpdateOne, withBoardingRecordID(id))
	return &BoardingRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BoardingRecord.
func (c *BoardingRecordClient) Delete() *BoardingRecordDelete {
	mutation := newBoardingRecordMutation(c.config, OpDelete)
	return &BoardingRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BoardingRecordClient) DeleteOne(br *BoardingRecord) *BoardingRecordDeleteOne {
	return c.DeleteOneID(br.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BoardingRecordClient) DeleteOneID(id uuid.UUID) *BoardingRecordDeleteOne {
	builder := c.Delete().Where(boardingrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BoardingRecordDeleteOne{builder}
}

// Query returns a query builder for BoardingRecord.
func (c *BoardingRecordClient) Query() *BoardingRecordQuery {
	return &BoardingRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBoardingRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a BoardingRecord entity by its id.
func (c *BoardingRecordClient) Get(ctx context.Context, id uuid.UUID) (*BoardingRecord, error) {
	return c.Query().Where(boardingrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BoardingRecordClient) GetX(ctx context.Context, id uuid.UUID) *BoardingRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChild queries the child edge of a BoardingRecord.
func (c *BoardingRecordClient) QueryChild(br *BoardingRecord) *ChildQuery {
	query := (&ChildClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := br.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(boardingrecord.Table, boardingrecord.FieldID, id),
			sqlgraph.To(child.Table, child.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, boardingrecord.ChildTable, boardingrecord.ChildColumn),
		)
		fromV = sqlgraph.Neighbors(br.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBus queries the bus edge of a BoardingRecord.
func (c *BoardingRecordClient) QueryBus(br *BoardingRecord) *BusQuery {
	query := (&BusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := br.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(boardingrecord.Table, boardingrecord.FieldID, id),
			sqlgraph.To(bus.Table, bus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, boardingrecord.BusTable, boardingrecord.BusColumn),
		)
		fromV = sqlgraph.Neighbors(br.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BoardingRecordClient) Hooks() []Hook {
	return c.hooks.BoardingRecord
}

// Interceptors returns the client interceptors.
func (c *BoardingRecordClient) Interceptors() []Interceptor {
	return c.inters.BoardingRecord
}

func (c *BoardingRecordClient) mutate(ctx context.Context, m *BoardingRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BoardingRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BoardingRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BoardingRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BoardingRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BoardingRecord mutation op: %q", m.Op())
	}
}

// BusClient is a client for the Bus schema.
type BusClient struct {
	config
}

// NewBusClient returns a client for the Bus from the given config.
func NewBusClient(c config) *BusClient {
	return &BusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bus.Hooks(f(g(h())))`.
func (c *BusClient) Use(hooks ...Hook) {
	c.hooks.Bus = append(c.hooks.Bus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bus.Intercept(f(g(h())))`.
func (c *BusClient) Intercept(interceptors ...Interceptor) {
	c.inters.Bus = append(c.inters.Bus, interceptors...)
}

// Create returns a builder for creating a Bus entity.
func (c *BusClient) Create() *BusCreate {
	mutation := newBusMutation(c.config, OpCreate)
	return &BusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bus entities.
func (c *BusClient) CreateBulk(builders ...*BusCreate) *BusCreateBulk {
	return &BusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BusClient) MapCreateBulk(slice any, setFunc func(*BusCreate, int)) *BusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BusCreateBulk{err: fmt.Errorf("calling to BusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bus.
func (c *BusClient) Update() *BusUpdate {
	mutation := newBusMutation(c.config, OpUpdate)
	return &BusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BusClient) UpdateOne(b *Bus) *BusUpdateOne {
	mutation := newBusMutation(c.config, OpUpdateOne, withBus(b))
	return &BusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BusClient) UpdateOneID(id uuid.UUID) *BusUpdateOne {
	mutation := newBusMutation(c.config, OpUpdateOne, withBusID(id))
	return &BusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bus.
func (c *BusClient) Delete() *BusDelete {
	mutation := newBusMutation(c.config, OpDelete)
	return &BusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BusClient) DeleteOne(b *Bus) *BusDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BusClient) DeleteOneID(id uuid.UUID) *BusDeleteOne {
	builder := c.Delete().Where(bus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BusDeleteOne{builder}
}

// Query returns a query builder for Bus.
func (c *BusClient) Query() *BusQuery {
	return &BusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBus},
		inters: c.Interceptors(),
	}
}

// Get returns a Bus entity by its id.
func (c *BusClient) Get(ctx context.Context, id uuid.UUID) (*Bus, error) {
	return c.Query().Where(bus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BusClient) GetX(ctx context.Context, id uuid.UUID) *Bus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNursery queries the nursery edge of a Bus.
func (c *BusClient) QueryNursery(b *Bus) *NurseryQuery {
	query := (&NurseryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bus.Table, bus.FieldID, id),
			sqlgraph.To(nursery.Table, nursery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, bus.NurseryTable, bus.NurseryColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBoardingRecords queries the boarding_records edge of a Bus.
func (c *BusClient) QueryBoardingRecords(b *Bus) *BoardingRecordQuery {
	query := (&BoardingRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bus.Table, bus.FieldID, id),
			sqlgraph.To(boardingrecord.Table, boardingrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bus.BoardingRecordsTable, bus.BoardingRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNextStation queries the next_station edge of a Bus.
func (c *BusClient) QueryNextStation(b *Bus) *StationQuery {
	query := (&StationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bus.Table, bus.FieldID, id),
			sqlgraph.To(station.Table, station.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, bus.NextStationTable, bus.NextStationColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusRoute queries the bus_route edge of a Bus.
func (c *BusClient) QueryBusRoute(b *Bus) *BusRouteQuery {
	query := (&BusRouteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bus.Table, bus.FieldID, id),
			sqlgraph.To(busroute.Table, busroute.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, bus.BusRouteTable, bus.BusRoutePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLatestMorningRoute queries the latest_morning_route edge of a Bus.
func (c *BusClient) QueryLatestMorningRoute(b *Bus) *BusRouteQuery {
	query := (&BusRouteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bus.Table, bus.FieldID, id),
			sqlgraph.To(busroute.Table, busroute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, bus.LatestMorningRouteTable, bus.LatestMorningRouteColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLatestEveningRoute queries the latest_evening_route edge of a Bus.
func (c *BusClient) QueryLatestEveningRoute(b *Bus) *BusRouteQuery {
	query := (&BusRouteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bus.Table, bus.FieldID, id),
			sqlgraph.To(busroute.Table, busroute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, bus.LatestEveningRouteTable, bus.LatestEveningRouteColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BusClient) Hooks() []Hook {
	return c.hooks.Bus
}

// Interceptors returns the client interceptors.
func (c *BusClient) Interceptors() []Interceptor {
	return c.inters.Bus
}

func (c *BusClient) mutate(ctx context.Context, m *BusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Bus mutation op: %q", m.Op())
	}
}

// BusRouteClient is a client for the BusRoute schema.
type BusRouteClient struct {
	config
}

// NewBusRouteClient returns a client for the BusRoute from the given config.
func NewBusRouteClient(c config) *BusRouteClient {
	return &BusRouteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `busroute.Hooks(f(g(h())))`.
func (c *BusRouteClient) Use(hooks ...Hook) {
	c.hooks.BusRoute = append(c.hooks.BusRoute, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `busroute.Intercept(f(g(h())))`.
func (c *BusRouteClient) Intercept(interceptors ...Interceptor) {
	c.inters.BusRoute = append(c.inters.BusRoute, interceptors...)
}

// Create returns a builder for creating a BusRoute entity.
func (c *BusRouteClient) Create() *BusRouteCreate {
	mutation := newBusRouteMutation(c.config, OpCreate)
	return &BusRouteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BusRoute entities.
func (c *BusRouteClient) CreateBulk(builders ...*BusRouteCreate) *BusRouteCreateBulk {
	return &BusRouteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BusRouteClient) MapCreateBulk(slice any, setFunc func(*BusRouteCreate, int)) *BusRouteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BusRouteCreateBulk{err: fmt.Errorf("calling to BusRouteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BusRouteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BusRouteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BusRoute.
func (c *BusRouteClient) Update() *BusRouteUpdate {
	mutation := newBusRouteMutation(c.config, OpUpdate)
	return &BusRouteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BusRouteClient) UpdateOne(br *BusRoute) *BusRouteUpdateOne {
	mutation := newBusRouteMutation(c.config, OpUpdateOne, withBusRoute(br))
	return &BusRouteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BusRouteClient) UpdateOneID(id uuid.UUID) *BusRouteUpdateOne {
	mutation := newBusRouteMutation(c.config, OpUpdateOne, withBusRouteID(id))
	return &BusRouteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BusRoute.
func (c *BusRouteClient) Delete() *BusRouteDelete {
	mutation := newBusRouteMutation(c.config, OpDelete)
	return &BusRouteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BusRouteClient) DeleteOne(br *BusRoute) *BusRouteDeleteOne {
	return c.DeleteOneID(br.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BusRouteClient) DeleteOneID(id uuid.UUID) *BusRouteDeleteOne {
	builder := c.Delete().Where(busroute.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BusRouteDeleteOne{builder}
}

// Query returns a query builder for BusRoute.
func (c *BusRouteClient) Query() *BusRouteQuery {
	return &BusRouteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBusRoute},
		inters: c.Interceptors(),
	}
}

// Get returns a BusRoute entity by its id.
func (c *BusRouteClient) Get(ctx context.Context, id uuid.UUID) (*BusRoute, error) {
	return c.Query().Where(busroute.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BusRouteClient) GetX(ctx context.Context, id uuid.UUID) *BusRoute {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBus queries the bus edge of a BusRoute.
func (c *BusRouteClient) QueryBus(br *BusRoute) *BusQuery {
	query := (&BusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := br.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(busroute.Table, busroute.FieldID, id),
			sqlgraph.To(bus.Table, bus.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, busroute.BusTable, busroute.BusPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(br.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildBusAssociations queries the childBusAssociations edge of a BusRoute.
func (c *BusRouteClient) QueryChildBusAssociations(br *BusRoute) *ChildBusAssociationQuery {
	query := (&ChildBusAssociationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := br.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(busroute.Table, busroute.FieldID, id),
			sqlgraph.To(childbusassociation.Table, childbusassociation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, busroute.ChildBusAssociationsTable, busroute.ChildBusAssociationsColumn),
		)
		fromV = sqlgraph.Neighbors(br.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusRouteAssociations queries the busRouteAssociations edge of a BusRoute.
func (c *BusRouteClient) QueryBusRouteAssociations(br *BusRoute) *BusRouteAssociationQuery {
	query := (&BusRouteAssociationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := br.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(busroute.Table, busroute.FieldID, id),
			sqlgraph.To(busrouteassociation.Table, busrouteassociation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, busroute.BusRouteAssociationsTable, busroute.BusRouteAssociationsColumn),
		)
		fromV = sqlgraph.Neighbors(br.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMorningBuses queries the morning_buses edge of a BusRoute.
func (c *BusRouteClient) QueryMorningBuses(br *BusRoute) *BusQuery {
	query := (&BusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := br.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(busroute.Table, busroute.FieldID, id),
			sqlgraph.To(bus.Table, bus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, busroute.MorningBusesTable, busroute.MorningBusesColumn),
		)
		fromV = sqlgraph.Neighbors(br.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEveningBuses queries the evening_buses edge of a BusRoute.
func (c *BusRouteClient) QueryEveningBuses(br *BusRoute) *BusQuery {
	query := (&BusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := br.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(busroute.Table, busroute.FieldID, id),
			sqlgraph.To(bus.Table, bus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, busroute.EveningBusesTable, busroute.EveningBusesColumn),
		)
		fromV = sqlgraph.Neighbors(br.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BusRouteClient) Hooks() []Hook {
	return c.hooks.BusRoute
}

// Interceptors returns the client interceptors.
func (c *BusRouteClient) Interceptors() []Interceptor {
	return c.inters.BusRoute
}

func (c *BusRouteClient) mutate(ctx context.Context, m *BusRouteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BusRouteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BusRouteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BusRouteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BusRouteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BusRoute mutation op: %q", m.Op())
	}
}

// BusRouteAssociationClient is a client for the BusRouteAssociation schema.
type BusRouteAssociationClient struct {
	config
}

// NewBusRouteAssociationClient returns a client for the BusRouteAssociation from the given config.
func NewBusRouteAssociationClient(c config) *BusRouteAssociationClient {
	return &BusRouteAssociationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `busrouteassociation.Hooks(f(g(h())))`.
func (c *BusRouteAssociationClient) Use(hooks ...Hook) {
	c.hooks.BusRouteAssociation = append(c.hooks.BusRouteAssociation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `busrouteassociation.Intercept(f(g(h())))`.
func (c *BusRouteAssociationClient) Intercept(interceptors ...Interceptor) {
	c.inters.BusRouteAssociation = append(c.inters.BusRouteAssociation, interceptors...)
}

// Create returns a builder for creating a BusRouteAssociation entity.
func (c *BusRouteAssociationClient) Create() *BusRouteAssociationCreate {
	mutation := newBusRouteAssociationMutation(c.config, OpCreate)
	return &BusRouteAssociationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BusRouteAssociation entities.
func (c *BusRouteAssociationClient) CreateBulk(builders ...*BusRouteAssociationCreate) *BusRouteAssociationCreateBulk {
	return &BusRouteAssociationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BusRouteAssociationClient) MapCreateBulk(slice any, setFunc func(*BusRouteAssociationCreate, int)) *BusRouteAssociationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BusRouteAssociationCreateBulk{err: fmt.Errorf("calling to BusRouteAssociationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BusRouteAssociationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BusRouteAssociationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BusRouteAssociation.
func (c *BusRouteAssociationClient) Update() *BusRouteAssociationUpdate {
	mutation := newBusRouteAssociationMutation(c.config, OpUpdate)
	return &BusRouteAssociationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BusRouteAssociationClient) UpdateOne(bra *BusRouteAssociation) *BusRouteAssociationUpdateOne {
	mutation := newBusRouteAssociationMutation(c.config, OpUpdateOne, withBusRouteAssociation(bra))
	return &BusRouteAssociationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BusRouteAssociationClient) UpdateOneID(id int) *BusRouteAssociationUpdateOne {
	mutation := newBusRouteAssociationMutation(c.config, OpUpdateOne, withBusRouteAssociationID(id))
	return &BusRouteAssociationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BusRouteAssociation.
func (c *BusRouteAssociationClient) Delete() *BusRouteAssociationDelete {
	mutation := newBusRouteAssociationMutation(c.config, OpDelete)
	return &BusRouteAssociationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BusRouteAssociationClient) DeleteOne(bra *BusRouteAssociation) *BusRouteAssociationDeleteOne {
	return c.DeleteOneID(bra.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BusRouteAssociationClient) DeleteOneID(id int) *BusRouteAssociationDeleteOne {
	builder := c.Delete().Where(busrouteassociation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BusRouteAssociationDeleteOne{builder}
}

// Query returns a query builder for BusRouteAssociation.
func (c *BusRouteAssociationClient) Query() *BusRouteAssociationQuery {
	return &BusRouteAssociationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBusRouteAssociation},
		inters: c.Interceptors(),
	}
}

// Get returns a BusRouteAssociation entity by its id.
func (c *BusRouteAssociationClient) Get(ctx context.Context, id int) (*BusRouteAssociation, error) {
	return c.Query().Where(busrouteassociation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BusRouteAssociationClient) GetX(ctx context.Context, id int) *BusRouteAssociation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStation queries the station edge of a BusRouteAssociation.
func (c *BusRouteAssociationClient) QueryStation(bra *BusRouteAssociation) *StationQuery {
	query := (&StationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(busrouteassociation.Table, busrouteassociation.FieldID, id),
			sqlgraph.To(station.Table, station.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, busrouteassociation.StationTable, busrouteassociation.StationColumn),
		)
		fromV = sqlgraph.Neighbors(bra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusRoute queries the busRoute edge of a BusRouteAssociation.
func (c *BusRouteAssociationClient) QueryBusRoute(bra *BusRouteAssociation) *BusRouteQuery {
	query := (&BusRouteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(busrouteassociation.Table, busrouteassociation.FieldID, id),
			sqlgraph.To(busroute.Table, busroute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, busrouteassociation.BusRouteTable, busrouteassociation.BusRouteColumn),
		)
		fromV = sqlgraph.Neighbors(bra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BusRouteAssociationClient) Hooks() []Hook {
	return c.hooks.BusRouteAssociation
}

// Interceptors returns the client interceptors.
func (c *BusRouteAssociationClient) Interceptors() []Interceptor {
	return c.inters.BusRouteAssociation
}

func (c *BusRouteAssociationClient) mutate(ctx context.Context, m *BusRouteAssociationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BusRouteAssociationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BusRouteAssociationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BusRouteAssociationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BusRouteAssociationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BusRouteAssociation mutation op: %q", m.Op())
	}
}

// ChildClient is a client for the Child schema.
type ChildClient struct {
	config
}

// NewChildClient returns a client for the Child from the given config.
func NewChildClient(c config) *ChildClient {
	return &ChildClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `child.Hooks(f(g(h())))`.
func (c *ChildClient) Use(hooks ...Hook) {
	c.hooks.Child = append(c.hooks.Child, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `child.Intercept(f(g(h())))`.
func (c *ChildClient) Intercept(interceptors ...Interceptor) {
	c.inters.Child = append(c.inters.Child, interceptors...)
}

// Create returns a builder for creating a Child entity.
func (c *ChildClient) Create() *ChildCreate {
	mutation := newChildMutation(c.config, OpCreate)
	return &ChildCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Child entities.
func (c *ChildClient) CreateBulk(builders ...*ChildCreate) *ChildCreateBulk {
	return &ChildCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChildClient) MapCreateBulk(slice any, setFunc func(*ChildCreate, int)) *ChildCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChildCreateBulk{err: fmt.Errorf("calling to ChildClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChildCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChildCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Child.
func (c *ChildClient) Update() *ChildUpdate {
	mutation := newChildMutation(c.config, OpUpdate)
	return &ChildUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChildClient) UpdateOne(ch *Child) *ChildUpdateOne {
	mutation := newChildMutation(c.config, OpUpdateOne, withChild(ch))
	return &ChildUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChildClient) UpdateOneID(id uuid.UUID) *ChildUpdateOne {
	mutation := newChildMutation(c.config, OpUpdateOne, withChildID(id))
	return &ChildUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Child.
func (c *ChildClient) Delete() *ChildDelete {
	mutation := newChildMutation(c.config, OpDelete)
	return &ChildDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChildClient) DeleteOne(ch *Child) *ChildDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChildClient) DeleteOneID(id uuid.UUID) *ChildDeleteOne {
	builder := c.Delete().Where(child.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChildDeleteOne{builder}
}

// Query returns a query builder for Child.
func (c *ChildClient) Query() *ChildQuery {
	return &ChildQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChild},
		inters: c.Interceptors(),
	}
}

// Get returns a Child entity by its id.
func (c *ChildClient) Get(ctx context.Context, id uuid.UUID) (*Child, error) {
	return c.Query().Where(child.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChildClient) GetX(ctx context.Context, id uuid.UUID) *Child {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuardian queries the guardian edge of a Child.
func (c *ChildClient) QueryGuardian(ch *Child) *GuardianQuery {
	query := (&GuardianClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(child.Table, child.FieldID, id),
			sqlgraph.To(guardian.Table, guardian.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, child.GuardianTable, child.GuardianColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildBusAssociations queries the childBusAssociations edge of a Child.
func (c *ChildClient) QueryChildBusAssociations(ch *Child) *ChildBusAssociationQuery {
	query := (&ChildBusAssociationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(child.Table, child.FieldID, id),
			sqlgraph.To(childbusassociation.Table, childbusassociation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, child.ChildBusAssociationsTable, child.ChildBusAssociationsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBoardingRecord queries the boarding_record edge of a Child.
func (c *ChildClient) QueryBoardingRecord(ch *Child) *BoardingRecordQuery {
	query := (&BoardingRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(child.Table, child.FieldID, id),
			sqlgraph.To(boardingrecord.Table, boardingrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, child.BoardingRecordTable, child.BoardingRecordColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPhotos queries the photos edge of a Child.
func (c *ChildClient) QueryPhotos(ch *Child) *ChildPhotoQuery {
	query := (&ChildPhotoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(child.Table, child.FieldID, id),
			sqlgraph.To(childphoto.Table, childphoto.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, child.PhotosTable, child.PhotosColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChildClient) Hooks() []Hook {
	return c.hooks.Child
}

// Interceptors returns the client interceptors.
func (c *ChildClient) Interceptors() []Interceptor {
	return c.inters.Child
}

func (c *ChildClient) mutate(ctx context.Context, m *ChildMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChildCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChildUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChildUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChildDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Child mutation op: %q", m.Op())
	}
}

// ChildBusAssociationClient is a client for the ChildBusAssociation schema.
type ChildBusAssociationClient struct {
	config
}

// NewChildBusAssociationClient returns a client for the ChildBusAssociation from the given config.
func NewChildBusAssociationClient(c config) *ChildBusAssociationClient {
	return &ChildBusAssociationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `childbusassociation.Hooks(f(g(h())))`.
func (c *ChildBusAssociationClient) Use(hooks ...Hook) {
	c.hooks.ChildBusAssociation = append(c.hooks.ChildBusAssociation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `childbusassociation.Intercept(f(g(h())))`.
func (c *ChildBusAssociationClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChildBusAssociation = append(c.inters.ChildBusAssociation, interceptors...)
}

// Create returns a builder for creating a ChildBusAssociation entity.
func (c *ChildBusAssociationClient) Create() *ChildBusAssociationCreate {
	mutation := newChildBusAssociationMutation(c.config, OpCreate)
	return &ChildBusAssociationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChildBusAssociation entities.
func (c *ChildBusAssociationClient) CreateBulk(builders ...*ChildBusAssociationCreate) *ChildBusAssociationCreateBulk {
	return &ChildBusAssociationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChildBusAssociationClient) MapCreateBulk(slice any, setFunc func(*ChildBusAssociationCreate, int)) *ChildBusAssociationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChildBusAssociationCreateBulk{err: fmt.Errorf("calling to ChildBusAssociationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChildBusAssociationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChildBusAssociationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChildBusAssociation.
func (c *ChildBusAssociationClient) Update() *ChildBusAssociationUpdate {
	mutation := newChildBusAssociationMutation(c.config, OpUpdate)
	return &ChildBusAssociationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChildBusAssociationClient) UpdateOne(cba *ChildBusAssociation) *ChildBusAssociationUpdateOne {
	mutation := newChildBusAssociationMutation(c.config, OpUpdateOne, withChildBusAssociation(cba))
	return &ChildBusAssociationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChildBusAssociationClient) UpdateOneID(id int) *ChildBusAssociationUpdateOne {
	mutation := newChildBusAssociationMutation(c.config, OpUpdateOne, withChildBusAssociationID(id))
	return &ChildBusAssociationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChildBusAssociation.
func (c *ChildBusAssociationClient) Delete() *ChildBusAssociationDelete {
	mutation := newChildBusAssociationMutation(c.config, OpDelete)
	return &ChildBusAssociationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChildBusAssociationClient) DeleteOne(cba *ChildBusAssociation) *ChildBusAssociationDeleteOne {
	return c.DeleteOneID(cba.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChildBusAssociationClient) DeleteOneID(id int) *ChildBusAssociationDeleteOne {
	builder := c.Delete().Where(childbusassociation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChildBusAssociationDeleteOne{builder}
}

// Query returns a query builder for ChildBusAssociation.
func (c *ChildBusAssociationClient) Query() *ChildBusAssociationQuery {
	return &ChildBusAssociationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChildBusAssociation},
		inters: c.Interceptors(),
	}
}

// Get returns a ChildBusAssociation entity by its id.
func (c *ChildBusAssociationClient) Get(ctx context.Context, id int) (*ChildBusAssociation, error) {
	return c.Query().Where(childbusassociation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChildBusAssociationClient) GetX(ctx context.Context, id int) *ChildBusAssociation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChild queries the child edge of a ChildBusAssociation.
func (c *ChildBusAssociationClient) QueryChild(cba *ChildBusAssociation) *ChildQuery {
	query := (&ChildClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cba.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(childbusassociation.Table, childbusassociation.FieldID, id),
			sqlgraph.To(child.Table, child.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, childbusassociation.ChildTable, childbusassociation.ChildColumn),
		)
		fromV = sqlgraph.Neighbors(cba.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusRoute queries the bus_route edge of a ChildBusAssociation.
func (c *ChildBusAssociationClient) QueryBusRoute(cba *ChildBusAssociation) *BusRouteQuery {
	query := (&BusRouteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cba.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(childbusassociation.Table, childbusassociation.FieldID, id),
			sqlgraph.To(busroute.Table, busroute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, childbusassociation.BusRouteTable, childbusassociation.BusRouteColumn),
		)
		fromV = sqlgraph.Neighbors(cba.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChildBusAssociationClient) Hooks() []Hook {
	return c.hooks.ChildBusAssociation
}

// Interceptors returns the client interceptors.
func (c *ChildBusAssociationClient) Interceptors() []Interceptor {
	return c.inters.ChildBusAssociation
}

func (c *ChildBusAssociationClient) mutate(ctx context.Context, m *ChildBusAssociationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChildBusAssociationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChildBusAssociationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChildBusAssociationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChildBusAssociationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChildBusAssociation mutation op: %q", m.Op())
	}
}

// ChildPhotoClient is a client for the ChildPhoto schema.
type ChildPhotoClient struct {
	config
}

// NewChildPhotoClient returns a client for the ChildPhoto from the given config.
func NewChildPhotoClient(c config) *ChildPhotoClient {
	return &ChildPhotoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `childphoto.Hooks(f(g(h())))`.
func (c *ChildPhotoClient) Use(hooks ...Hook) {
	c.hooks.ChildPhoto = append(c.hooks.ChildPhoto, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `childphoto.Intercept(f(g(h())))`.
func (c *ChildPhotoClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChildPhoto = append(c.inters.ChildPhoto, interceptors...)
}

// Create returns a builder for creating a ChildPhoto entity.
func (c *ChildPhotoClient) Create() *ChildPhotoCreate {
	mutation := newChildPhotoMutation(c.config, OpCreate)
	return &ChildPhotoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChildPhoto entities.
func (c *ChildPhotoClient) CreateBulk(builders ...*ChildPhotoCreate) *ChildPhotoCreateBulk {
	return &ChildPhotoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChildPhotoClient) MapCreateBulk(slice any, setFunc func(*ChildPhotoCreate, int)) *ChildPhotoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChildPhotoCreateBulk{err: fmt.Errorf("calling to ChildPhotoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChildPhotoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChildPhotoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChildPhoto.
func (c *ChildPhotoClient) Update() *ChildPhotoUpdate {
	mutation := newChildPhotoMutation(c.config, OpUpdate)
	return &ChildPhotoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChildPhotoClient) UpdateOne(cp *ChildPhoto) *ChildPhotoUpdateOne {
	mutation := newChildPhotoMutation(c.config, OpUpdateOne, withChildPhoto(cp))
	return &ChildPhotoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChildPhotoClient) UpdateOneID(id uuid.UUID) *ChildPhotoUpdateOne {
	mutation := newChildPhotoMutation(c.config, OpUpdateOne, withChildPhotoID(id))
	return &ChildPhotoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChildPhoto.
func (c *ChildPhotoClient) Delete() *ChildPhotoDelete {
	mutation := newChildPhotoMutation(c.config, OpDelete)
	return &ChildPhotoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChildPhotoClient) DeleteOne(cp *ChildPhoto) *ChildPhotoDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChildPhotoClient) DeleteOneID(id uuid.UUID) *ChildPhotoDeleteOne {
	builder := c.Delete().Where(childphoto.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChildPhotoDeleteOne{builder}
}

// Query returns a query builder for ChildPhoto.
func (c *ChildPhotoClient) Query() *ChildPhotoQuery {
	return &ChildPhotoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChildPhoto},
		inters: c.Interceptors(),
	}
}

// Get returns a ChildPhoto entity by its id.
func (c *ChildPhotoClient) Get(ctx context.Context, id uuid.UUID) (*ChildPhoto, error) {
	return c.Query().Where(childphoto.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChildPhotoClient) GetX(ctx context.Context, id uuid.UUID) *ChildPhoto {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChild queries the child edge of a ChildPhoto.
func (c *ChildPhotoClient) QueryChild(cp *ChildPhoto) *ChildQuery {
	query := (&ChildClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(childphoto.Table, childphoto.FieldID, id),
			sqlgraph.To(child.Table, child.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, childphoto.ChildTable, childphoto.ChildColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChildPhotoClient) Hooks() []Hook {
	return c.hooks.ChildPhoto
}

// Interceptors returns the client interceptors.
func (c *ChildPhotoClient) Interceptors() []Interceptor {
	return c.inters.ChildPhoto
}

func (c *ChildPhotoClient) mutate(ctx context.Context, m *ChildPhotoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChildPhotoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChildPhotoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChildPhotoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChildPhotoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChildPhoto mutation op: %q", m.Op())
	}
}

// GuardianClient is a client for the Guardian schema.
type GuardianClient struct {
	config
}

// NewGuardianClient returns a client for the Guardian from the given config.
func NewGuardianClient(c config) *GuardianClient {
	return &GuardianClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guardian.Hooks(f(g(h())))`.
func (c *GuardianClient) Use(hooks ...Hook) {
	c.hooks.Guardian = append(c.hooks.Guardian, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `guardian.Intercept(f(g(h())))`.
func (c *GuardianClient) Intercept(interceptors ...Interceptor) {
	c.inters.Guardian = append(c.inters.Guardian, interceptors...)
}

// Create returns a builder for creating a Guardian entity.
func (c *GuardianClient) Create() *GuardianCreate {
	mutation := newGuardianMutation(c.config, OpCreate)
	return &GuardianCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Guardian entities.
func (c *GuardianClient) CreateBulk(builders ...*GuardianCreate) *GuardianCreateBulk {
	return &GuardianCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GuardianClient) MapCreateBulk(slice any, setFunc func(*GuardianCreate, int)) *GuardianCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GuardianCreateBulk{err: fmt.Errorf("calling to GuardianClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GuardianCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GuardianCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Guardian.
func (c *GuardianClient) Update() *GuardianUpdate {
	mutation := newGuardianMutation(c.config, OpUpdate)
	return &GuardianUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuardianClient) UpdateOne(gu *Guardian) *GuardianUpdateOne {
	mutation := newGuardianMutation(c.config, OpUpdateOne, withGuardian(gu))
	return &GuardianUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuardianClient) UpdateOneID(id uuid.UUID) *GuardianUpdateOne {
	mutation := newGuardianMutation(c.config, OpUpdateOne, withGuardianID(id))
	return &GuardianUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Guardian.
func (c *GuardianClient) Delete() *GuardianDelete {
	mutation := newGuardianMutation(c.config, OpDelete)
	return &GuardianDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GuardianClient) DeleteOne(gu *Guardian) *GuardianDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GuardianClient) DeleteOneID(id uuid.UUID) *GuardianDeleteOne {
	builder := c.Delete().Where(guardian.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuardianDeleteOne{builder}
}

// Query returns a query builder for Guardian.
func (c *GuardianClient) Query() *GuardianQuery {
	return &GuardianQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGuardian},
		inters: c.Interceptors(),
	}
}

// Get returns a Guardian entity by its id.
func (c *GuardianClient) Get(ctx context.Context, id uuid.UUID) (*Guardian, error) {
	return c.Query().Where(guardian.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuardianClient) GetX(ctx context.Context, id uuid.UUID) *Guardian {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChildren queries the children edge of a Guardian.
func (c *GuardianClient) QueryChildren(gu *Guardian) *ChildQuery {
	query := (&ChildClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guardian.Table, guardian.FieldID, id),
			sqlgraph.To(child.Table, child.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, guardian.ChildrenTable, guardian.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNursery queries the nursery edge of a Guardian.
func (c *GuardianClient) QueryNursery(gu *Guardian) *NurseryQuery {
	query := (&NurseryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guardian.Table, guardian.FieldID, id),
			sqlgraph.To(nursery.Table, nursery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, guardian.NurseryTable, guardian.NurseryColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Guardian.
func (c *GuardianClient) QueryStation(gu *Guardian) *StationQuery {
	query := (&StationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guardian.Table, guardian.FieldID, id),
			sqlgraph.To(station.Table, station.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, guardian.StationTable, guardian.StationColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuardianClient) Hooks() []Hook {
	return c.hooks.Guardian
}

// Interceptors returns the client interceptors.
func (c *GuardianClient) Interceptors() []Interceptor {
	return c.inters.Guardian
}

func (c *GuardianClient) mutate(ctx context.Context, m *GuardianMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GuardianCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GuardianUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GuardianUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GuardianDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Guardian mutation op: %q", m.Op())
	}
}

// NurseryClient is a client for the Nursery schema.
type NurseryClient struct {
	config
}

// NewNurseryClient returns a client for the Nursery from the given config.
func NewNurseryClient(c config) *NurseryClient {
	return &NurseryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nursery.Hooks(f(g(h())))`.
func (c *NurseryClient) Use(hooks ...Hook) {
	c.hooks.Nursery = append(c.hooks.Nursery, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `nursery.Intercept(f(g(h())))`.
func (c *NurseryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Nursery = append(c.inters.Nursery, interceptors...)
}

// Create returns a builder for creating a Nursery entity.
func (c *NurseryClient) Create() *NurseryCreate {
	mutation := newNurseryMutation(c.config, OpCreate)
	return &NurseryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Nursery entities.
func (c *NurseryClient) CreateBulk(builders ...*NurseryCreate) *NurseryCreateBulk {
	return &NurseryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NurseryClient) MapCreateBulk(slice any, setFunc func(*NurseryCreate, int)) *NurseryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NurseryCreateBulk{err: fmt.Errorf("calling to NurseryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NurseryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NurseryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Nursery.
func (c *NurseryClient) Update() *NurseryUpdate {
	mutation := newNurseryMutation(c.config, OpUpdate)
	return &NurseryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NurseryClient) UpdateOne(n *Nursery) *NurseryUpdateOne {
	mutation := newNurseryMutation(c.config, OpUpdateOne, withNursery(n))
	return &NurseryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NurseryClient) UpdateOneID(id uuid.UUID) *NurseryUpdateOne {
	mutation := newNurseryMutation(c.config, OpUpdateOne, withNurseryID(id))
	return &NurseryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nursery.
func (c *NurseryClient) Delete() *NurseryDelete {
	mutation := newNurseryMutation(c.config, OpDelete)
	return &NurseryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NurseryClient) DeleteOne(n *Nursery) *NurseryDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NurseryClient) DeleteOneID(id uuid.UUID) *NurseryDeleteOne {
	builder := c.Delete().Where(nursery.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NurseryDeleteOne{builder}
}

// Query returns a query builder for Nursery.
func (c *NurseryClient) Query() *NurseryQuery {
	return &NurseryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNursery},
		inters: c.Interceptors(),
	}
}

// Get returns a Nursery entity by its id.
func (c *NurseryClient) Get(ctx context.Context, id uuid.UUID) (*Nursery, error) {
	return c.Query().Where(nursery.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NurseryClient) GetX(ctx context.Context, id uuid.UUID) *Nursery {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuardians queries the guardians edge of a Nursery.
func (c *NurseryClient) QueryGuardians(n *Nursery) *GuardianQuery {
	query := (&GuardianClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nursery.Table, nursery.FieldID, id),
			sqlgraph.To(guardian.Table, guardian.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, nursery.GuardiansTable, nursery.GuardiansColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBuses queries the buses edge of a Nursery.
func (c *NurseryClient) QueryBuses(n *Nursery) *BusQuery {
	query := (&BusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nursery.Table, nursery.FieldID, id),
			sqlgraph.To(bus.Table, bus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, nursery.BusesTable, nursery.BusesColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NurseryClient) Hooks() []Hook {
	return c.hooks.Nursery
}

// Interceptors returns the client interceptors.
func (c *NurseryClient) Interceptors() []Interceptor {
	return c.inters.Nursery
}

func (c *NurseryClient) mutate(ctx context.Context, m *NurseryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NurseryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NurseryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NurseryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NurseryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Nursery mutation op: %q", m.Op())
	}
}

// StationClient is a client for the Station schema.
type StationClient struct {
	config
}

// NewStationClient returns a client for the Station from the given config.
func NewStationClient(c config) *StationClient {
	return &StationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `station.Hooks(f(g(h())))`.
func (c *StationClient) Use(hooks ...Hook) {
	c.hooks.Station = append(c.hooks.Station, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `station.Intercept(f(g(h())))`.
func (c *StationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Station = append(c.inters.Station, interceptors...)
}

// Create returns a builder for creating a Station entity.
func (c *StationClient) Create() *StationCreate {
	mutation := newStationMutation(c.config, OpCreate)
	return &StationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Station entities.
func (c *StationClient) CreateBulk(builders ...*StationCreate) *StationCreateBulk {
	return &StationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StationClient) MapCreateBulk(slice any, setFunc func(*StationCreate, int)) *StationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StationCreateBulk{err: fmt.Errorf("calling to StationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Station.
func (c *StationClient) Update() *StationUpdate {
	mutation := newStationMutation(c.config, OpUpdate)
	return &StationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StationClient) UpdateOne(s *Station) *StationUpdateOne {
	mutation := newStationMutation(c.config, OpUpdateOne, withStation(s))
	return &StationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StationClient) UpdateOneID(id uuid.UUID) *StationUpdateOne {
	mutation := newStationMutation(c.config, OpUpdateOne, withStationID(id))
	return &StationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Station.
func (c *StationClient) Delete() *StationDelete {
	mutation := newStationMutation(c.config, OpDelete)
	return &StationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StationClient) DeleteOne(s *Station) *StationDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StationClient) DeleteOneID(id uuid.UUID) *StationDeleteOne {
	builder := c.Delete().Where(station.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StationDeleteOne{builder}
}

// Query returns a query builder for Station.
func (c *StationClient) Query() *StationQuery {
	return &StationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStation},
		inters: c.Interceptors(),
	}
}

// Get returns a Station entity by its id.
func (c *StationClient) Get(ctx context.Context, id uuid.UUID) (*Station, error) {
	return c.Query().Where(station.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StationClient) GetX(ctx context.Context, id uuid.UUID) *Station {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuardian queries the guardian edge of a Station.
func (c *StationClient) QueryGuardian(s *Station) *GuardianQuery {
	query := (&GuardianClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, id),
			sqlgraph.To(guardian.Table, guardian.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, station.GuardianTable, station.GuardianColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNextForBuses queries the next_for_buses edge of a Station.
func (c *StationClient) QueryNextForBuses(s *Station) *BusQuery {
	query := (&BusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, id),
			sqlgraph.To(bus.Table, bus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, station.NextForBusesTable, station.NextForBusesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusRouteAssociations queries the busRouteAssociations edge of a Station.
func (c *StationClient) QueryBusRouteAssociations(s *Station) *BusRouteAssociationQuery {
	query := (&BusRouteAssociationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, id),
			sqlgraph.To(busrouteassociation.Table, busrouteassociation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, station.BusRouteAssociationsTable, station.BusRouteAssociationsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StationClient) Hooks() []Hook {
	return c.hooks.Station
}

// Interceptors returns the client interceptors.
func (c *StationClient) Interceptors() []Interceptor {
	return c.inters.Station
}

func (c *StationClient) mutate(ctx context.Context, m *StationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Station mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		BoardingRecord, Bus, BusRoute, BusRouteAssociation, Child, ChildBusAssociation,
		ChildPhoto, Guardian, Nursery, Station []ent.Hook
	}
	inters struct {
		BoardingRecord, Bus, BusRoute, BusRouteAssociation, Child, ChildBusAssociation,
		ChildPhoto, Guardian, Nursery, Station []ent.Interceptor
	}
)
