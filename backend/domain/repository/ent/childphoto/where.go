// Code generated by ent, DO NOT EDIT.

package childphoto

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldLTE(FieldID, id))
}

// S3Bucket applies equality check predicate on the "s3_bucket" field. It's identical to S3BucketEQ.
func S3Bucket(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEQ(FieldS3Bucket, v))
}

// S3Key applies equality check predicate on the "s3_key" field. It's identical to S3KeyEQ.
func S3Key(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEQ(FieldS3Key, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEQ(FieldUpdatedAt, v))
}

// S3BucketEQ applies the EQ predicate on the "s3_bucket" field.
func S3BucketEQ(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEQ(FieldS3Bucket, v))
}

// S3BucketNEQ applies the NEQ predicate on the "s3_bucket" field.
func S3BucketNEQ(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldNEQ(FieldS3Bucket, v))
}

// S3BucketIn applies the In predicate on the "s3_bucket" field.
func S3BucketIn(vs ...string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldIn(FieldS3Bucket, vs...))
}

// S3BucketNotIn applies the NotIn predicate on the "s3_bucket" field.
func S3BucketNotIn(vs ...string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldNotIn(FieldS3Bucket, vs...))
}

// S3BucketGT applies the GT predicate on the "s3_bucket" field.
func S3BucketGT(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldGT(FieldS3Bucket, v))
}

// S3BucketGTE applies the GTE predicate on the "s3_bucket" field.
func S3BucketGTE(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldGTE(FieldS3Bucket, v))
}

// S3BucketLT applies the LT predicate on the "s3_bucket" field.
func S3BucketLT(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldLT(FieldS3Bucket, v))
}

// S3BucketLTE applies the LTE predicate on the "s3_bucket" field.
func S3BucketLTE(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldLTE(FieldS3Bucket, v))
}

// S3BucketContains applies the Contains predicate on the "s3_bucket" field.
func S3BucketContains(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldContains(FieldS3Bucket, v))
}

// S3BucketHasPrefix applies the HasPrefix predicate on the "s3_bucket" field.
func S3BucketHasPrefix(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldHasPrefix(FieldS3Bucket, v))
}

// S3BucketHasSuffix applies the HasSuffix predicate on the "s3_bucket" field.
func S3BucketHasSuffix(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldHasSuffix(FieldS3Bucket, v))
}

// S3BucketEqualFold applies the EqualFold predicate on the "s3_bucket" field.
func S3BucketEqualFold(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEqualFold(FieldS3Bucket, v))
}

// S3BucketContainsFold applies the ContainsFold predicate on the "s3_bucket" field.
func S3BucketContainsFold(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldContainsFold(FieldS3Bucket, v))
}

// S3KeyEQ applies the EQ predicate on the "s3_key" field.
func S3KeyEQ(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEQ(FieldS3Key, v))
}

// S3KeyNEQ applies the NEQ predicate on the "s3_key" field.
func S3KeyNEQ(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldNEQ(FieldS3Key, v))
}

// S3KeyIn applies the In predicate on the "s3_key" field.
func S3KeyIn(vs ...string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldIn(FieldS3Key, vs...))
}

// S3KeyNotIn applies the NotIn predicate on the "s3_key" field.
func S3KeyNotIn(vs ...string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldNotIn(FieldS3Key, vs...))
}

// S3KeyGT applies the GT predicate on the "s3_key" field.
func S3KeyGT(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldGT(FieldS3Key, v))
}

// S3KeyGTE applies the GTE predicate on the "s3_key" field.
func S3KeyGTE(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldGTE(FieldS3Key, v))
}

// S3KeyLT applies the LT predicate on the "s3_key" field.
func S3KeyLT(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldLT(FieldS3Key, v))
}

// S3KeyLTE applies the LTE predicate on the "s3_key" field.
func S3KeyLTE(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldLTE(FieldS3Key, v))
}

// S3KeyContains applies the Contains predicate on the "s3_key" field.
func S3KeyContains(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldContains(FieldS3Key, v))
}

// S3KeyHasPrefix applies the HasPrefix predicate on the "s3_key" field.
func S3KeyHasPrefix(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldHasPrefix(FieldS3Key, v))
}

// S3KeyHasSuffix applies the HasSuffix predicate on the "s3_key" field.
func S3KeyHasSuffix(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldHasSuffix(FieldS3Key, v))
}

// S3KeyEqualFold applies the EqualFold predicate on the "s3_key" field.
func S3KeyEqualFold(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEqualFold(FieldS3Key, v))
}

// S3KeyContainsFold applies the ContainsFold predicate on the "s3_key" field.
func S3KeyContainsFold(v string) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldContainsFold(FieldS3Key, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasChild applies the HasEdge predicate on the "child" edge.
func HasChild() predicate.ChildPhoto {
	return predicate.ChildPhoto(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChildTable, ChildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildWith applies the HasEdge predicate on the "child" edge with a given conditions (other predicates).
func HasChildWith(preds ...predicate.Child) predicate.ChildPhoto {
	return predicate.ChildPhoto(func(s *sql.Selector) {
		step := newChildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChildPhoto) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChildPhoto) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChildPhoto) predicate.ChildPhoto {
	return predicate.ChildPhoto(sql.NotPredicates(p))
}
