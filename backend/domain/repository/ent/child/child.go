// Code generated by ent, DO NOT EDIT.

package child

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the child type in the database.
	Label = "child"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldIsRideMorningBus holds the string denoting the is_ride_morning_bus field in the database.
	FieldIsRideMorningBus = "is_ride_morning_bus"
	// FieldIsRideEveningBus holds the string denoting the is_ride_evening_bus field in the database.
	FieldIsRideEveningBus = "is_ride_evening_bus"
	// FieldCheckForMissingItems holds the string denoting the check_for_missing_items field in the database.
	FieldCheckForMissingItems = "check_for_missing_items"
	// FieldHasBag holds the string denoting the has_bag field in the database.
	FieldHasBag = "has_bag"
	// FieldHasLunchBox holds the string denoting the has_lunch_box field in the database.
	FieldHasLunchBox = "has_lunch_box"
	// FieldHasWaterBottle holds the string denoting the has_water_bottle field in the database.
	FieldHasWaterBottle = "has_water_bottle"
	// FieldHasUmbrella holds the string denoting the has_umbrella field in the database.
	FieldHasUmbrella = "has_umbrella"
	// FieldHasOther holds the string denoting the has_other field in the database.
	FieldHasOther = "has_other"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeGuardian holds the string denoting the guardian edge name in mutations.
	EdgeGuardian = "guardian"
	// EdgeChildBusAssociations holds the string denoting the childbusassociations edge name in mutations.
	EdgeChildBusAssociations = "childBusAssociations"
	// EdgeNursery holds the string denoting the nursery edge name in mutations.
	EdgeNursery = "nursery"
	// EdgeBoardingRecord holds the string denoting the boarding_record edge name in mutations.
	EdgeBoardingRecord = "boarding_record"
	// EdgePhotos holds the string denoting the photos edge name in mutations.
	EdgePhotos = "photos"
	// Table holds the table name of the child in the database.
	Table = "childs"
	// GuardianTable is the table that holds the guardian relation/edge.
	GuardianTable = "childs"
	// GuardianInverseTable is the table name for the Guardian entity.
	// It exists in this package in order to avoid circular dependency with the "guardian" package.
	GuardianInverseTable = "guardians"
	// GuardianColumn is the table column denoting the guardian relation/edge.
	GuardianColumn = "guardian_children"
	// ChildBusAssociationsTable is the table that holds the childBusAssociations relation/edge.
	ChildBusAssociationsTable = "child_bus_associations"
	// ChildBusAssociationsInverseTable is the table name for the ChildBusAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "childbusassociation" package.
	ChildBusAssociationsInverseTable = "child_bus_associations"
	// ChildBusAssociationsColumn is the table column denoting the childBusAssociations relation/edge.
	ChildBusAssociationsColumn = "child_id"
	// NurseryTable is the table that holds the nursery relation/edge.
	NurseryTable = "childs"
	// NurseryInverseTable is the table name for the Nursery entity.
	// It exists in this package in order to avoid circular dependency with the "nursery" package.
	NurseryInverseTable = "nurseries"
	// NurseryColumn is the table column denoting the nursery relation/edge.
	NurseryColumn = "child_nursery"
	// BoardingRecordTable is the table that holds the boarding_record relation/edge.
	BoardingRecordTable = "boarding_records"
	// BoardingRecordInverseTable is the table name for the BoardingRecord entity.
	// It exists in this package in order to avoid circular dependency with the "boardingrecord" package.
	BoardingRecordInverseTable = "boarding_records"
	// BoardingRecordColumn is the table column denoting the boarding_record relation/edge.
	BoardingRecordColumn = "child_boarding_record"
	// PhotosTable is the table that holds the photos relation/edge.
	PhotosTable = "child_photos"
	// PhotosInverseTable is the table name for the ChildPhoto entity.
	// It exists in this package in order to avoid circular dependency with the "childphoto" package.
	PhotosInverseTable = "child_photos"
	// PhotosColumn is the table column denoting the photos relation/edge.
	PhotosColumn = "child_photos"
)

// Columns holds all SQL columns for child fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAge,
	FieldSex,
	FieldIsRideMorningBus,
	FieldIsRideEveningBus,
	FieldCheckForMissingItems,
	FieldHasBag,
	FieldHasLunchBox,
	FieldHasWaterBottle,
	FieldHasUmbrella,
	FieldHasOther,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "childs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"child_nursery",
	"guardian_children",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsRideMorningBus holds the default value on creation for the "is_ride_morning_bus" field.
	DefaultIsRideMorningBus bool
	// DefaultIsRideEveningBus holds the default value on creation for the "is_ride_evening_bus" field.
	DefaultIsRideEveningBus bool
	// DefaultCheckForMissingItems holds the default value on creation for the "check_for_missing_items" field.
	DefaultCheckForMissingItems bool
	// DefaultHasBag holds the default value on creation for the "has_bag" field.
	DefaultHasBag bool
	// DefaultHasLunchBox holds the default value on creation for the "has_lunch_box" field.
	DefaultHasLunchBox bool
	// DefaultHasWaterBottle holds the default value on creation for the "has_water_bottle" field.
	DefaultHasWaterBottle bool
	// DefaultHasUmbrella holds the default value on creation for the "has_umbrella" field.
	DefaultHasUmbrella bool
	// DefaultHasOther holds the default value on creation for the "has_other" field.
	DefaultHasOther bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Sex defines the type for the "sex" enum field.
type Sex string

// Sex values.
const (
	SexMan   Sex = "man"
	SexWoman Sex = "woman"
	SexOther Sex = "other"
)

func (s Sex) String() string {
	return string(s)
}

// SexValidator is a validator for the "sex" field enum values. It is called by the builders before save.
func SexValidator(s Sex) error {
	switch s {
	case SexMan, SexWoman, SexOther:
		return nil
	default:
		return fmt.Errorf("child: invalid enum value for sex field: %q", s)
	}
}

// OrderOption defines the ordering options for the Child queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// BySex orders the results by the sex field.
func BySex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSex, opts...).ToFunc()
}

// ByIsRideMorningBus orders the results by the is_ride_morning_bus field.
func ByIsRideMorningBus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRideMorningBus, opts...).ToFunc()
}

// ByIsRideEveningBus orders the results by the is_ride_evening_bus field.
func ByIsRideEveningBus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRideEveningBus, opts...).ToFunc()
}

// ByCheckForMissingItems orders the results by the check_for_missing_items field.
func ByCheckForMissingItems(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCheckForMissingItems, opts...).ToFunc()
}

// ByHasBag orders the results by the has_bag field.
func ByHasBag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasBag, opts...).ToFunc()
}

// ByHasLunchBox orders the results by the has_lunch_box field.
func ByHasLunchBox(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasLunchBox, opts...).ToFunc()
}

// ByHasWaterBottle orders the results by the has_water_bottle field.
func ByHasWaterBottle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasWaterBottle, opts...).ToFunc()
}

// ByHasUmbrella orders the results by the has_umbrella field.
func ByHasUmbrella(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasUmbrella, opts...).ToFunc()
}

// ByHasOther orders the results by the has_other field.
func ByHasOther(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasOther, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByGuardianField orders the results by guardian field.
func ByGuardianField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuardianStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildBusAssociationsCount orders the results by childBusAssociations count.
func ByChildBusAssociationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildBusAssociationsStep(), opts...)
	}
}

// ByChildBusAssociations orders the results by childBusAssociations terms.
func ByChildBusAssociations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildBusAssociationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNurseryField orders the results by nursery field.
func ByNurseryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNurseryStep(), sql.OrderByField(field, opts...))
	}
}

// ByBoardingRecordCount orders the results by boarding_record count.
func ByBoardingRecordCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBoardingRecordStep(), opts...)
	}
}

// ByBoardingRecord orders the results by boarding_record terms.
func ByBoardingRecord(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardingRecordStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPhotosCount orders the results by photos count.
func ByPhotosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPhotosStep(), opts...)
	}
}

// ByPhotos orders the results by photos terms.
func ByPhotos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPhotosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGuardianStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuardianInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GuardianTable, GuardianColumn),
	)
}
func newChildBusAssociationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChildBusAssociationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildBusAssociationsTable, ChildBusAssociationsColumn),
	)
}
func newNurseryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NurseryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NurseryTable, NurseryColumn),
	)
}
func newBoardingRecordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoardingRecordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BoardingRecordTable, BoardingRecordColumn),
	)
}
func newPhotosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PhotosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PhotosTable, PhotosColumn),
	)
}
