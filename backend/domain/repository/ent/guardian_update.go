// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/child"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/guardian"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/nursery"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/station"
	"github.com/google/uuid"
)

// GuardianUpdate is the builder for updating Guardian entities.
type GuardianUpdate struct {
	config
	hooks    []Hook
	mutation *GuardianMutation
}

// Where appends a list predicates to the GuardianUpdate builder.
func (gu *GuardianUpdate) Where(ps ...predicate.Guardian) *GuardianUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetEmail sets the "email" field.
func (gu *GuardianUpdate) SetEmail(s string) *GuardianUpdate {
	gu.mutation.SetEmail(s)
	return gu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (gu *GuardianUpdate) SetNillableEmail(s *string) *GuardianUpdate {
	if s != nil {
		gu.SetEmail(*s)
	}
	return gu
}

// SetEncryptedPassword sets the "encrypted_password" field.
func (gu *GuardianUpdate) SetEncryptedPassword(s string) *GuardianUpdate {
	gu.mutation.SetEncryptedPassword(s)
	return gu
}

// SetNillableEncryptedPassword sets the "encrypted_password" field if the given value is not nil.
func (gu *GuardianUpdate) SetNillableEncryptedPassword(s *string) *GuardianUpdate {
	if s != nil {
		gu.SetEncryptedPassword(*s)
	}
	return gu
}

// SetName sets the "name" field.
func (gu *GuardianUpdate) SetName(s string) *GuardianUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GuardianUpdate) SetNillableName(s *string) *GuardianUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetPhone sets the "phone" field.
func (gu *GuardianUpdate) SetPhone(s string) *GuardianUpdate {
	gu.mutation.SetPhone(s)
	return gu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (gu *GuardianUpdate) SetNillablePhone(s *string) *GuardianUpdate {
	if s != nil {
		gu.SetPhone(*s)
	}
	return gu
}

// ClearPhone clears the value of the "phone" field.
func (gu *GuardianUpdate) ClearPhone() *GuardianUpdate {
	gu.mutation.ClearPhone()
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GuardianUpdate) SetCreatedAt(t time.Time) *GuardianUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gu *GuardianUpdate) SetNillableCreatedAt(t *time.Time) *GuardianUpdate {
	if t != nil {
		gu.SetCreatedAt(*t)
	}
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GuardianUpdate) SetUpdatedAt(t time.Time) *GuardianUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// AddChildIDs adds the "children" edge to the Child entity by IDs.
func (gu *GuardianUpdate) AddChildIDs(ids ...uuid.UUID) *GuardianUpdate {
	gu.mutation.AddChildIDs(ids...)
	return gu
}

// AddChildren adds the "children" edges to the Child entity.
func (gu *GuardianUpdate) AddChildren(c ...*Child) *GuardianUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.AddChildIDs(ids...)
}

// SetNurseryID sets the "nursery" edge to the Nursery entity by ID.
func (gu *GuardianUpdate) SetNurseryID(id uuid.UUID) *GuardianUpdate {
	gu.mutation.SetNurseryID(id)
	return gu
}

// SetNillableNurseryID sets the "nursery" edge to the Nursery entity by ID if the given value is not nil.
func (gu *GuardianUpdate) SetNillableNurseryID(id *uuid.UUID) *GuardianUpdate {
	if id != nil {
		gu = gu.SetNurseryID(*id)
	}
	return gu
}

// SetNursery sets the "nursery" edge to the Nursery entity.
func (gu *GuardianUpdate) SetNursery(n *Nursery) *GuardianUpdate {
	return gu.SetNurseryID(n.ID)
}

// SetStationID sets the "station" edge to the Station entity by ID.
func (gu *GuardianUpdate) SetStationID(id uuid.UUID) *GuardianUpdate {
	gu.mutation.SetStationID(id)
	return gu
}

// SetNillableStationID sets the "station" edge to the Station entity by ID if the given value is not nil.
func (gu *GuardianUpdate) SetNillableStationID(id *uuid.UUID) *GuardianUpdate {
	if id != nil {
		gu = gu.SetStationID(*id)
	}
	return gu
}

// SetStation sets the "station" edge to the Station entity.
func (gu *GuardianUpdate) SetStation(s *Station) *GuardianUpdate {
	return gu.SetStationID(s.ID)
}

// Mutation returns the GuardianMutation object of the builder.
func (gu *GuardianUpdate) Mutation() *GuardianMutation {
	return gu.mutation
}

// ClearChildren clears all "children" edges to the Child entity.
func (gu *GuardianUpdate) ClearChildren() *GuardianUpdate {
	gu.mutation.ClearChildren()
	return gu
}

// RemoveChildIDs removes the "children" edge to Child entities by IDs.
func (gu *GuardianUpdate) RemoveChildIDs(ids ...uuid.UUID) *GuardianUpdate {
	gu.mutation.RemoveChildIDs(ids...)
	return gu
}

// RemoveChildren removes "children" edges to Child entities.
func (gu *GuardianUpdate) RemoveChildren(c ...*Child) *GuardianUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.RemoveChildIDs(ids...)
}

// ClearNursery clears the "nursery" edge to the Nursery entity.
func (gu *GuardianUpdate) ClearNursery() *GuardianUpdate {
	gu.mutation.ClearNursery()
	return gu
}

// ClearStation clears the "station" edge to the Station entity.
func (gu *GuardianUpdate) ClearStation() *GuardianUpdate {
	gu.mutation.ClearStation()
	return gu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GuardianUpdate) Save(ctx context.Context) (int, error) {
	gu.defaults()
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GuardianUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GuardianUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GuardianUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GuardianUpdate) defaults() {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		v := guardian.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
}

func (gu *GuardianUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(guardian.Table, guardian.Columns, sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Email(); ok {
		_spec.SetField(guardian.FieldEmail, field.TypeString, value)
	}
	if value, ok := gu.mutation.EncryptedPassword(); ok {
		_spec.SetField(guardian.FieldEncryptedPassword, field.TypeString, value)
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(guardian.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.Phone(); ok {
		_spec.SetField(guardian.FieldPhone, field.TypeString, value)
	}
	if gu.mutation.PhoneCleared() {
		_spec.ClearField(guardian.FieldPhone, field.TypeString)
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.SetField(guardian.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(guardian.FieldUpdatedAt, field.TypeTime, value)
	}
	if gu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guardian.ChildrenTable,
			Columns: []string{guardian.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !gu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guardian.ChildrenTable,
			Columns: []string{guardian.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guardian.ChildrenTable,
			Columns: []string{guardian.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.NurseryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   guardian.NurseryTable,
			Columns: []string{guardian.NurseryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nursery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.NurseryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   guardian.NurseryTable,
			Columns: []string{guardian.NurseryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nursery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guardian.StationTable,
			Columns: []string{guardian.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guardian.StationTable,
			Columns: []string{guardian.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guardian.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GuardianUpdateOne is the builder for updating a single Guardian entity.
type GuardianUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuardianMutation
}

// SetEmail sets the "email" field.
func (guo *GuardianUpdateOne) SetEmail(s string) *GuardianUpdateOne {
	guo.mutation.SetEmail(s)
	return guo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (guo *GuardianUpdateOne) SetNillableEmail(s *string) *GuardianUpdateOne {
	if s != nil {
		guo.SetEmail(*s)
	}
	return guo
}

// SetEncryptedPassword sets the "encrypted_password" field.
func (guo *GuardianUpdateOne) SetEncryptedPassword(s string) *GuardianUpdateOne {
	guo.mutation.SetEncryptedPassword(s)
	return guo
}

// SetNillableEncryptedPassword sets the "encrypted_password" field if the given value is not nil.
func (guo *GuardianUpdateOne) SetNillableEncryptedPassword(s *string) *GuardianUpdateOne {
	if s != nil {
		guo.SetEncryptedPassword(*s)
	}
	return guo
}

// SetName sets the "name" field.
func (guo *GuardianUpdateOne) SetName(s string) *GuardianUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GuardianUpdateOne) SetNillableName(s *string) *GuardianUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetPhone sets the "phone" field.
func (guo *GuardianUpdateOne) SetPhone(s string) *GuardianUpdateOne {
	guo.mutation.SetPhone(s)
	return guo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (guo *GuardianUpdateOne) SetNillablePhone(s *string) *GuardianUpdateOne {
	if s != nil {
		guo.SetPhone(*s)
	}
	return guo
}

// ClearPhone clears the value of the "phone" field.
func (guo *GuardianUpdateOne) ClearPhone() *GuardianUpdateOne {
	guo.mutation.ClearPhone()
	return guo
}

// SetCreatedAt sets the "created_at" field.
func (guo *GuardianUpdateOne) SetCreatedAt(t time.Time) *GuardianUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guo *GuardianUpdateOne) SetNillableCreatedAt(t *time.Time) *GuardianUpdateOne {
	if t != nil {
		guo.SetCreatedAt(*t)
	}
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GuardianUpdateOne) SetUpdatedAt(t time.Time) *GuardianUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// AddChildIDs adds the "children" edge to the Child entity by IDs.
func (guo *GuardianUpdateOne) AddChildIDs(ids ...uuid.UUID) *GuardianUpdateOne {
	guo.mutation.AddChildIDs(ids...)
	return guo
}

// AddChildren adds the "children" edges to the Child entity.
func (guo *GuardianUpdateOne) AddChildren(c ...*Child) *GuardianUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.AddChildIDs(ids...)
}

// SetNurseryID sets the "nursery" edge to the Nursery entity by ID.
func (guo *GuardianUpdateOne) SetNurseryID(id uuid.UUID) *GuardianUpdateOne {
	guo.mutation.SetNurseryID(id)
	return guo
}

// SetNillableNurseryID sets the "nursery" edge to the Nursery entity by ID if the given value is not nil.
func (guo *GuardianUpdateOne) SetNillableNurseryID(id *uuid.UUID) *GuardianUpdateOne {
	if id != nil {
		guo = guo.SetNurseryID(*id)
	}
	return guo
}

// SetNursery sets the "nursery" edge to the Nursery entity.
func (guo *GuardianUpdateOne) SetNursery(n *Nursery) *GuardianUpdateOne {
	return guo.SetNurseryID(n.ID)
}

// SetStationID sets the "station" edge to the Station entity by ID.
func (guo *GuardianUpdateOne) SetStationID(id uuid.UUID) *GuardianUpdateOne {
	guo.mutation.SetStationID(id)
	return guo
}

// SetNillableStationID sets the "station" edge to the Station entity by ID if the given value is not nil.
func (guo *GuardianUpdateOne) SetNillableStationID(id *uuid.UUID) *GuardianUpdateOne {
	if id != nil {
		guo = guo.SetStationID(*id)
	}
	return guo
}

// SetStation sets the "station" edge to the Station entity.
func (guo *GuardianUpdateOne) SetStation(s *Station) *GuardianUpdateOne {
	return guo.SetStationID(s.ID)
}

// Mutation returns the GuardianMutation object of the builder.
func (guo *GuardianUpdateOne) Mutation() *GuardianMutation {
	return guo.mutation
}

// ClearChildren clears all "children" edges to the Child entity.
func (guo *GuardianUpdateOne) ClearChildren() *GuardianUpdateOne {
	guo.mutation.ClearChildren()
	return guo
}

// RemoveChildIDs removes the "children" edge to Child entities by IDs.
func (guo *GuardianUpdateOne) RemoveChildIDs(ids ...uuid.UUID) *GuardianUpdateOne {
	guo.mutation.RemoveChildIDs(ids...)
	return guo
}

// RemoveChildren removes "children" edges to Child entities.
func (guo *GuardianUpdateOne) RemoveChildren(c ...*Child) *GuardianUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.RemoveChildIDs(ids...)
}

// ClearNursery clears the "nursery" edge to the Nursery entity.
func (guo *GuardianUpdateOne) ClearNursery() *GuardianUpdateOne {
	guo.mutation.ClearNursery()
	return guo
}

// ClearStation clears the "station" edge to the Station entity.
func (guo *GuardianUpdateOne) ClearStation() *GuardianUpdateOne {
	guo.mutation.ClearStation()
	return guo
}

// Where appends a list predicates to the GuardianUpdate builder.
func (guo *GuardianUpdateOne) Where(ps ...predicate.Guardian) *GuardianUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GuardianUpdateOne) Select(field string, fields ...string) *GuardianUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Guardian entity.
func (guo *GuardianUpdateOne) Save(ctx context.Context) (*Guardian, error) {
	guo.defaults()
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GuardianUpdateOne) SaveX(ctx context.Context) *Guardian {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GuardianUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GuardianUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GuardianUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		v := guardian.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
}

func (guo *GuardianUpdateOne) sqlSave(ctx context.Context) (_node *Guardian, err error) {
	_spec := sqlgraph.NewUpdateSpec(guardian.Table, guardian.Columns, sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Guardian.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guardian.FieldID)
		for _, f := range fields {
			if !guardian.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guardian.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Email(); ok {
		_spec.SetField(guardian.FieldEmail, field.TypeString, value)
	}
	if value, ok := guo.mutation.EncryptedPassword(); ok {
		_spec.SetField(guardian.FieldEncryptedPassword, field.TypeString, value)
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(guardian.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.Phone(); ok {
		_spec.SetField(guardian.FieldPhone, field.TypeString, value)
	}
	if guo.mutation.PhoneCleared() {
		_spec.ClearField(guardian.FieldPhone, field.TypeString)
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.SetField(guardian.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(guardian.FieldUpdatedAt, field.TypeTime, value)
	}
	if guo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guardian.ChildrenTable,
			Columns: []string{guardian.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !guo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guardian.ChildrenTable,
			Columns: []string{guardian.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guardian.ChildrenTable,
			Columns: []string{guardian.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.NurseryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   guardian.NurseryTable,
			Columns: []string{guardian.NurseryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nursery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.NurseryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   guardian.NurseryTable,
			Columns: []string{guardian.NurseryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nursery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guardian.StationTable,
			Columns: []string{guardian.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guardian.StationTable,
			Columns: []string{guardian.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Guardian{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guardian.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
