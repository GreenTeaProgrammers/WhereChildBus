// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busroute"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busrouteassociation"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/station"
	"github.com/google/uuid"
)

// BusRouteAssociationCreate is the builder for creating a BusRouteAssociation entity.
type BusRouteAssociationCreate struct {
	config
	mutation *BusRouteAssociationMutation
	hooks    []Hook
}

// SetStationID sets the "station_id" field.
func (brac *BusRouteAssociationCreate) SetStationID(u uuid.UUID) *BusRouteAssociationCreate {
	brac.mutation.SetStationID(u)
	return brac
}

// SetBusRouteID sets the "bus_route_id" field.
func (brac *BusRouteAssociationCreate) SetBusRouteID(u uuid.UUID) *BusRouteAssociationCreate {
	brac.mutation.SetBusRouteID(u)
	return brac
}

// SetOrder sets the "order" field.
func (brac *BusRouteAssociationCreate) SetOrder(i int32) *BusRouteAssociationCreate {
	brac.mutation.SetOrder(i)
	return brac
}

// SetStation sets the "station" edge to the Station entity.
func (brac *BusRouteAssociationCreate) SetStation(s *Station) *BusRouteAssociationCreate {
	return brac.SetStationID(s.ID)
}

// SetBusRoute sets the "busRoute" edge to the BusRoute entity.
func (brac *BusRouteAssociationCreate) SetBusRoute(b *BusRoute) *BusRouteAssociationCreate {
	return brac.SetBusRouteID(b.ID)
}

// Mutation returns the BusRouteAssociationMutation object of the builder.
func (brac *BusRouteAssociationCreate) Mutation() *BusRouteAssociationMutation {
	return brac.mutation
}

// Save creates the BusRouteAssociation in the database.
func (brac *BusRouteAssociationCreate) Save(ctx context.Context) (*BusRouteAssociation, error) {
	return withHooks(ctx, brac.sqlSave, brac.mutation, brac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (brac *BusRouteAssociationCreate) SaveX(ctx context.Context) *BusRouteAssociation {
	v, err := brac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brac *BusRouteAssociationCreate) Exec(ctx context.Context) error {
	_, err := brac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brac *BusRouteAssociationCreate) ExecX(ctx context.Context) {
	if err := brac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (brac *BusRouteAssociationCreate) check() error {
	if _, ok := brac.mutation.StationID(); !ok {
		return &ValidationError{Name: "station_id", err: errors.New(`ent: missing required field "BusRouteAssociation.station_id"`)}
	}
	if _, ok := brac.mutation.BusRouteID(); !ok {
		return &ValidationError{Name: "bus_route_id", err: errors.New(`ent: missing required field "BusRouteAssociation.bus_route_id"`)}
	}
	if _, ok := brac.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "BusRouteAssociation.order"`)}
	}
	if _, ok := brac.mutation.StationID(); !ok {
		return &ValidationError{Name: "station", err: errors.New(`ent: missing required edge "BusRouteAssociation.station"`)}
	}
	if _, ok := brac.mutation.BusRouteID(); !ok {
		return &ValidationError{Name: "busRoute", err: errors.New(`ent: missing required edge "BusRouteAssociation.busRoute"`)}
	}
	return nil
}

func (brac *BusRouteAssociationCreate) sqlSave(ctx context.Context) (*BusRouteAssociation, error) {
	if err := brac.check(); err != nil {
		return nil, err
	}
	_node, _spec := brac.createSpec()
	if err := sqlgraph.CreateNode(ctx, brac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	brac.mutation.id = &_node.ID
	brac.mutation.done = true
	return _node, nil
}

func (brac *BusRouteAssociationCreate) createSpec() (*BusRouteAssociation, *sqlgraph.CreateSpec) {
	var (
		_node = &BusRouteAssociation{config: brac.config}
		_spec = sqlgraph.NewCreateSpec(busrouteassociation.Table, sqlgraph.NewFieldSpec(busrouteassociation.FieldID, field.TypeInt))
	)
	if value, ok := brac.mutation.Order(); ok {
		_spec.SetField(busrouteassociation.FieldOrder, field.TypeInt32, value)
		_node.Order = value
	}
	if nodes := brac.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   busrouteassociation.StationTable,
			Columns: []string{busrouteassociation.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := brac.mutation.BusRouteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   busrouteassociation.BusRouteTable,
			Columns: []string{busrouteassociation.BusRouteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(busroute.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusRouteID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusRouteAssociationCreateBulk is the builder for creating many BusRouteAssociation entities in bulk.
type BusRouteAssociationCreateBulk struct {
	config
	err      error
	builders []*BusRouteAssociationCreate
}

// Save creates the BusRouteAssociation entities in the database.
func (bracb *BusRouteAssociationCreateBulk) Save(ctx context.Context) ([]*BusRouteAssociation, error) {
	if bracb.err != nil {
		return nil, bracb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bracb.builders))
	nodes := make([]*BusRouteAssociation, len(bracb.builders))
	mutators := make([]Mutator, len(bracb.builders))
	for i := range bracb.builders {
		func(i int, root context.Context) {
			builder := bracb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusRouteAssociationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bracb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bracb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bracb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bracb *BusRouteAssociationCreateBulk) SaveX(ctx context.Context) []*BusRouteAssociation {
	v, err := bracb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bracb *BusRouteAssociationCreateBulk) Exec(ctx context.Context) error {
	_, err := bracb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bracb *BusRouteAssociationCreateBulk) ExecX(ctx context.Context) {
	if err := bracb.Exec(ctx); err != nil {
		panic(err)
	}
}
