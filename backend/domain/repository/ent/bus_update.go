// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/boardingrecord"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/bus"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/childbusassociation"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/nursery"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/station"
	"github.com/google/uuid"
)

// BusUpdate is the builder for updating Bus entities.
type BusUpdate struct {
	config
	hooks    []Hook
	mutation *BusMutation
}

// Where appends a list predicates to the BusUpdate builder.
func (bu *BusUpdate) Where(ps ...predicate.Bus) *BusUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BusUpdate) SetName(s string) *BusUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BusUpdate) SetNillableName(s *string) *BusUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetPlateNumber sets the "plate_number" field.
func (bu *BusUpdate) SetPlateNumber(s string) *BusUpdate {
	bu.mutation.SetPlateNumber(s)
	return bu
}

// SetNillablePlateNumber sets the "plate_number" field if the given value is not nil.
func (bu *BusUpdate) SetNillablePlateNumber(s *string) *BusUpdate {
	if s != nil {
		bu.SetPlateNumber(*s)
	}
	return bu
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (bu *BusUpdate) ClearPlateNumber() *BusUpdate {
	bu.mutation.ClearPlateNumber()
	return bu
}

// SetLatitude sets the "latitude" field.
func (bu *BusUpdate) SetLatitude(f float64) *BusUpdate {
	bu.mutation.ResetLatitude()
	bu.mutation.SetLatitude(f)
	return bu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (bu *BusUpdate) SetNillableLatitude(f *float64) *BusUpdate {
	if f != nil {
		bu.SetLatitude(*f)
	}
	return bu
}

// AddLatitude adds f to the "latitude" field.
func (bu *BusUpdate) AddLatitude(f float64) *BusUpdate {
	bu.mutation.AddLatitude(f)
	return bu
}

// ClearLatitude clears the value of the "latitude" field.
func (bu *BusUpdate) ClearLatitude() *BusUpdate {
	bu.mutation.ClearLatitude()
	return bu
}

// SetLongitude sets the "longitude" field.
func (bu *BusUpdate) SetLongitude(f float64) *BusUpdate {
	bu.mutation.ResetLongitude()
	bu.mutation.SetLongitude(f)
	return bu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (bu *BusUpdate) SetNillableLongitude(f *float64) *BusUpdate {
	if f != nil {
		bu.SetLongitude(*f)
	}
	return bu
}

// AddLongitude adds f to the "longitude" field.
func (bu *BusUpdate) AddLongitude(f float64) *BusUpdate {
	bu.mutation.AddLongitude(f)
	return bu
}

// ClearLongitude clears the value of the "longitude" field.
func (bu *BusUpdate) ClearLongitude() *BusUpdate {
	bu.mutation.ClearLongitude()
	return bu
}

// SetStatus sets the "status" field.
func (bu *BusUpdate) SetStatus(b bus.Status) *BusUpdate {
	bu.mutation.SetStatus(b)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BusUpdate) SetNillableStatus(b *bus.Status) *BusUpdate {
	if b != nil {
		bu.SetStatus(*b)
	}
	return bu
}

// SetEnableFaceRecognition sets the "enable_face_recognition" field.
func (bu *BusUpdate) SetEnableFaceRecognition(b bool) *BusUpdate {
	bu.mutation.SetEnableFaceRecognition(b)
	return bu
}

// SetNillableEnableFaceRecognition sets the "enable_face_recognition" field if the given value is not nil.
func (bu *BusUpdate) SetNillableEnableFaceRecognition(b *bool) *BusUpdate {
	if b != nil {
		bu.SetEnableFaceRecognition(*b)
	}
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BusUpdate) SetCreatedAt(t time.Time) *BusUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BusUpdate) SetNillableCreatedAt(t *time.Time) *BusUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BusUpdate) SetUpdatedAt(t time.Time) *BusUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetNurseryID sets the "nursery" edge to the Nursery entity by ID.
func (bu *BusUpdate) SetNurseryID(id uuid.UUID) *BusUpdate {
	bu.mutation.SetNurseryID(id)
	return bu
}

// SetNillableNurseryID sets the "nursery" edge to the Nursery entity by ID if the given value is not nil.
func (bu *BusUpdate) SetNillableNurseryID(id *uuid.UUID) *BusUpdate {
	if id != nil {
		bu = bu.SetNurseryID(*id)
	}
	return bu
}

// SetNursery sets the "nursery" edge to the Nursery entity.
func (bu *BusUpdate) SetNursery(n *Nursery) *BusUpdate {
	return bu.SetNurseryID(n.ID)
}

// AddStationIDs adds the "stations" edge to the Station entity by IDs.
func (bu *BusUpdate) AddStationIDs(ids ...uuid.UUID) *BusUpdate {
	bu.mutation.AddStationIDs(ids...)
	return bu
}

// AddStations adds the "stations" edges to the Station entity.
func (bu *BusUpdate) AddStations(s ...*Station) *BusUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.AddStationIDs(ids...)
}

// AddBoardingRecordIDs adds the "boarding_records" edge to the BoardingRecord entity by IDs.
func (bu *BusUpdate) AddBoardingRecordIDs(ids ...uuid.UUID) *BusUpdate {
	bu.mutation.AddBoardingRecordIDs(ids...)
	return bu
}

// AddBoardingRecords adds the "boarding_records" edges to the BoardingRecord entity.
func (bu *BusUpdate) AddBoardingRecords(b ...*BoardingRecord) *BusUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddBoardingRecordIDs(ids...)
}

// AddChildBusAssociationIDs adds the "childBusAssociations" edge to the ChildBusAssociation entity by IDs.
func (bu *BusUpdate) AddChildBusAssociationIDs(ids ...int) *BusUpdate {
	bu.mutation.AddChildBusAssociationIDs(ids...)
	return bu
}

// AddChildBusAssociations adds the "childBusAssociations" edges to the ChildBusAssociation entity.
func (bu *BusUpdate) AddChildBusAssociations(c ...*ChildBusAssociation) *BusUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddChildBusAssociationIDs(ids...)
}

// SetNextStationID sets the "next_station" edge to the Station entity by ID.
func (bu *BusUpdate) SetNextStationID(id uuid.UUID) *BusUpdate {
	bu.mutation.SetNextStationID(id)
	return bu
}

// SetNillableNextStationID sets the "next_station" edge to the Station entity by ID if the given value is not nil.
func (bu *BusUpdate) SetNillableNextStationID(id *uuid.UUID) *BusUpdate {
	if id != nil {
		bu = bu.SetNextStationID(*id)
	}
	return bu
}

// SetNextStation sets the "next_station" edge to the Station entity.
func (bu *BusUpdate) SetNextStation(s *Station) *BusUpdate {
	return bu.SetNextStationID(s.ID)
}

// SetMorningFirstStationID sets the "morning_first_station" edge to the Station entity by ID.
func (bu *BusUpdate) SetMorningFirstStationID(id uuid.UUID) *BusUpdate {
	bu.mutation.SetMorningFirstStationID(id)
	return bu
}

// SetNillableMorningFirstStationID sets the "morning_first_station" edge to the Station entity by ID if the given value is not nil.
func (bu *BusUpdate) SetNillableMorningFirstStationID(id *uuid.UUID) *BusUpdate {
	if id != nil {
		bu = bu.SetMorningFirstStationID(*id)
	}
	return bu
}

// SetMorningFirstStation sets the "morning_first_station" edge to the Station entity.
func (bu *BusUpdate) SetMorningFirstStation(s *Station) *BusUpdate {
	return bu.SetMorningFirstStationID(s.ID)
}

// SetEveningFirstStationID sets the "evening_first_station" edge to the Station entity by ID.
func (bu *BusUpdate) SetEveningFirstStationID(id uuid.UUID) *BusUpdate {
	bu.mutation.SetEveningFirstStationID(id)
	return bu
}

// SetNillableEveningFirstStationID sets the "evening_first_station" edge to the Station entity by ID if the given value is not nil.
func (bu *BusUpdate) SetNillableEveningFirstStationID(id *uuid.UUID) *BusUpdate {
	if id != nil {
		bu = bu.SetEveningFirstStationID(*id)
	}
	return bu
}

// SetEveningFirstStation sets the "evening_first_station" edge to the Station entity.
func (bu *BusUpdate) SetEveningFirstStation(s *Station) *BusUpdate {
	return bu.SetEveningFirstStationID(s.ID)
}

// Mutation returns the BusMutation object of the builder.
func (bu *BusUpdate) Mutation() *BusMutation {
	return bu.mutation
}

// ClearNursery clears the "nursery" edge to the Nursery entity.
func (bu *BusUpdate) ClearNursery() *BusUpdate {
	bu.mutation.ClearNursery()
	return bu
}

// ClearStations clears all "stations" edges to the Station entity.
func (bu *BusUpdate) ClearStations() *BusUpdate {
	bu.mutation.ClearStations()
	return bu
}

// RemoveStationIDs removes the "stations" edge to Station entities by IDs.
func (bu *BusUpdate) RemoveStationIDs(ids ...uuid.UUID) *BusUpdate {
	bu.mutation.RemoveStationIDs(ids...)
	return bu
}

// RemoveStations removes "stations" edges to Station entities.
func (bu *BusUpdate) RemoveStations(s ...*Station) *BusUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.RemoveStationIDs(ids...)
}

// ClearBoardingRecords clears all "boarding_records" edges to the BoardingRecord entity.
func (bu *BusUpdate) ClearBoardingRecords() *BusUpdate {
	bu.mutation.ClearBoardingRecords()
	return bu
}

// RemoveBoardingRecordIDs removes the "boarding_records" edge to BoardingRecord entities by IDs.
func (bu *BusUpdate) RemoveBoardingRecordIDs(ids ...uuid.UUID) *BusUpdate {
	bu.mutation.RemoveBoardingRecordIDs(ids...)
	return bu
}

// RemoveBoardingRecords removes "boarding_records" edges to BoardingRecord entities.
func (bu *BusUpdate) RemoveBoardingRecords(b ...*BoardingRecord) *BusUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveBoardingRecordIDs(ids...)
}

// ClearChildBusAssociations clears all "childBusAssociations" edges to the ChildBusAssociation entity.
func (bu *BusUpdate) ClearChildBusAssociations() *BusUpdate {
	bu.mutation.ClearChildBusAssociations()
	return bu
}

// RemoveChildBusAssociationIDs removes the "childBusAssociations" edge to ChildBusAssociation entities by IDs.
func (bu *BusUpdate) RemoveChildBusAssociationIDs(ids ...int) *BusUpdate {
	bu.mutation.RemoveChildBusAssociationIDs(ids...)
	return bu
}

// RemoveChildBusAssociations removes "childBusAssociations" edges to ChildBusAssociation entities.
func (bu *BusUpdate) RemoveChildBusAssociations(c ...*ChildBusAssociation) *BusUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveChildBusAssociationIDs(ids...)
}

// ClearNextStation clears the "next_station" edge to the Station entity.
func (bu *BusUpdate) ClearNextStation() *BusUpdate {
	bu.mutation.ClearNextStation()
	return bu
}

// ClearMorningFirstStation clears the "morning_first_station" edge to the Station entity.
func (bu *BusUpdate) ClearMorningFirstStation() *BusUpdate {
	bu.mutation.ClearMorningFirstStation()
	return bu
}

// ClearEveningFirstStation clears the "evening_first_station" edge to the Station entity.
func (bu *BusUpdate) ClearEveningFirstStation() *BusUpdate {
	bu.mutation.ClearEveningFirstStation()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BusUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BusUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BusUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BusUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BusUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := bus.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BusUpdate) check() error {
	if v, ok := bu.mutation.Status(); ok {
		if err := bus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bus.status": %w`, err)}
		}
	}
	return nil
}

func (bu *BusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bus.Table, bus.Columns, sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(bus.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.PlateNumber(); ok {
		_spec.SetField(bus.FieldPlateNumber, field.TypeString, value)
	}
	if bu.mutation.PlateNumberCleared() {
		_spec.ClearField(bus.FieldPlateNumber, field.TypeString)
	}
	if value, ok := bu.mutation.Latitude(); ok {
		_spec.SetField(bus.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedLatitude(); ok {
		_spec.AddField(bus.FieldLatitude, field.TypeFloat64, value)
	}
	if bu.mutation.LatitudeCleared() {
		_spec.ClearField(bus.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := bu.mutation.Longitude(); ok {
		_spec.SetField(bus.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedLongitude(); ok {
		_spec.AddField(bus.FieldLongitude, field.TypeFloat64, value)
	}
	if bu.mutation.LongitudeCleared() {
		_spec.ClearField(bus.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(bus.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.EnableFaceRecognition(); ok {
		_spec.SetField(bus.FieldEnableFaceRecognition, field.TypeBool, value)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(bus.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bus.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.NurseryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.NurseryTable,
			Columns: []string{bus.NurseryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nursery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.NurseryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.NurseryTable,
			Columns: []string{bus.NurseryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nursery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bus.StationsTable,
			Columns: bus.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedStationsIDs(); len(nodes) > 0 && !bu.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bus.StationsTable,
			Columns: bus.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.StationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bus.StationsTable,
			Columns: bus.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BoardingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.BoardingRecordsTable,
			Columns: []string{bus.BoardingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardingrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBoardingRecordsIDs(); len(nodes) > 0 && !bu.mutation.BoardingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.BoardingRecordsTable,
			Columns: []string{bus.BoardingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardingrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BoardingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.BoardingRecordsTable,
			Columns: []string{bus.BoardingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardingrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ChildBusAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.ChildBusAssociationsTable,
			Columns: []string{bus.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedChildBusAssociationsIDs(); len(nodes) > 0 && !bu.mutation.ChildBusAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.ChildBusAssociationsTable,
			Columns: []string{bus.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ChildBusAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.ChildBusAssociationsTable,
			Columns: []string{bus.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.NextStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.NextStationTable,
			Columns: []string{bus.NextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.NextStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.NextStationTable,
			Columns: []string{bus.NextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.MorningFirstStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.MorningFirstStationTable,
			Columns: []string{bus.MorningFirstStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MorningFirstStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.MorningFirstStationTable,
			Columns: []string{bus.MorningFirstStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.EveningFirstStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.EveningFirstStationTable,
			Columns: []string{bus.EveningFirstStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.EveningFirstStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.EveningFirstStationTable,
			Columns: []string{bus.EveningFirstStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BusUpdateOne is the builder for updating a single Bus entity.
type BusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusMutation
}

// SetName sets the "name" field.
func (buo *BusUpdateOne) SetName(s string) *BusUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BusUpdateOne) SetNillableName(s *string) *BusUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetPlateNumber sets the "plate_number" field.
func (buo *BusUpdateOne) SetPlateNumber(s string) *BusUpdateOne {
	buo.mutation.SetPlateNumber(s)
	return buo
}

// SetNillablePlateNumber sets the "plate_number" field if the given value is not nil.
func (buo *BusUpdateOne) SetNillablePlateNumber(s *string) *BusUpdateOne {
	if s != nil {
		buo.SetPlateNumber(*s)
	}
	return buo
}

// ClearPlateNumber clears the value of the "plate_number" field.
func (buo *BusUpdateOne) ClearPlateNumber() *BusUpdateOne {
	buo.mutation.ClearPlateNumber()
	return buo
}

// SetLatitude sets the "latitude" field.
func (buo *BusUpdateOne) SetLatitude(f float64) *BusUpdateOne {
	buo.mutation.ResetLatitude()
	buo.mutation.SetLatitude(f)
	return buo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (buo *BusUpdateOne) SetNillableLatitude(f *float64) *BusUpdateOne {
	if f != nil {
		buo.SetLatitude(*f)
	}
	return buo
}

// AddLatitude adds f to the "latitude" field.
func (buo *BusUpdateOne) AddLatitude(f float64) *BusUpdateOne {
	buo.mutation.AddLatitude(f)
	return buo
}

// ClearLatitude clears the value of the "latitude" field.
func (buo *BusUpdateOne) ClearLatitude() *BusUpdateOne {
	buo.mutation.ClearLatitude()
	return buo
}

// SetLongitude sets the "longitude" field.
func (buo *BusUpdateOne) SetLongitude(f float64) *BusUpdateOne {
	buo.mutation.ResetLongitude()
	buo.mutation.SetLongitude(f)
	return buo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (buo *BusUpdateOne) SetNillableLongitude(f *float64) *BusUpdateOne {
	if f != nil {
		buo.SetLongitude(*f)
	}
	return buo
}

// AddLongitude adds f to the "longitude" field.
func (buo *BusUpdateOne) AddLongitude(f float64) *BusUpdateOne {
	buo.mutation.AddLongitude(f)
	return buo
}

// ClearLongitude clears the value of the "longitude" field.
func (buo *BusUpdateOne) ClearLongitude() *BusUpdateOne {
	buo.mutation.ClearLongitude()
	return buo
}

// SetStatus sets the "status" field.
func (buo *BusUpdateOne) SetStatus(b bus.Status) *BusUpdateOne {
	buo.mutation.SetStatus(b)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BusUpdateOne) SetNillableStatus(b *bus.Status) *BusUpdateOne {
	if b != nil {
		buo.SetStatus(*b)
	}
	return buo
}

// SetEnableFaceRecognition sets the "enable_face_recognition" field.
func (buo *BusUpdateOne) SetEnableFaceRecognition(b bool) *BusUpdateOne {
	buo.mutation.SetEnableFaceRecognition(b)
	return buo
}

// SetNillableEnableFaceRecognition sets the "enable_face_recognition" field if the given value is not nil.
func (buo *BusUpdateOne) SetNillableEnableFaceRecognition(b *bool) *BusUpdateOne {
	if b != nil {
		buo.SetEnableFaceRecognition(*b)
	}
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BusUpdateOne) SetCreatedAt(t time.Time) *BusUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BusUpdateOne) SetNillableCreatedAt(t *time.Time) *BusUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BusUpdateOne) SetUpdatedAt(t time.Time) *BusUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetNurseryID sets the "nursery" edge to the Nursery entity by ID.
func (buo *BusUpdateOne) SetNurseryID(id uuid.UUID) *BusUpdateOne {
	buo.mutation.SetNurseryID(id)
	return buo
}

// SetNillableNurseryID sets the "nursery" edge to the Nursery entity by ID if the given value is not nil.
func (buo *BusUpdateOne) SetNillableNurseryID(id *uuid.UUID) *BusUpdateOne {
	if id != nil {
		buo = buo.SetNurseryID(*id)
	}
	return buo
}

// SetNursery sets the "nursery" edge to the Nursery entity.
func (buo *BusUpdateOne) SetNursery(n *Nursery) *BusUpdateOne {
	return buo.SetNurseryID(n.ID)
}

// AddStationIDs adds the "stations" edge to the Station entity by IDs.
func (buo *BusUpdateOne) AddStationIDs(ids ...uuid.UUID) *BusUpdateOne {
	buo.mutation.AddStationIDs(ids...)
	return buo
}

// AddStations adds the "stations" edges to the Station entity.
func (buo *BusUpdateOne) AddStations(s ...*Station) *BusUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.AddStationIDs(ids...)
}

// AddBoardingRecordIDs adds the "boarding_records" edge to the BoardingRecord entity by IDs.
func (buo *BusUpdateOne) AddBoardingRecordIDs(ids ...uuid.UUID) *BusUpdateOne {
	buo.mutation.AddBoardingRecordIDs(ids...)
	return buo
}

// AddBoardingRecords adds the "boarding_records" edges to the BoardingRecord entity.
func (buo *BusUpdateOne) AddBoardingRecords(b ...*BoardingRecord) *BusUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddBoardingRecordIDs(ids...)
}

// AddChildBusAssociationIDs adds the "childBusAssociations" edge to the ChildBusAssociation entity by IDs.
func (buo *BusUpdateOne) AddChildBusAssociationIDs(ids ...int) *BusUpdateOne {
	buo.mutation.AddChildBusAssociationIDs(ids...)
	return buo
}

// AddChildBusAssociations adds the "childBusAssociations" edges to the ChildBusAssociation entity.
func (buo *BusUpdateOne) AddChildBusAssociations(c ...*ChildBusAssociation) *BusUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddChildBusAssociationIDs(ids...)
}

// SetNextStationID sets the "next_station" edge to the Station entity by ID.
func (buo *BusUpdateOne) SetNextStationID(id uuid.UUID) *BusUpdateOne {
	buo.mutation.SetNextStationID(id)
	return buo
}

// SetNillableNextStationID sets the "next_station" edge to the Station entity by ID if the given value is not nil.
func (buo *BusUpdateOne) SetNillableNextStationID(id *uuid.UUID) *BusUpdateOne {
	if id != nil {
		buo = buo.SetNextStationID(*id)
	}
	return buo
}

// SetNextStation sets the "next_station" edge to the Station entity.
func (buo *BusUpdateOne) SetNextStation(s *Station) *BusUpdateOne {
	return buo.SetNextStationID(s.ID)
}

// SetMorningFirstStationID sets the "morning_first_station" edge to the Station entity by ID.
func (buo *BusUpdateOne) SetMorningFirstStationID(id uuid.UUID) *BusUpdateOne {
	buo.mutation.SetMorningFirstStationID(id)
	return buo
}

// SetNillableMorningFirstStationID sets the "morning_first_station" edge to the Station entity by ID if the given value is not nil.
func (buo *BusUpdateOne) SetNillableMorningFirstStationID(id *uuid.UUID) *BusUpdateOne {
	if id != nil {
		buo = buo.SetMorningFirstStationID(*id)
	}
	return buo
}

// SetMorningFirstStation sets the "morning_first_station" edge to the Station entity.
func (buo *BusUpdateOne) SetMorningFirstStation(s *Station) *BusUpdateOne {
	return buo.SetMorningFirstStationID(s.ID)
}

// SetEveningFirstStationID sets the "evening_first_station" edge to the Station entity by ID.
func (buo *BusUpdateOne) SetEveningFirstStationID(id uuid.UUID) *BusUpdateOne {
	buo.mutation.SetEveningFirstStationID(id)
	return buo
}

// SetNillableEveningFirstStationID sets the "evening_first_station" edge to the Station entity by ID if the given value is not nil.
func (buo *BusUpdateOne) SetNillableEveningFirstStationID(id *uuid.UUID) *BusUpdateOne {
	if id != nil {
		buo = buo.SetEveningFirstStationID(*id)
	}
	return buo
}

// SetEveningFirstStation sets the "evening_first_station" edge to the Station entity.
func (buo *BusUpdateOne) SetEveningFirstStation(s *Station) *BusUpdateOne {
	return buo.SetEveningFirstStationID(s.ID)
}

// Mutation returns the BusMutation object of the builder.
func (buo *BusUpdateOne) Mutation() *BusMutation {
	return buo.mutation
}

// ClearNursery clears the "nursery" edge to the Nursery entity.
func (buo *BusUpdateOne) ClearNursery() *BusUpdateOne {
	buo.mutation.ClearNursery()
	return buo
}

// ClearStations clears all "stations" edges to the Station entity.
func (buo *BusUpdateOne) ClearStations() *BusUpdateOne {
	buo.mutation.ClearStations()
	return buo
}

// RemoveStationIDs removes the "stations" edge to Station entities by IDs.
func (buo *BusUpdateOne) RemoveStationIDs(ids ...uuid.UUID) *BusUpdateOne {
	buo.mutation.RemoveStationIDs(ids...)
	return buo
}

// RemoveStations removes "stations" edges to Station entities.
func (buo *BusUpdateOne) RemoveStations(s ...*Station) *BusUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.RemoveStationIDs(ids...)
}

// ClearBoardingRecords clears all "boarding_records" edges to the BoardingRecord entity.
func (buo *BusUpdateOne) ClearBoardingRecords() *BusUpdateOne {
	buo.mutation.ClearBoardingRecords()
	return buo
}

// RemoveBoardingRecordIDs removes the "boarding_records" edge to BoardingRecord entities by IDs.
func (buo *BusUpdateOne) RemoveBoardingRecordIDs(ids ...uuid.UUID) *BusUpdateOne {
	buo.mutation.RemoveBoardingRecordIDs(ids...)
	return buo
}

// RemoveBoardingRecords removes "boarding_records" edges to BoardingRecord entities.
func (buo *BusUpdateOne) RemoveBoardingRecords(b ...*BoardingRecord) *BusUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveBoardingRecordIDs(ids...)
}

// ClearChildBusAssociations clears all "childBusAssociations" edges to the ChildBusAssociation entity.
func (buo *BusUpdateOne) ClearChildBusAssociations() *BusUpdateOne {
	buo.mutation.ClearChildBusAssociations()
	return buo
}

// RemoveChildBusAssociationIDs removes the "childBusAssociations" edge to ChildBusAssociation entities by IDs.
func (buo *BusUpdateOne) RemoveChildBusAssociationIDs(ids ...int) *BusUpdateOne {
	buo.mutation.RemoveChildBusAssociationIDs(ids...)
	return buo
}

// RemoveChildBusAssociations removes "childBusAssociations" edges to ChildBusAssociation entities.
func (buo *BusUpdateOne) RemoveChildBusAssociations(c ...*ChildBusAssociation) *BusUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveChildBusAssociationIDs(ids...)
}

// ClearNextStation clears the "next_station" edge to the Station entity.
func (buo *BusUpdateOne) ClearNextStation() *BusUpdateOne {
	buo.mutation.ClearNextStation()
	return buo
}

// ClearMorningFirstStation clears the "morning_first_station" edge to the Station entity.
func (buo *BusUpdateOne) ClearMorningFirstStation() *BusUpdateOne {
	buo.mutation.ClearMorningFirstStation()
	return buo
}

// ClearEveningFirstStation clears the "evening_first_station" edge to the Station entity.
func (buo *BusUpdateOne) ClearEveningFirstStation() *BusUpdateOne {
	buo.mutation.ClearEveningFirstStation()
	return buo
}

// Where appends a list predicates to the BusUpdate builder.
func (buo *BusUpdateOne) Where(ps ...predicate.Bus) *BusUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BusUpdateOne) Select(field string, fields ...string) *BusUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bus entity.
func (buo *BusUpdateOne) Save(ctx context.Context) (*Bus, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BusUpdateOne) SaveX(ctx context.Context) *Bus {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BusUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BusUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BusUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := bus.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BusUpdateOne) check() error {
	if v, ok := buo.mutation.Status(); ok {
		if err := bus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bus.status": %w`, err)}
		}
	}
	return nil
}

func (buo *BusUpdateOne) sqlSave(ctx context.Context) (_node *Bus, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bus.Table, bus.Columns, sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bus.FieldID)
		for _, f := range fields {
			if !bus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(bus.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.PlateNumber(); ok {
		_spec.SetField(bus.FieldPlateNumber, field.TypeString, value)
	}
	if buo.mutation.PlateNumberCleared() {
		_spec.ClearField(bus.FieldPlateNumber, field.TypeString)
	}
	if value, ok := buo.mutation.Latitude(); ok {
		_spec.SetField(bus.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedLatitude(); ok {
		_spec.AddField(bus.FieldLatitude, field.TypeFloat64, value)
	}
	if buo.mutation.LatitudeCleared() {
		_spec.ClearField(bus.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := buo.mutation.Longitude(); ok {
		_spec.SetField(bus.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedLongitude(); ok {
		_spec.AddField(bus.FieldLongitude, field.TypeFloat64, value)
	}
	if buo.mutation.LongitudeCleared() {
		_spec.ClearField(bus.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(bus.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.EnableFaceRecognition(); ok {
		_spec.SetField(bus.FieldEnableFaceRecognition, field.TypeBool, value)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(bus.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bus.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.NurseryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.NurseryTable,
			Columns: []string{bus.NurseryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nursery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.NurseryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.NurseryTable,
			Columns: []string{bus.NurseryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nursery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bus.StationsTable,
			Columns: bus.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedStationsIDs(); len(nodes) > 0 && !buo.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bus.StationsTable,
			Columns: bus.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.StationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bus.StationsTable,
			Columns: bus.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BoardingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.BoardingRecordsTable,
			Columns: []string{bus.BoardingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardingrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBoardingRecordsIDs(); len(nodes) > 0 && !buo.mutation.BoardingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.BoardingRecordsTable,
			Columns: []string{bus.BoardingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardingrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BoardingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.BoardingRecordsTable,
			Columns: []string{bus.BoardingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardingrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ChildBusAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.ChildBusAssociationsTable,
			Columns: []string{bus.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedChildBusAssociationsIDs(); len(nodes) > 0 && !buo.mutation.ChildBusAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.ChildBusAssociationsTable,
			Columns: []string{bus.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ChildBusAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.ChildBusAssociationsTable,
			Columns: []string{bus.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.NextStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.NextStationTable,
			Columns: []string{bus.NextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.NextStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.NextStationTable,
			Columns: []string{bus.NextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.MorningFirstStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.MorningFirstStationTable,
			Columns: []string{bus.MorningFirstStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MorningFirstStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.MorningFirstStationTable,
			Columns: []string{bus.MorningFirstStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.EveningFirstStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.EveningFirstStationTable,
			Columns: []string{bus.EveningFirstStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.EveningFirstStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.EveningFirstStationTable,
			Columns: []string{bus.EveningFirstStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bus{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
