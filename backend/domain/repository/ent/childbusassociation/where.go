// Code generated by ent, DO NOT EDIT.

package childbusassociation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldLTE(FieldID, id))
}

// ChildID applies equality check predicate on the "child_id" field. It's identical to ChildIDEQ.
func ChildID(v uuid.UUID) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldEQ(FieldChildID, v))
}

// BusRouteID applies equality check predicate on the "bus_route_id" field. It's identical to BusRouteIDEQ.
func BusRouteID(v uuid.UUID) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldEQ(FieldBusRouteID, v))
}

// ChildIDEQ applies the EQ predicate on the "child_id" field.
func ChildIDEQ(v uuid.UUID) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldEQ(FieldChildID, v))
}

// ChildIDNEQ applies the NEQ predicate on the "child_id" field.
func ChildIDNEQ(v uuid.UUID) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldNEQ(FieldChildID, v))
}

// ChildIDIn applies the In predicate on the "child_id" field.
func ChildIDIn(vs ...uuid.UUID) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldIn(FieldChildID, vs...))
}

// ChildIDNotIn applies the NotIn predicate on the "child_id" field.
func ChildIDNotIn(vs ...uuid.UUID) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldNotIn(FieldChildID, vs...))
}

// BusRouteIDEQ applies the EQ predicate on the "bus_route_id" field.
func BusRouteIDEQ(v uuid.UUID) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldEQ(FieldBusRouteID, v))
}

// BusRouteIDNEQ applies the NEQ predicate on the "bus_route_id" field.
func BusRouteIDNEQ(v uuid.UUID) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldNEQ(FieldBusRouteID, v))
}

// BusRouteIDIn applies the In predicate on the "bus_route_id" field.
func BusRouteIDIn(vs ...uuid.UUID) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldIn(FieldBusRouteID, vs...))
}

// BusRouteIDNotIn applies the NotIn predicate on the "bus_route_id" field.
func BusRouteIDNotIn(vs ...uuid.UUID) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.FieldNotIn(FieldBusRouteID, vs...))
}

// HasChild applies the HasEdge predicate on the "child" edge.
func HasChild() predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChildTable, ChildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildWith applies the HasEdge predicate on the "child" edge with a given conditions (other predicates).
func HasChildWith(preds ...predicate.Child) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(func(s *sql.Selector) {
		step := newChildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusRoute applies the HasEdge predicate on the "bus_route" edge.
func HasBusRoute() predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BusRouteTable, BusRouteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusRouteWith applies the HasEdge predicate on the "bus_route" edge with a given conditions (other predicates).
func HasBusRouteWith(preds ...predicate.BusRoute) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(func(s *sql.Selector) {
		step := newBusRouteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChildBusAssociation) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChildBusAssociation) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChildBusAssociation) predicate.ChildBusAssociation {
	return predicate.ChildBusAssociation(sql.NotPredicates(p))
}
