// Code generated by ent, DO NOT EDIT.

package childbusassociation

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the childbusassociation type in the database.
	Label = "child_bus_association"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChildID holds the string denoting the child_id field in the database.
	FieldChildID = "child_id"
	// FieldBusID holds the string denoting the bus_id field in the database.
	FieldBusID = "bus_id"
	// FieldBusType holds the string denoting the bus_type field in the database.
	FieldBusType = "bus_type"
	// EdgeChild holds the string denoting the child edge name in mutations.
	EdgeChild = "child"
	// EdgeBus holds the string denoting the bus edge name in mutations.
	EdgeBus = "bus"
	// Table holds the table name of the childbusassociation in the database.
	Table = "child_bus_associations"
	// ChildTable is the table that holds the child relation/edge.
	ChildTable = "child_bus_associations"
	// ChildInverseTable is the table name for the Child entity.
	// It exists in this package in order to avoid circular dependency with the "child" package.
	ChildInverseTable = "childs"
	// ChildColumn is the table column denoting the child relation/edge.
	ChildColumn = "child_id"
	// BusTable is the table that holds the bus relation/edge.
	BusTable = "child_bus_associations"
	// BusInverseTable is the table name for the Bus entity.
	// It exists in this package in order to avoid circular dependency with the "bus" package.
	BusInverseTable = "bus"
	// BusColumn is the table column denoting the bus relation/edge.
	BusColumn = "bus_id"
)

// Columns holds all SQL columns for childbusassociation fields.
var Columns = []string{
	FieldID,
	FieldChildID,
	FieldBusID,
	FieldBusType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// BusType defines the type for the "bus_type" enum field.
type BusType string

// BusType values.
const (
	BusTypeMorning BusType = "morning"
	BusTypeEvening BusType = "evening"
)

func (bt BusType) String() string {
	return string(bt)
}

// BusTypeValidator is a validator for the "bus_type" field enum values. It is called by the builders before save.
func BusTypeValidator(bt BusType) error {
	switch bt {
	case BusTypeMorning, BusTypeEvening:
		return nil
	default:
		return fmt.Errorf("childbusassociation: invalid enum value for bus_type field: %q", bt)
	}
}

// OrderOption defines the ordering options for the ChildBusAssociation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChildID orders the results by the child_id field.
func ByChildID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildID, opts...).ToFunc()
}

// ByBusID orders the results by the bus_id field.
func ByBusID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusID, opts...).ToFunc()
}

// ByBusType orders the results by the bus_type field.
func ByBusType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusType, opts...).ToFunc()
}

// ByChildField orders the results by child field.
func ByChildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildStep(), sql.OrderByField(field, opts...))
	}
}

// ByBusField orders the results by bus field.
func ByBusField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusStep(), sql.OrderByField(field, opts...))
	}
}
func newChildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ChildTable, ChildColumn),
	)
}
func newBusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BusTable, BusColumn),
	)
}
