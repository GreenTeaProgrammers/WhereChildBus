// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/bus"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/child"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/guardian"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/nursery"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
	"github.com/google/uuid"
)

// NurseryUpdate is the builder for updating Nursery entities.
type NurseryUpdate struct {
	config
	hooks    []Hook
	mutation *NurseryMutation
}

// Where appends a list predicates to the NurseryUpdate builder.
func (nu *NurseryUpdate) Where(ps ...predicate.Nursery) *NurseryUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetNurseryCode sets the "nursery_code" field.
func (nu *NurseryUpdate) SetNurseryCode(s string) *NurseryUpdate {
	nu.mutation.SetNurseryCode(s)
	return nu
}

// SetNillableNurseryCode sets the "nursery_code" field if the given value is not nil.
func (nu *NurseryUpdate) SetNillableNurseryCode(s *string) *NurseryUpdate {
	if s != nil {
		nu.SetNurseryCode(*s)
	}
	return nu
}

// SetName sets the "name" field.
func (nu *NurseryUpdate) SetName(s string) *NurseryUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NurseryUpdate) SetNillableName(s *string) *NurseryUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetAddress sets the "address" field.
func (nu *NurseryUpdate) SetAddress(s string) *NurseryUpdate {
	nu.mutation.SetAddress(s)
	return nu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (nu *NurseryUpdate) SetNillableAddress(s *string) *NurseryUpdate {
	if s != nil {
		nu.SetAddress(*s)
	}
	return nu
}

// SetPhoneNumber sets the "phone_number" field.
func (nu *NurseryUpdate) SetPhoneNumber(s string) *NurseryUpdate {
	nu.mutation.SetPhoneNumber(s)
	return nu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (nu *NurseryUpdate) SetNillablePhoneNumber(s *string) *NurseryUpdate {
	if s != nil {
		nu.SetPhoneNumber(*s)
	}
	return nu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (nu *NurseryUpdate) ClearPhoneNumber() *NurseryUpdate {
	nu.mutation.ClearPhoneNumber()
	return nu
}

// SetEmail sets the "email" field.
func (nu *NurseryUpdate) SetEmail(s string) *NurseryUpdate {
	nu.mutation.SetEmail(s)
	return nu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (nu *NurseryUpdate) SetNillableEmail(s *string) *NurseryUpdate {
	if s != nil {
		nu.SetEmail(*s)
	}
	return nu
}

// ClearEmail clears the value of the "email" field.
func (nu *NurseryUpdate) ClearEmail() *NurseryUpdate {
	nu.mutation.ClearEmail()
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NurseryUpdate) SetCreatedAt(t time.Time) *NurseryUpdate {
	nu.mutation.SetCreatedAt(t)
	return nu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nu *NurseryUpdate) SetNillableCreatedAt(t *time.Time) *NurseryUpdate {
	if t != nil {
		nu.SetCreatedAt(*t)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NurseryUpdate) SetUpdatedAt(t time.Time) *NurseryUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// AddChildIDs adds the "children" edge to the Child entity by IDs.
func (nu *NurseryUpdate) AddChildIDs(ids ...uuid.UUID) *NurseryUpdate {
	nu.mutation.AddChildIDs(ids...)
	return nu
}

// AddChildren adds the "children" edges to the Child entity.
func (nu *NurseryUpdate) AddChildren(c ...*Child) *NurseryUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddChildIDs(ids...)
}

// AddGuardianIDs adds the "guardians" edge to the Guardian entity by IDs.
func (nu *NurseryUpdate) AddGuardianIDs(ids ...uuid.UUID) *NurseryUpdate {
	nu.mutation.AddGuardianIDs(ids...)
	return nu
}

// AddGuardians adds the "guardians" edges to the Guardian entity.
func (nu *NurseryUpdate) AddGuardians(g ...*Guardian) *NurseryUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nu.AddGuardianIDs(ids...)
}

// AddBusIDs adds the "buses" edge to the Bus entity by IDs.
func (nu *NurseryUpdate) AddBusIDs(ids ...uuid.UUID) *NurseryUpdate {
	nu.mutation.AddBusIDs(ids...)
	return nu
}

// AddBuses adds the "buses" edges to the Bus entity.
func (nu *NurseryUpdate) AddBuses(b ...*Bus) *NurseryUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nu.AddBusIDs(ids...)
}

// Mutation returns the NurseryMutation object of the builder.
func (nu *NurseryUpdate) Mutation() *NurseryMutation {
	return nu.mutation
}

// ClearChildren clears all "children" edges to the Child entity.
func (nu *NurseryUpdate) ClearChildren() *NurseryUpdate {
	nu.mutation.ClearChildren()
	return nu
}

// RemoveChildIDs removes the "children" edge to Child entities by IDs.
func (nu *NurseryUpdate) RemoveChildIDs(ids ...uuid.UUID) *NurseryUpdate {
	nu.mutation.RemoveChildIDs(ids...)
	return nu
}

// RemoveChildren removes "children" edges to Child entities.
func (nu *NurseryUpdate) RemoveChildren(c ...*Child) *NurseryUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveChildIDs(ids...)
}

// ClearGuardians clears all "guardians" edges to the Guardian entity.
func (nu *NurseryUpdate) ClearGuardians() *NurseryUpdate {
	nu.mutation.ClearGuardians()
	return nu
}

// RemoveGuardianIDs removes the "guardians" edge to Guardian entities by IDs.
func (nu *NurseryUpdate) RemoveGuardianIDs(ids ...uuid.UUID) *NurseryUpdate {
	nu.mutation.RemoveGuardianIDs(ids...)
	return nu
}

// RemoveGuardians removes "guardians" edges to Guardian entities.
func (nu *NurseryUpdate) RemoveGuardians(g ...*Guardian) *NurseryUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nu.RemoveGuardianIDs(ids...)
}

// ClearBuses clears all "buses" edges to the Bus entity.
func (nu *NurseryUpdate) ClearBuses() *NurseryUpdate {
	nu.mutation.ClearBuses()
	return nu
}

// RemoveBusIDs removes the "buses" edge to Bus entities by IDs.
func (nu *NurseryUpdate) RemoveBusIDs(ids ...uuid.UUID) *NurseryUpdate {
	nu.mutation.RemoveBusIDs(ids...)
	return nu
}

// RemoveBuses removes "buses" edges to Bus entities.
func (nu *NurseryUpdate) RemoveBuses(b ...*Bus) *NurseryUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nu.RemoveBusIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NurseryUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NurseryUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NurseryUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NurseryUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NurseryUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := nursery.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

func (nu *NurseryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(nursery.Table, nursery.Columns, sqlgraph.NewFieldSpec(nursery.FieldID, field.TypeUUID))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.NurseryCode(); ok {
		_spec.SetField(nursery.FieldNurseryCode, field.TypeString, value)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(nursery.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Address(); ok {
		_spec.SetField(nursery.FieldAddress, field.TypeString, value)
	}
	if value, ok := nu.mutation.PhoneNumber(); ok {
		_spec.SetField(nursery.FieldPhoneNumber, field.TypeString, value)
	}
	if nu.mutation.PhoneNumberCleared() {
		_spec.ClearField(nursery.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := nu.mutation.Email(); ok {
		_spec.SetField(nursery.FieldEmail, field.TypeString, value)
	}
	if nu.mutation.EmailCleared() {
		_spec.ClearField(nursery.FieldEmail, field.TypeString)
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.SetField(nursery.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(nursery.FieldUpdatedAt, field.TypeTime, value)
	}
	if nu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.ChildrenTable,
			Columns: []string{nursery.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !nu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.ChildrenTable,
			Columns: []string{nursery.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.ChildrenTable,
			Columns: []string{nursery.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.GuardiansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.GuardiansTable,
			Columns: []string{nursery.GuardiansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedGuardiansIDs(); len(nodes) > 0 && !nu.mutation.GuardiansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.GuardiansTable,
			Columns: []string{nursery.GuardiansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.GuardiansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.GuardiansTable,
			Columns: []string{nursery.GuardiansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.BusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.BusesTable,
			Columns: []string{nursery.BusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedBusesIDs(); len(nodes) > 0 && !nu.mutation.BusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.BusesTable,
			Columns: []string{nursery.BusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.BusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.BusesTable,
			Columns: []string{nursery.BusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nursery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NurseryUpdateOne is the builder for updating a single Nursery entity.
type NurseryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NurseryMutation
}

// SetNurseryCode sets the "nursery_code" field.
func (nuo *NurseryUpdateOne) SetNurseryCode(s string) *NurseryUpdateOne {
	nuo.mutation.SetNurseryCode(s)
	return nuo
}

// SetNillableNurseryCode sets the "nursery_code" field if the given value is not nil.
func (nuo *NurseryUpdateOne) SetNillableNurseryCode(s *string) *NurseryUpdateOne {
	if s != nil {
		nuo.SetNurseryCode(*s)
	}
	return nuo
}

// SetName sets the "name" field.
func (nuo *NurseryUpdateOne) SetName(s string) *NurseryUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NurseryUpdateOne) SetNillableName(s *string) *NurseryUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetAddress sets the "address" field.
func (nuo *NurseryUpdateOne) SetAddress(s string) *NurseryUpdateOne {
	nuo.mutation.SetAddress(s)
	return nuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (nuo *NurseryUpdateOne) SetNillableAddress(s *string) *NurseryUpdateOne {
	if s != nil {
		nuo.SetAddress(*s)
	}
	return nuo
}

// SetPhoneNumber sets the "phone_number" field.
func (nuo *NurseryUpdateOne) SetPhoneNumber(s string) *NurseryUpdateOne {
	nuo.mutation.SetPhoneNumber(s)
	return nuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (nuo *NurseryUpdateOne) SetNillablePhoneNumber(s *string) *NurseryUpdateOne {
	if s != nil {
		nuo.SetPhoneNumber(*s)
	}
	return nuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (nuo *NurseryUpdateOne) ClearPhoneNumber() *NurseryUpdateOne {
	nuo.mutation.ClearPhoneNumber()
	return nuo
}

// SetEmail sets the "email" field.
func (nuo *NurseryUpdateOne) SetEmail(s string) *NurseryUpdateOne {
	nuo.mutation.SetEmail(s)
	return nuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (nuo *NurseryUpdateOne) SetNillableEmail(s *string) *NurseryUpdateOne {
	if s != nil {
		nuo.SetEmail(*s)
	}
	return nuo
}

// ClearEmail clears the value of the "email" field.
func (nuo *NurseryUpdateOne) ClearEmail() *NurseryUpdateOne {
	nuo.mutation.ClearEmail()
	return nuo
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NurseryUpdateOne) SetCreatedAt(t time.Time) *NurseryUpdateOne {
	nuo.mutation.SetCreatedAt(t)
	return nuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuo *NurseryUpdateOne) SetNillableCreatedAt(t *time.Time) *NurseryUpdateOne {
	if t != nil {
		nuo.SetCreatedAt(*t)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NurseryUpdateOne) SetUpdatedAt(t time.Time) *NurseryUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// AddChildIDs adds the "children" edge to the Child entity by IDs.
func (nuo *NurseryUpdateOne) AddChildIDs(ids ...uuid.UUID) *NurseryUpdateOne {
	nuo.mutation.AddChildIDs(ids...)
	return nuo
}

// AddChildren adds the "children" edges to the Child entity.
func (nuo *NurseryUpdateOne) AddChildren(c ...*Child) *NurseryUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddChildIDs(ids...)
}

// AddGuardianIDs adds the "guardians" edge to the Guardian entity by IDs.
func (nuo *NurseryUpdateOne) AddGuardianIDs(ids ...uuid.UUID) *NurseryUpdateOne {
	nuo.mutation.AddGuardianIDs(ids...)
	return nuo
}

// AddGuardians adds the "guardians" edges to the Guardian entity.
func (nuo *NurseryUpdateOne) AddGuardians(g ...*Guardian) *NurseryUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nuo.AddGuardianIDs(ids...)
}

// AddBusIDs adds the "buses" edge to the Bus entity by IDs.
func (nuo *NurseryUpdateOne) AddBusIDs(ids ...uuid.UUID) *NurseryUpdateOne {
	nuo.mutation.AddBusIDs(ids...)
	return nuo
}

// AddBuses adds the "buses" edges to the Bus entity.
func (nuo *NurseryUpdateOne) AddBuses(b ...*Bus) *NurseryUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nuo.AddBusIDs(ids...)
}

// Mutation returns the NurseryMutation object of the builder.
func (nuo *NurseryUpdateOne) Mutation() *NurseryMutation {
	return nuo.mutation
}

// ClearChildren clears all "children" edges to the Child entity.
func (nuo *NurseryUpdateOne) ClearChildren() *NurseryUpdateOne {
	nuo.mutation.ClearChildren()
	return nuo
}

// RemoveChildIDs removes the "children" edge to Child entities by IDs.
func (nuo *NurseryUpdateOne) RemoveChildIDs(ids ...uuid.UUID) *NurseryUpdateOne {
	nuo.mutation.RemoveChildIDs(ids...)
	return nuo
}

// RemoveChildren removes "children" edges to Child entities.
func (nuo *NurseryUpdateOne) RemoveChildren(c ...*Child) *NurseryUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveChildIDs(ids...)
}

// ClearGuardians clears all "guardians" edges to the Guardian entity.
func (nuo *NurseryUpdateOne) ClearGuardians() *NurseryUpdateOne {
	nuo.mutation.ClearGuardians()
	return nuo
}

// RemoveGuardianIDs removes the "guardians" edge to Guardian entities by IDs.
func (nuo *NurseryUpdateOne) RemoveGuardianIDs(ids ...uuid.UUID) *NurseryUpdateOne {
	nuo.mutation.RemoveGuardianIDs(ids...)
	return nuo
}

// RemoveGuardians removes "guardians" edges to Guardian entities.
func (nuo *NurseryUpdateOne) RemoveGuardians(g ...*Guardian) *NurseryUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nuo.RemoveGuardianIDs(ids...)
}

// ClearBuses clears all "buses" edges to the Bus entity.
func (nuo *NurseryUpdateOne) ClearBuses() *NurseryUpdateOne {
	nuo.mutation.ClearBuses()
	return nuo
}

// RemoveBusIDs removes the "buses" edge to Bus entities by IDs.
func (nuo *NurseryUpdateOne) RemoveBusIDs(ids ...uuid.UUID) *NurseryUpdateOne {
	nuo.mutation.RemoveBusIDs(ids...)
	return nuo
}

// RemoveBuses removes "buses" edges to Bus entities.
func (nuo *NurseryUpdateOne) RemoveBuses(b ...*Bus) *NurseryUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nuo.RemoveBusIDs(ids...)
}

// Where appends a list predicates to the NurseryUpdate builder.
func (nuo *NurseryUpdateOne) Where(ps ...predicate.Nursery) *NurseryUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NurseryUpdateOne) Select(field string, fields ...string) *NurseryUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Nursery entity.
func (nuo *NurseryUpdateOne) Save(ctx context.Context) (*Nursery, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NurseryUpdateOne) SaveX(ctx context.Context) *Nursery {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NurseryUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NurseryUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NurseryUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := nursery.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

func (nuo *NurseryUpdateOne) sqlSave(ctx context.Context) (_node *Nursery, err error) {
	_spec := sqlgraph.NewUpdateSpec(nursery.Table, nursery.Columns, sqlgraph.NewFieldSpec(nursery.FieldID, field.TypeUUID))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Nursery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nursery.FieldID)
		for _, f := range fields {
			if !nursery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nursery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.NurseryCode(); ok {
		_spec.SetField(nursery.FieldNurseryCode, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(nursery.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Address(); ok {
		_spec.SetField(nursery.FieldAddress, field.TypeString, value)
	}
	if value, ok := nuo.mutation.PhoneNumber(); ok {
		_spec.SetField(nursery.FieldPhoneNumber, field.TypeString, value)
	}
	if nuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(nursery.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := nuo.mutation.Email(); ok {
		_spec.SetField(nursery.FieldEmail, field.TypeString, value)
	}
	if nuo.mutation.EmailCleared() {
		_spec.ClearField(nursery.FieldEmail, field.TypeString)
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.SetField(nursery.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(nursery.FieldUpdatedAt, field.TypeTime, value)
	}
	if nuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.ChildrenTable,
			Columns: []string{nursery.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !nuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.ChildrenTable,
			Columns: []string{nursery.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.ChildrenTable,
			Columns: []string{nursery.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.GuardiansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.GuardiansTable,
			Columns: []string{nursery.GuardiansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedGuardiansIDs(); len(nodes) > 0 && !nuo.mutation.GuardiansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.GuardiansTable,
			Columns: []string{nursery.GuardiansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.GuardiansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.GuardiansTable,
			Columns: []string{nursery.GuardiansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.BusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.BusesTable,
			Columns: []string{nursery.BusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedBusesIDs(); len(nodes) > 0 && !nuo.mutation.BusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.BusesTable,
			Columns: []string{nursery.BusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.BusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nursery.BusesTable,
			Columns: []string{nursery.BusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Nursery{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nursery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
