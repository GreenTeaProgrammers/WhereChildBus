// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busroute"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busrouteassociation"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/station"
	"github.com/google/uuid"
)

// BusRouteAssociation is the model entity for the BusRouteAssociation schema.
type BusRouteAssociation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StationID holds the value of the "station_id" field.
	StationID uuid.UUID `json:"station_id,omitempty"`
	// BusRouteID holds the value of the "bus_route_id" field.
	BusRouteID uuid.UUID `json:"bus_route_id,omitempty"`
	// Order holds the value of the "order" field.
	Order int32 `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BusRouteAssociationQuery when eager-loading is set.
	Edges        BusRouteAssociationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BusRouteAssociationEdges holds the relations/edges for other nodes in the graph.
type BusRouteAssociationEdges struct {
	// Station holds the value of the station edge.
	Station *Station `json:"station,omitempty"`
	// BusRoute holds the value of the busRoute edge.
	BusRoute *BusRoute `json:"busRoute,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BusRouteAssociationEdges) StationOrErr() (*Station, error) {
	if e.loadedTypes[0] {
		if e.Station == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: station.Label}
		}
		return e.Station, nil
	}
	return nil, &NotLoadedError{edge: "station"}
}

// BusRouteOrErr returns the BusRoute value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BusRouteAssociationEdges) BusRouteOrErr() (*BusRoute, error) {
	if e.loadedTypes[1] {
		if e.BusRoute == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: busroute.Label}
		}
		return e.BusRoute, nil
	}
	return nil, &NotLoadedError{edge: "busRoute"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BusRouteAssociation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case busrouteassociation.FieldID, busrouteassociation.FieldOrder:
			values[i] = new(sql.NullInt64)
		case busrouteassociation.FieldStationID, busrouteassociation.FieldBusRouteID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BusRouteAssociation fields.
func (bra *BusRouteAssociation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case busrouteassociation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bra.ID = int(value.Int64)
		case busrouteassociation.FieldStationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value != nil {
				bra.StationID = *value
			}
		case busrouteassociation.FieldBusRouteID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field bus_route_id", values[i])
			} else if value != nil {
				bra.BusRouteID = *value
			}
		case busrouteassociation.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				bra.Order = int32(value.Int64)
			}
		default:
			bra.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BusRouteAssociation.
// This includes values selected through modifiers, order, etc.
func (bra *BusRouteAssociation) Value(name string) (ent.Value, error) {
	return bra.selectValues.Get(name)
}

// QueryStation queries the "station" edge of the BusRouteAssociation entity.
func (bra *BusRouteAssociation) QueryStation() *StationQuery {
	return NewBusRouteAssociationClient(bra.config).QueryStation(bra)
}

// QueryBusRoute queries the "busRoute" edge of the BusRouteAssociation entity.
func (bra *BusRouteAssociation) QueryBusRoute() *BusRouteQuery {
	return NewBusRouteAssociationClient(bra.config).QueryBusRoute(bra)
}

// Update returns a builder for updating this BusRouteAssociation.
// Note that you need to call BusRouteAssociation.Unwrap() before calling this method if this BusRouteAssociation
// was returned from a transaction, and the transaction was committed or rolled back.
func (bra *BusRouteAssociation) Update() *BusRouteAssociationUpdateOne {
	return NewBusRouteAssociationClient(bra.config).UpdateOne(bra)
}

// Unwrap unwraps the BusRouteAssociation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bra *BusRouteAssociation) Unwrap() *BusRouteAssociation {
	_tx, ok := bra.config.driver.(*txDriver)
	if !ok {
		panic("ent: BusRouteAssociation is not a transactional entity")
	}
	bra.config.driver = _tx.drv
	return bra
}

// String implements the fmt.Stringer.
func (bra *BusRouteAssociation) String() string {
	var builder strings.Builder
	builder.WriteString("BusRouteAssociation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bra.ID))
	builder.WriteString("station_id=")
	builder.WriteString(fmt.Sprintf("%v", bra.StationID))
	builder.WriteString(", ")
	builder.WriteString("bus_route_id=")
	builder.WriteString(fmt.Sprintf("%v", bra.BusRouteID))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", bra.Order))
	builder.WriteByte(')')
	return builder.String()
}

// BusRouteAssociations is a parsable slice of BusRouteAssociation.
type BusRouteAssociations []*BusRouteAssociation
