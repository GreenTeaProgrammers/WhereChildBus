// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busroute"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/child"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/childbusassociation"
	"github.com/google/uuid"
)

// ChildBusAssociation is the model entity for the ChildBusAssociation schema.
type ChildBusAssociation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChildID holds the value of the "child_id" field.
	ChildID uuid.UUID `json:"child_id,omitempty"`
	// BusRouteID holds the value of the "bus_route_id" field.
	BusRouteID uuid.UUID `json:"bus_route_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChildBusAssociationQuery when eager-loading is set.
	Edges        ChildBusAssociationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChildBusAssociationEdges holds the relations/edges for other nodes in the graph.
type ChildBusAssociationEdges struct {
	// Child holds the value of the child edge.
	Child *Child `json:"child,omitempty"`
	// BusRoute holds the value of the bus_route edge.
	BusRoute *BusRoute `json:"bus_route,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChildOrErr returns the Child value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChildBusAssociationEdges) ChildOrErr() (*Child, error) {
	if e.loadedTypes[0] {
		if e.Child == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: child.Label}
		}
		return e.Child, nil
	}
	return nil, &NotLoadedError{edge: "child"}
}

// BusRouteOrErr returns the BusRoute value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChildBusAssociationEdges) BusRouteOrErr() (*BusRoute, error) {
	if e.loadedTypes[1] {
		if e.BusRoute == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: busroute.Label}
		}
		return e.BusRoute, nil
	}
	return nil, &NotLoadedError{edge: "bus_route"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChildBusAssociation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case childbusassociation.FieldID:
			values[i] = new(sql.NullInt64)
		case childbusassociation.FieldChildID, childbusassociation.FieldBusRouteID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChildBusAssociation fields.
func (cba *ChildBusAssociation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case childbusassociation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cba.ID = int(value.Int64)
		case childbusassociation.FieldChildID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field child_id", values[i])
			} else if value != nil {
				cba.ChildID = *value
			}
		case childbusassociation.FieldBusRouteID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field bus_route_id", values[i])
			} else if value != nil {
				cba.BusRouteID = *value
			}
		default:
			cba.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChildBusAssociation.
// This includes values selected through modifiers, order, etc.
func (cba *ChildBusAssociation) Value(name string) (ent.Value, error) {
	return cba.selectValues.Get(name)
}

// QueryChild queries the "child" edge of the ChildBusAssociation entity.
func (cba *ChildBusAssociation) QueryChild() *ChildQuery {
	return NewChildBusAssociationClient(cba.config).QueryChild(cba)
}

// QueryBusRoute queries the "bus_route" edge of the ChildBusAssociation entity.
func (cba *ChildBusAssociation) QueryBusRoute() *BusRouteQuery {
	return NewChildBusAssociationClient(cba.config).QueryBusRoute(cba)
}

// Update returns a builder for updating this ChildBusAssociation.
// Note that you need to call ChildBusAssociation.Unwrap() before calling this method if this ChildBusAssociation
// was returned from a transaction, and the transaction was committed or rolled back.
func (cba *ChildBusAssociation) Update() *ChildBusAssociationUpdateOne {
	return NewChildBusAssociationClient(cba.config).UpdateOne(cba)
}

// Unwrap unwraps the ChildBusAssociation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cba *ChildBusAssociation) Unwrap() *ChildBusAssociation {
	_tx, ok := cba.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChildBusAssociation is not a transactional entity")
	}
	cba.config.driver = _tx.drv
	return cba
}

// String implements the fmt.Stringer.
func (cba *ChildBusAssociation) String() string {
	var builder strings.Builder
	builder.WriteString("ChildBusAssociation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cba.ID))
	builder.WriteString("child_id=")
	builder.WriteString(fmt.Sprintf("%v", cba.ChildID))
	builder.WriteString(", ")
	builder.WriteString("bus_route_id=")
	builder.WriteString(fmt.Sprintf("%v", cba.BusRouteID))
	builder.WriteByte(')')
	return builder.String()
}

// ChildBusAssociations is a parsable slice of ChildBusAssociation.
type ChildBusAssociations []*ChildBusAssociation
