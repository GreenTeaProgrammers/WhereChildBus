// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/boardingrecord"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/bus"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/child"
	"github.com/google/uuid"
)

// BoardingRecordCreate is the builder for creating a BoardingRecord entity.
type BoardingRecordCreate struct {
	config
	mutation *BoardingRecordMutation
	hooks    []Hook
}

// SetTimestamp sets the "timestamp" field.
func (brc *BoardingRecordCreate) SetTimestamp(t time.Time) *BoardingRecordCreate {
	brc.mutation.SetTimestamp(t)
	return brc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (brc *BoardingRecordCreate) SetNillableTimestamp(t *time.Time) *BoardingRecordCreate {
	if t != nil {
		brc.SetTimestamp(*t)
	}
	return brc
}

// SetIsBoarding sets the "is_boarding" field.
func (brc *BoardingRecordCreate) SetIsBoarding(b bool) *BoardingRecordCreate {
	brc.mutation.SetIsBoarding(b)
	return brc
}

// SetNillableIsBoarding sets the "is_boarding" field if the given value is not nil.
func (brc *BoardingRecordCreate) SetNillableIsBoarding(b *bool) *BoardingRecordCreate {
	if b != nil {
		brc.SetIsBoarding(*b)
	}
	return brc
}

// SetID sets the "id" field.
func (brc *BoardingRecordCreate) SetID(u uuid.UUID) *BoardingRecordCreate {
	brc.mutation.SetID(u)
	return brc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (brc *BoardingRecordCreate) SetNillableID(u *uuid.UUID) *BoardingRecordCreate {
	if u != nil {
		brc.SetID(*u)
	}
	return brc
}

// SetChildID sets the "child" edge to the Child entity by ID.
func (brc *BoardingRecordCreate) SetChildID(id uuid.UUID) *BoardingRecordCreate {
	brc.mutation.SetChildID(id)
	return brc
}

// SetNillableChildID sets the "child" edge to the Child entity by ID if the given value is not nil.
func (brc *BoardingRecordCreate) SetNillableChildID(id *uuid.UUID) *BoardingRecordCreate {
	if id != nil {
		brc = brc.SetChildID(*id)
	}
	return brc
}

// SetChild sets the "child" edge to the Child entity.
func (brc *BoardingRecordCreate) SetChild(c *Child) *BoardingRecordCreate {
	return brc.SetChildID(c.ID)
}

// SetBusID sets the "bus" edge to the Bus entity by ID.
func (brc *BoardingRecordCreate) SetBusID(id uuid.UUID) *BoardingRecordCreate {
	brc.mutation.SetBusID(id)
	return brc
}

// SetNillableBusID sets the "bus" edge to the Bus entity by ID if the given value is not nil.
func (brc *BoardingRecordCreate) SetNillableBusID(id *uuid.UUID) *BoardingRecordCreate {
	if id != nil {
		brc = brc.SetBusID(*id)
	}
	return brc
}

// SetBus sets the "bus" edge to the Bus entity.
func (brc *BoardingRecordCreate) SetBus(b *Bus) *BoardingRecordCreate {
	return brc.SetBusID(b.ID)
}

// Mutation returns the BoardingRecordMutation object of the builder.
func (brc *BoardingRecordCreate) Mutation() *BoardingRecordMutation {
	return brc.mutation
}

// Save creates the BoardingRecord in the database.
func (brc *BoardingRecordCreate) Save(ctx context.Context) (*BoardingRecord, error) {
	brc.defaults()
	return withHooks(ctx, brc.sqlSave, brc.mutation, brc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (brc *BoardingRecordCreate) SaveX(ctx context.Context) *BoardingRecord {
	v, err := brc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brc *BoardingRecordCreate) Exec(ctx context.Context) error {
	_, err := brc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brc *BoardingRecordCreate) ExecX(ctx context.Context) {
	if err := brc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (brc *BoardingRecordCreate) defaults() {
	if _, ok := brc.mutation.Timestamp(); !ok {
		v := boardingrecord.DefaultTimestamp()
		brc.mutation.SetTimestamp(v)
	}
	if _, ok := brc.mutation.IsBoarding(); !ok {
		v := boardingrecord.DefaultIsBoarding
		brc.mutation.SetIsBoarding(v)
	}
	if _, ok := brc.mutation.ID(); !ok {
		v := boardingrecord.DefaultID()
		brc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (brc *BoardingRecordCreate) check() error {
	if _, ok := brc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "BoardingRecord.timestamp"`)}
	}
	if _, ok := brc.mutation.IsBoarding(); !ok {
		return &ValidationError{Name: "is_boarding", err: errors.New(`ent: missing required field "BoardingRecord.is_boarding"`)}
	}
	return nil
}

func (brc *BoardingRecordCreate) sqlSave(ctx context.Context) (*BoardingRecord, error) {
	if err := brc.check(); err != nil {
		return nil, err
	}
	_node, _spec := brc.createSpec()
	if err := sqlgraph.CreateNode(ctx, brc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	brc.mutation.id = &_node.ID
	brc.mutation.done = true
	return _node, nil
}

func (brc *BoardingRecordCreate) createSpec() (*BoardingRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &BoardingRecord{config: brc.config}
		_spec = sqlgraph.NewCreateSpec(boardingrecord.Table, sqlgraph.NewFieldSpec(boardingrecord.FieldID, field.TypeUUID))
	)
	if id, ok := brc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := brc.mutation.Timestamp(); ok {
		_spec.SetField(boardingrecord.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := brc.mutation.IsBoarding(); ok {
		_spec.SetField(boardingrecord.FieldIsBoarding, field.TypeBool, value)
		_node.IsBoarding = value
	}
	if nodes := brc.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardingrecord.ChildTable,
			Columns: []string{boardingrecord.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.child_boarding_record = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := brc.mutation.BusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardingrecord.BusTable,
			Columns: []string{boardingrecord.BusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bus_boarding_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BoardingRecordCreateBulk is the builder for creating many BoardingRecord entities in bulk.
type BoardingRecordCreateBulk struct {
	config
	err      error
	builders []*BoardingRecordCreate
}

// Save creates the BoardingRecord entities in the database.
func (brcb *BoardingRecordCreateBulk) Save(ctx context.Context) ([]*BoardingRecord, error) {
	if brcb.err != nil {
		return nil, brcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(brcb.builders))
	nodes := make([]*BoardingRecord, len(brcb.builders))
	mutators := make([]Mutator, len(brcb.builders))
	for i := range brcb.builders {
		func(i int, root context.Context) {
			builder := brcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BoardingRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, brcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, brcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, brcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (brcb *BoardingRecordCreateBulk) SaveX(ctx context.Context) []*BoardingRecord {
	v, err := brcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brcb *BoardingRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := brcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brcb *BoardingRecordCreateBulk) ExecX(ctx context.Context) {
	if err := brcb.Exec(ctx); err != nil {
		panic(err)
	}
}
