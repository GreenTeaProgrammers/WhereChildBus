// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/bus"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/nursery"
	"github.com/google/uuid"
)

// Bus is the model entity for the Bus schema.
type Bus struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PlateNumber holds the value of the "plate_number" field.
	PlateNumber string `json:"plate_number,omitempty"`
	// 現在の緯度
	Latitude float64 `json:"latitude,omitempty"`
	// 現在の経度
	Longitude float64 `json:"longitude,omitempty"`
	// バスのステータス（運行中、停止中など）
	Status bus.Status `json:"status,omitempty"`
	// MorningFirstStationID holds the value of the "morning_first_station_id" field.
	MorningFirstStationID string `json:"morning_first_station_id,omitempty"`
	// EveningFirstStationID holds the value of the "evening_first_station_id" field.
	EveningFirstStationID string `json:"evening_first_station_id,omitempty"`
	// 顔識別が有効かどうか
	EnableFaceRecognition bool `json:"enable_face_recognition,omitempty"`
	// 次のステーションのID
	NextStationID uuid.UUID `json:"next_station_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BusQuery when eager-loading is set.
	Edges        BusEdges `json:"edges"`
	bus_nursery  *uuid.UUID
	selectValues sql.SelectValues
}

// BusEdges holds the relations/edges for other nodes in the graph.
type BusEdges struct {
	// Nursery holds the value of the nursery edge.
	Nursery *Nursery `json:"nursery,omitempty"`
	// Stations holds the value of the stations edge.
	Stations []*Station `json:"stations,omitempty"`
	// BoardingRecords holds the value of the boarding_records edge.
	BoardingRecords []*BoardingRecord `json:"boarding_records,omitempty"`
	// ChildBusAssociations holds the value of the childBusAssociations edge.
	ChildBusAssociations []*ChildBusAssociation `json:"childBusAssociations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// NurseryOrErr returns the Nursery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BusEdges) NurseryOrErr() (*Nursery, error) {
	if e.loadedTypes[0] {
		if e.Nursery == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: nursery.Label}
		}
		return e.Nursery, nil
	}
	return nil, &NotLoadedError{edge: "nursery"}
}

// StationsOrErr returns the Stations value or an error if the edge
// was not loaded in eager-loading.
func (e BusEdges) StationsOrErr() ([]*Station, error) {
	if e.loadedTypes[1] {
		return e.Stations, nil
	}
	return nil, &NotLoadedError{edge: "stations"}
}

// BoardingRecordsOrErr returns the BoardingRecords value or an error if the edge
// was not loaded in eager-loading.
func (e BusEdges) BoardingRecordsOrErr() ([]*BoardingRecord, error) {
	if e.loadedTypes[2] {
		return e.BoardingRecords, nil
	}
	return nil, &NotLoadedError{edge: "boarding_records"}
}

// ChildBusAssociationsOrErr returns the ChildBusAssociations value or an error if the edge
// was not loaded in eager-loading.
func (e BusEdges) ChildBusAssociationsOrErr() ([]*ChildBusAssociation, error) {
	if e.loadedTypes[3] {
		return e.ChildBusAssociations, nil
	}
	return nil, &NotLoadedError{edge: "childBusAssociations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bus.FieldEnableFaceRecognition:
			values[i] = new(sql.NullBool)
		case bus.FieldLatitude, bus.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case bus.FieldName, bus.FieldPlateNumber, bus.FieldStatus, bus.FieldMorningFirstStationID, bus.FieldEveningFirstStationID:
			values[i] = new(sql.NullString)
		case bus.FieldCreatedAt, bus.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case bus.FieldID, bus.FieldNextStationID:
			values[i] = new(uuid.UUID)
		case bus.ForeignKeys[0]: // bus_nursery
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bus fields.
func (b *Bus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bus.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case bus.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case bus.FieldPlateNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plate_number", values[i])
			} else if value.Valid {
				b.PlateNumber = value.String
			}
		case bus.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				b.Latitude = value.Float64
			}
		case bus.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				b.Longitude = value.Float64
			}
		case bus.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				b.Status = bus.Status(value.String)
			}
		case bus.FieldMorningFirstStationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field morning_first_station_id", values[i])
			} else if value.Valid {
				b.MorningFirstStationID = value.String
			}
		case bus.FieldEveningFirstStationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field evening_first_station_id", values[i])
			} else if value.Valid {
				b.EveningFirstStationID = value.String
			}
		case bus.FieldEnableFaceRecognition:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_face_recognition", values[i])
			} else if value.Valid {
				b.EnableFaceRecognition = value.Bool
			}
		case bus.FieldNextStationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field next_station_id", values[i])
			} else if value != nil {
				b.NextStationID = *value
			}
		case bus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case bus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case bus.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field bus_nursery", values[i])
			} else if value.Valid {
				b.bus_nursery = new(uuid.UUID)
				*b.bus_nursery = *value.S.(*uuid.UUID)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bus.
// This includes values selected through modifiers, order, etc.
func (b *Bus) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryNursery queries the "nursery" edge of the Bus entity.
func (b *Bus) QueryNursery() *NurseryQuery {
	return NewBusClient(b.config).QueryNursery(b)
}

// QueryStations queries the "stations" edge of the Bus entity.
func (b *Bus) QueryStations() *StationQuery {
	return NewBusClient(b.config).QueryStations(b)
}

// QueryBoardingRecords queries the "boarding_records" edge of the Bus entity.
func (b *Bus) QueryBoardingRecords() *BoardingRecordQuery {
	return NewBusClient(b.config).QueryBoardingRecords(b)
}

// QueryChildBusAssociations queries the "childBusAssociations" edge of the Bus entity.
func (b *Bus) QueryChildBusAssociations() *ChildBusAssociationQuery {
	return NewBusClient(b.config).QueryChildBusAssociations(b)
}

// Update returns a builder for updating this Bus.
// Note that you need to call Bus.Unwrap() before calling this method if this Bus
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bus) Update() *BusUpdateOne {
	return NewBusClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bus) Unwrap() *Bus {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bus is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bus) String() string {
	var builder strings.Builder
	builder.WriteString("Bus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("plate_number=")
	builder.WriteString(b.PlateNumber)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", b.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", b.Longitude))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", b.Status))
	builder.WriteString(", ")
	builder.WriteString("morning_first_station_id=")
	builder.WriteString(b.MorningFirstStationID)
	builder.WriteString(", ")
	builder.WriteString("evening_first_station_id=")
	builder.WriteString(b.EveningFirstStationID)
	builder.WriteString(", ")
	builder.WriteString("enable_face_recognition=")
	builder.WriteString(fmt.Sprintf("%v", b.EnableFaceRecognition))
	builder.WriteString(", ")
	builder.WriteString("next_station_id=")
	builder.WriteString(fmt.Sprintf("%v", b.NextStationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BusSlice is a parsable slice of Bus.
type BusSlice []*Bus
