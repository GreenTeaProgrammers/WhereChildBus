// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/childbusassociation"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
)

// ChildBusAssociationDelete is the builder for deleting a ChildBusAssociation entity.
type ChildBusAssociationDelete struct {
	config
	hooks    []Hook
	mutation *ChildBusAssociationMutation
}

// Where appends a list predicates to the ChildBusAssociationDelete builder.
func (cbad *ChildBusAssociationDelete) Where(ps ...predicate.ChildBusAssociation) *ChildBusAssociationDelete {
	cbad.mutation.Where(ps...)
	return cbad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cbad *ChildBusAssociationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cbad.sqlExec, cbad.mutation, cbad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cbad *ChildBusAssociationDelete) ExecX(ctx context.Context) int {
	n, err := cbad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cbad *ChildBusAssociationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(childbusassociation.Table, sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt))
	if ps := cbad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cbad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cbad.mutation.done = true
	return affected, err
}

// ChildBusAssociationDeleteOne is the builder for deleting a single ChildBusAssociation entity.
type ChildBusAssociationDeleteOne struct {
	cbad *ChildBusAssociationDelete
}

// Where appends a list predicates to the ChildBusAssociationDelete builder.
func (cbado *ChildBusAssociationDeleteOne) Where(ps ...predicate.ChildBusAssociation) *ChildBusAssociationDeleteOne {
	cbado.cbad.mutation.Where(ps...)
	return cbado
}

// Exec executes the deletion query.
func (cbado *ChildBusAssociationDeleteOne) Exec(ctx context.Context) error {
	n, err := cbado.cbad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{childbusassociation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cbado *ChildBusAssociationDeleteOne) ExecX(ctx context.Context) {
	if err := cbado.Exec(ctx); err != nil {
		panic(err)
	}
}
