// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/bus"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/guardian"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/station"
	"github.com/google/uuid"
)

// StationQuery is the builder for querying Station entities.
type StationQuery struct {
	config
	ctx                        *QueryContext
	order                      []station.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.Station
	withGuardian               *GuardianQuery
	withBus                    *BusQuery
	withMorningPreviousStation *StationQuery
	withMorningNextStation     *StationQuery
	withEveningPreviousStation *StationQuery
	withEveningNextStation     *StationQuery
	withDestinationForBuses    *BusQuery
	withMorningFirstForBuses   *BusQuery
	withEveningFirstForBuses   *BusQuery
	withFKs                    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StationQuery builder.
func (sq *StationQuery) Where(ps ...predicate.Station) *StationQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *StationQuery) Limit(limit int) *StationQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *StationQuery) Offset(offset int) *StationQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *StationQuery) Unique(unique bool) *StationQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *StationQuery) Order(o ...station.OrderOption) *StationQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryGuardian chains the current query on the "guardian" edge.
func (sq *StationQuery) QueryGuardian() *GuardianQuery {
	query := (&GuardianClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, selector),
			sqlgraph.To(guardian.Table, guardian.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, station.GuardianTable, station.GuardianColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBus chains the current query on the "bus" edge.
func (sq *StationQuery) QueryBus() *BusQuery {
	query := (&BusClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, selector),
			sqlgraph.To(bus.Table, bus.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, station.BusTable, station.BusPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMorningPreviousStation chains the current query on the "morning_previous_station" edge.
func (sq *StationQuery) QueryMorningPreviousStation() *StationQuery {
	query := (&StationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, selector),
			sqlgraph.To(station.Table, station.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, station.MorningPreviousStationTable, station.MorningPreviousStationColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMorningNextStation chains the current query on the "morning_next_station" edge.
func (sq *StationQuery) QueryMorningNextStation() *StationQuery {
	query := (&StationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, selector),
			sqlgraph.To(station.Table, station.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, station.MorningNextStationTable, station.MorningNextStationColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEveningPreviousStation chains the current query on the "evening_previous_station" edge.
func (sq *StationQuery) QueryEveningPreviousStation() *StationQuery {
	query := (&StationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, selector),
			sqlgraph.To(station.Table, station.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, station.EveningPreviousStationTable, station.EveningPreviousStationColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEveningNextStation chains the current query on the "evening_next_station" edge.
func (sq *StationQuery) QueryEveningNextStation() *StationQuery {
	query := (&StationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, selector),
			sqlgraph.To(station.Table, station.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, station.EveningNextStationTable, station.EveningNextStationColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDestinationForBuses chains the current query on the "destination_for_buses" edge.
func (sq *StationQuery) QueryDestinationForBuses() *BusQuery {
	query := (&BusClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, selector),
			sqlgraph.To(bus.Table, bus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, station.DestinationForBusesTable, station.DestinationForBusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMorningFirstForBuses chains the current query on the "morning_first_for_buses" edge.
func (sq *StationQuery) QueryMorningFirstForBuses() *BusQuery {
	query := (&BusClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, selector),
			sqlgraph.To(bus.Table, bus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, station.MorningFirstForBusesTable, station.MorningFirstForBusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEveningFirstForBuses chains the current query on the "evening_first_for_buses" edge.
func (sq *StationQuery) QueryEveningFirstForBuses() *BusQuery {
	query := (&BusClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(station.Table, station.FieldID, selector),
			sqlgraph.To(bus.Table, bus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, station.EveningFirstForBusesTable, station.EveningFirstForBusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Station entity from the query.
// Returns a *NotFoundError when no Station was found.
func (sq *StationQuery) First(ctx context.Context) (*Station, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{station.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *StationQuery) FirstX(ctx context.Context) *Station {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Station ID from the query.
// Returns a *NotFoundError when no Station ID was found.
func (sq *StationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{station.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *StationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Station entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Station entity is found.
// Returns a *NotFoundError when no Station entities are found.
func (sq *StationQuery) Only(ctx context.Context) (*Station, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{station.Label}
	default:
		return nil, &NotSingularError{station.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *StationQuery) OnlyX(ctx context.Context) *Station {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Station ID in the query.
// Returns a *NotSingularError when more than one Station ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *StationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{station.Label}
	default:
		err = &NotSingularError{station.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *StationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Stations.
func (sq *StationQuery) All(ctx context.Context) ([]*Station, error) {
	ctx = setContextOp(ctx, sq.ctx, "All")
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Station, *StationQuery]()
	return withInterceptors[[]*Station](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *StationQuery) AllX(ctx context.Context) []*Station {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Station IDs.
func (sq *StationQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, "IDs")
	if err = sq.Select(station.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *StationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *StationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, "Count")
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*StationQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *StationQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *StationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, "Exist")
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *StationQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *StationQuery) Clone() *StationQuery {
	if sq == nil {
		return nil
	}
	return &StationQuery{
		config:                     sq.config,
		ctx:                        sq.ctx.Clone(),
		order:                      append([]station.OrderOption{}, sq.order...),
		inters:                     append([]Interceptor{}, sq.inters...),
		predicates:                 append([]predicate.Station{}, sq.predicates...),
		withGuardian:               sq.withGuardian.Clone(),
		withBus:                    sq.withBus.Clone(),
		withMorningPreviousStation: sq.withMorningPreviousStation.Clone(),
		withMorningNextStation:     sq.withMorningNextStation.Clone(),
		withEveningPreviousStation: sq.withEveningPreviousStation.Clone(),
		withEveningNextStation:     sq.withEveningNextStation.Clone(),
		withDestinationForBuses:    sq.withDestinationForBuses.Clone(),
		withMorningFirstForBuses:   sq.withMorningFirstForBuses.Clone(),
		withEveningFirstForBuses:   sq.withEveningFirstForBuses.Clone(),
		// clone intermediate query.
		sql:  sq.sql.Clone(),
		path: sq.path,
	}
}

// WithGuardian tells the query-builder to eager-load the nodes that are connected to
// the "guardian" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StationQuery) WithGuardian(opts ...func(*GuardianQuery)) *StationQuery {
	query := (&GuardianClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withGuardian = query
	return sq
}

// WithBus tells the query-builder to eager-load the nodes that are connected to
// the "bus" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StationQuery) WithBus(opts ...func(*BusQuery)) *StationQuery {
	query := (&BusClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withBus = query
	return sq
}

// WithMorningPreviousStation tells the query-builder to eager-load the nodes that are connected to
// the "morning_previous_station" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StationQuery) WithMorningPreviousStation(opts ...func(*StationQuery)) *StationQuery {
	query := (&StationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withMorningPreviousStation = query
	return sq
}

// WithMorningNextStation tells the query-builder to eager-load the nodes that are connected to
// the "morning_next_station" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StationQuery) WithMorningNextStation(opts ...func(*StationQuery)) *StationQuery {
	query := (&StationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withMorningNextStation = query
	return sq
}

// WithEveningPreviousStation tells the query-builder to eager-load the nodes that are connected to
// the "evening_previous_station" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StationQuery) WithEveningPreviousStation(opts ...func(*StationQuery)) *StationQuery {
	query := (&StationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withEveningPreviousStation = query
	return sq
}

// WithEveningNextStation tells the query-builder to eager-load the nodes that are connected to
// the "evening_next_station" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StationQuery) WithEveningNextStation(opts ...func(*StationQuery)) *StationQuery {
	query := (&StationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withEveningNextStation = query
	return sq
}

// WithDestinationForBuses tells the query-builder to eager-load the nodes that are connected to
// the "destination_for_buses" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StationQuery) WithDestinationForBuses(opts ...func(*BusQuery)) *StationQuery {
	query := (&BusClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withDestinationForBuses = query
	return sq
}

// WithMorningFirstForBuses tells the query-builder to eager-load the nodes that are connected to
// the "morning_first_for_buses" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StationQuery) WithMorningFirstForBuses(opts ...func(*BusQuery)) *StationQuery {
	query := (&BusClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withMorningFirstForBuses = query
	return sq
}

// WithEveningFirstForBuses tells the query-builder to eager-load the nodes that are connected to
// the "evening_first_for_buses" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StationQuery) WithEveningFirstForBuses(opts ...func(*BusQuery)) *StationQuery {
	query := (&BusClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withEveningFirstForBuses = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Latitude float64 `json:"latitude,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Station.Query().
//		GroupBy(station.FieldLatitude).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *StationQuery) GroupBy(field string, fields ...string) *StationGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &StationGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = station.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Latitude float64 `json:"latitude,omitempty"`
//	}
//
//	client.Station.Query().
//		Select(station.FieldLatitude).
//		Scan(ctx, &v)
func (sq *StationQuery) Select(fields ...string) *StationSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &StationSelect{StationQuery: sq}
	sbuild.label = station.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a StationSelect configured with the given aggregations.
func (sq *StationQuery) Aggregate(fns ...AggregateFunc) *StationSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *StationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !station.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *StationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Station, error) {
	var (
		nodes       = []*Station{}
		withFKs     = sq.withFKs
		_spec       = sq.querySpec()
		loadedTypes = [9]bool{
			sq.withGuardian != nil,
			sq.withBus != nil,
			sq.withMorningPreviousStation != nil,
			sq.withMorningNextStation != nil,
			sq.withEveningPreviousStation != nil,
			sq.withEveningNextStation != nil,
			sq.withDestinationForBuses != nil,
			sq.withMorningFirstForBuses != nil,
			sq.withEveningFirstForBuses != nil,
		}
	)
	if sq.withGuardian != nil || sq.withMorningPreviousStation != nil || sq.withEveningPreviousStation != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, station.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Station).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Station{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withGuardian; query != nil {
		if err := sq.loadGuardian(ctx, query, nodes, nil,
			func(n *Station, e *Guardian) { n.Edges.Guardian = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withBus; query != nil {
		if err := sq.loadBus(ctx, query, nodes,
			func(n *Station) { n.Edges.Bus = []*Bus{} },
			func(n *Station, e *Bus) { n.Edges.Bus = append(n.Edges.Bus, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withMorningPreviousStation; query != nil {
		if err := sq.loadMorningPreviousStation(ctx, query, nodes, nil,
			func(n *Station, e *Station) { n.Edges.MorningPreviousStation = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withMorningNextStation; query != nil {
		if err := sq.loadMorningNextStation(ctx, query, nodes,
			func(n *Station) { n.Edges.MorningNextStation = []*Station{} },
			func(n *Station, e *Station) { n.Edges.MorningNextStation = append(n.Edges.MorningNextStation, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withEveningPreviousStation; query != nil {
		if err := sq.loadEveningPreviousStation(ctx, query, nodes, nil,
			func(n *Station, e *Station) { n.Edges.EveningPreviousStation = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withEveningNextStation; query != nil {
		if err := sq.loadEveningNextStation(ctx, query, nodes,
			func(n *Station) { n.Edges.EveningNextStation = []*Station{} },
			func(n *Station, e *Station) { n.Edges.EveningNextStation = append(n.Edges.EveningNextStation, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withDestinationForBuses; query != nil {
		if err := sq.loadDestinationForBuses(ctx, query, nodes,
			func(n *Station) { n.Edges.DestinationForBuses = []*Bus{} },
			func(n *Station, e *Bus) { n.Edges.DestinationForBuses = append(n.Edges.DestinationForBuses, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withMorningFirstForBuses; query != nil {
		if err := sq.loadMorningFirstForBuses(ctx, query, nodes,
			func(n *Station) { n.Edges.MorningFirstForBuses = []*Bus{} },
			func(n *Station, e *Bus) { n.Edges.MorningFirstForBuses = append(n.Edges.MorningFirstForBuses, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withEveningFirstForBuses; query != nil {
		if err := sq.loadEveningFirstForBuses(ctx, query, nodes,
			func(n *Station) { n.Edges.EveningFirstForBuses = []*Bus{} },
			func(n *Station, e *Bus) { n.Edges.EveningFirstForBuses = append(n.Edges.EveningFirstForBuses, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *StationQuery) loadGuardian(ctx context.Context, query *GuardianQuery, nodes []*Station, init func(*Station), assign func(*Station, *Guardian)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Station)
	for i := range nodes {
		if nodes[i].guardian_station == nil {
			continue
		}
		fk := *nodes[i].guardian_station
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(guardian.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "guardian_station" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *StationQuery) loadBus(ctx context.Context, query *BusQuery, nodes []*Station, init func(*Station), assign func(*Station, *Bus)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Station)
	nids := make(map[uuid.UUID]map[*Station]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(station.BusTable)
		s.Join(joinT).On(s.C(bus.FieldID), joinT.C(station.BusPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(station.BusPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(station.BusPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Station]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Bus](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "bus" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *StationQuery) loadMorningPreviousStation(ctx context.Context, query *StationQuery, nodes []*Station, init func(*Station), assign func(*Station, *Station)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Station)
	for i := range nodes {
		if nodes[i].station_morning_next_station == nil {
			continue
		}
		fk := *nodes[i].station_morning_next_station
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(station.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "station_morning_next_station" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *StationQuery) loadMorningNextStation(ctx context.Context, query *StationQuery, nodes []*Station, init func(*Station), assign func(*Station, *Station)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Station)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Station(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(station.MorningNextStationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.station_morning_next_station
		if fk == nil {
			return fmt.Errorf(`foreign-key "station_morning_next_station" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "station_morning_next_station" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *StationQuery) loadEveningPreviousStation(ctx context.Context, query *StationQuery, nodes []*Station, init func(*Station), assign func(*Station, *Station)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Station)
	for i := range nodes {
		if nodes[i].station_evening_next_station == nil {
			continue
		}
		fk := *nodes[i].station_evening_next_station
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(station.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "station_evening_next_station" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *StationQuery) loadEveningNextStation(ctx context.Context, query *StationQuery, nodes []*Station, init func(*Station), assign func(*Station, *Station)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Station)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Station(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(station.EveningNextStationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.station_evening_next_station
		if fk == nil {
			return fmt.Errorf(`foreign-key "station_evening_next_station" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "station_evening_next_station" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *StationQuery) loadDestinationForBuses(ctx context.Context, query *BusQuery, nodes []*Station, init func(*Station), assign func(*Station, *Bus)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Station)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Bus(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(station.DestinationForBusesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.bus_destination_station
		if fk == nil {
			return fmt.Errorf(`foreign-key "bus_destination_station" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "bus_destination_station" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *StationQuery) loadMorningFirstForBuses(ctx context.Context, query *BusQuery, nodes []*Station, init func(*Station), assign func(*Station, *Bus)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Station)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Bus(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(station.MorningFirstForBusesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.bus_morning_first_station
		if fk == nil {
			return fmt.Errorf(`foreign-key "bus_morning_first_station" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "bus_morning_first_station" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *StationQuery) loadEveningFirstForBuses(ctx context.Context, query *BusQuery, nodes []*Station, init func(*Station), assign func(*Station, *Bus)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Station)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Bus(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(station.EveningFirstForBusesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.bus_evening_first_station
		if fk == nil {
			return fmt.Errorf(`foreign-key "bus_evening_first_station" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "bus_evening_first_station" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sq *StationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *StationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(station.Table, station.Columns, sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, station.FieldID)
		for i := range fields {
			if fields[i] != station.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *StationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(station.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = station.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// StationGroupBy is the group-by builder for Station entities.
type StationGroupBy struct {
	selector
	build *StationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *StationGroupBy) Aggregate(fns ...AggregateFunc) *StationGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *StationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, "GroupBy")
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StationQuery, *StationGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *StationGroupBy) sqlScan(ctx context.Context, root *StationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// StationSelect is the builder for selecting fields of Station entities.
type StationSelect struct {
	*StationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *StationSelect) Aggregate(fns ...AggregateFunc) *StationSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *StationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, "Select")
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StationQuery, *StationSelect](ctx, ss.StationQuery, ss, ss.inters, v)
}

func (ss *StationSelect) sqlScan(ctx context.Context, root *StationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
