// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/bus"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/guardian"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/station"
	"github.com/google/uuid"
)

// StationCreate is the builder for creating a Station entity.
type StationCreate struct {
	config
	mutation *StationMutation
	hooks    []Hook
}

// SetLatitude sets the "latitude" field.
func (sc *StationCreate) SetLatitude(f float64) *StationCreate {
	sc.mutation.SetLatitude(f)
	return sc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (sc *StationCreate) SetNillableLatitude(f *float64) *StationCreate {
	if f != nil {
		sc.SetLatitude(*f)
	}
	return sc
}

// SetLongitude sets the "longitude" field.
func (sc *StationCreate) SetLongitude(f float64) *StationCreate {
	sc.mutation.SetLongitude(f)
	return sc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (sc *StationCreate) SetNillableLongitude(f *float64) *StationCreate {
	if f != nil {
		sc.SetLongitude(*f)
	}
	return sc
}

// SetMorningOrder sets the "morning_order" field.
func (sc *StationCreate) SetMorningOrder(i int) *StationCreate {
	sc.mutation.SetMorningOrder(i)
	return sc
}

// SetAfternoonOrder sets the "afternoon_order" field.
func (sc *StationCreate) SetAfternoonOrder(i int) *StationCreate {
	sc.mutation.SetAfternoonOrder(i)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *StationCreate) SetCreatedAt(t time.Time) *StationCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StationCreate) SetNillableCreatedAt(t *time.Time) *StationCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StationCreate) SetUpdatedAt(t time.Time) *StationCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StationCreate) SetNillableUpdatedAt(t *time.Time) *StationCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StationCreate) SetID(u uuid.UUID) *StationCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *StationCreate) SetNillableID(u *uuid.UUID) *StationCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetGuardianID sets the "guardian" edge to the Guardian entity by ID.
func (sc *StationCreate) SetGuardianID(id uuid.UUID) *StationCreate {
	sc.mutation.SetGuardianID(id)
	return sc
}

// SetNillableGuardianID sets the "guardian" edge to the Guardian entity by ID if the given value is not nil.
func (sc *StationCreate) SetNillableGuardianID(id *uuid.UUID) *StationCreate {
	if id != nil {
		sc = sc.SetGuardianID(*id)
	}
	return sc
}

// SetGuardian sets the "guardian" edge to the Guardian entity.
func (sc *StationCreate) SetGuardian(g *Guardian) *StationCreate {
	return sc.SetGuardianID(g.ID)
}

// AddBuIDs adds the "bus" edge to the Bus entity by IDs.
func (sc *StationCreate) AddBuIDs(ids ...uuid.UUID) *StationCreate {
	sc.mutation.AddBuIDs(ids...)
	return sc
}

// AddBus adds the "bus" edges to the Bus entity.
func (sc *StationCreate) AddBus(b ...*Bus) *StationCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return sc.AddBuIDs(ids...)
}

// Mutation returns the StationMutation object of the builder.
func (sc *StationCreate) Mutation() *StationMutation {
	return sc.mutation
}

// Save creates the Station in the database.
func (sc *StationCreate) Save(ctx context.Context) (*Station, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StationCreate) SaveX(ctx context.Context) *Station {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StationCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StationCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StationCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := station.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := station.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := station.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StationCreate) check() error {
	if _, ok := sc.mutation.MorningOrder(); !ok {
		return &ValidationError{Name: "morning_order", err: errors.New(`ent: missing required field "Station.morning_order"`)}
	}
	if _, ok := sc.mutation.AfternoonOrder(); !ok {
		return &ValidationError{Name: "afternoon_order", err: errors.New(`ent: missing required field "Station.afternoon_order"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Station.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Station.updated_at"`)}
	}
	return nil
}

func (sc *StationCreate) sqlSave(ctx context.Context) (*Station, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StationCreate) createSpec() (*Station, *sqlgraph.CreateSpec) {
	var (
		_node = &Station{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(station.Table, sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Latitude(); ok {
		_spec.SetField(station.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := sc.mutation.Longitude(); ok {
		_spec.SetField(station.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := sc.mutation.MorningOrder(); ok {
		_spec.SetField(station.FieldMorningOrder, field.TypeInt, value)
		_node.MorningOrder = value
	}
	if value, ok := sc.mutation.AfternoonOrder(); ok {
		_spec.SetField(station.FieldAfternoonOrder, field.TypeInt, value)
		_node.AfternoonOrder = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(station.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(station.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.GuardianIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   station.GuardianTable,
			Columns: []string{station.GuardianColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.guardian_station = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.BusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   station.BusTable,
			Columns: station.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StationCreateBulk is the builder for creating many Station entities in bulk.
type StationCreateBulk struct {
	config
	err      error
	builders []*StationCreate
}

// Save creates the Station entities in the database.
func (scb *StationCreateBulk) Save(ctx context.Context) ([]*Station, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Station, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StationCreateBulk) SaveX(ctx context.Context) []*Station {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StationCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StationCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
