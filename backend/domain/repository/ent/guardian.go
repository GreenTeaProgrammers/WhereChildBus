// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/guardian"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/nursery"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/station"
	"github.com/google/uuid"
)

// Guardian is the model entity for the Guardian schema.
type Guardian struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// HashedPassword holds the value of the "hashed_password" field.
	HashedPassword string `json:"hashed_password,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GuardianQuery when eager-loading is set.
	Edges            GuardianEdges `json:"edges"`
	guardian_nursery *uuid.UUID
	selectValues     sql.SelectValues
}

// GuardianEdges holds the relations/edges for other nodes in the graph.
type GuardianEdges struct {
	// Children holds the value of the children edge.
	Children []*Child `json:"children,omitempty"`
	// Nursery holds the value of the nursery edge.
	Nursery *Nursery `json:"nursery,omitempty"`
	// Station holds the value of the station edge.
	Station *Station `json:"station,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e GuardianEdges) ChildrenOrErr() ([]*Child, error) {
	if e.loadedTypes[0] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// NurseryOrErr returns the Nursery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuardianEdges) NurseryOrErr() (*Nursery, error) {
	if e.loadedTypes[1] {
		if e.Nursery == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: nursery.Label}
		}
		return e.Nursery, nil
	}
	return nil, &NotLoadedError{edge: "nursery"}
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuardianEdges) StationOrErr() (*Station, error) {
	if e.loadedTypes[2] {
		if e.Station == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: station.Label}
		}
		return e.Station, nil
	}
	return nil, &NotLoadedError{edge: "station"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Guardian) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case guardian.FieldEmail, guardian.FieldHashedPassword, guardian.FieldName, guardian.FieldPhoneNumber:
			values[i] = new(sql.NullString)
		case guardian.FieldCreatedAt, guardian.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case guardian.FieldID:
			values[i] = new(uuid.UUID)
		case guardian.ForeignKeys[0]: // guardian_nursery
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Guardian fields.
func (gu *Guardian) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case guardian.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gu.ID = *value
			}
		case guardian.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				gu.Email = value.String
			}
		case guardian.FieldHashedPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_password", values[i])
			} else if value.Valid {
				gu.HashedPassword = value.String
			}
		case guardian.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gu.Name = value.String
			}
		case guardian.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				gu.PhoneNumber = value.String
			}
		case guardian.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gu.CreatedAt = value.Time
			}
		case guardian.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gu.UpdatedAt = value.Time
			}
		case guardian.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field guardian_nursery", values[i])
			} else if value.Valid {
				gu.guardian_nursery = new(uuid.UUID)
				*gu.guardian_nursery = *value.S.(*uuid.UUID)
			}
		default:
			gu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Guardian.
// This includes values selected through modifiers, order, etc.
func (gu *Guardian) Value(name string) (ent.Value, error) {
	return gu.selectValues.Get(name)
}

// QueryChildren queries the "children" edge of the Guardian entity.
func (gu *Guardian) QueryChildren() *ChildQuery {
	return NewGuardianClient(gu.config).QueryChildren(gu)
}

// QueryNursery queries the "nursery" edge of the Guardian entity.
func (gu *Guardian) QueryNursery() *NurseryQuery {
	return NewGuardianClient(gu.config).QueryNursery(gu)
}

// QueryStation queries the "station" edge of the Guardian entity.
func (gu *Guardian) QueryStation() *StationQuery {
	return NewGuardianClient(gu.config).QueryStation(gu)
}

// Update returns a builder for updating this Guardian.
// Note that you need to call Guardian.Unwrap() before calling this method if this Guardian
// was returned from a transaction, and the transaction was committed or rolled back.
func (gu *Guardian) Update() *GuardianUpdateOne {
	return NewGuardianClient(gu.config).UpdateOne(gu)
}

// Unwrap unwraps the Guardian entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gu *Guardian) Unwrap() *Guardian {
	_tx, ok := gu.config.driver.(*txDriver)
	if !ok {
		panic("ent: Guardian is not a transactional entity")
	}
	gu.config.driver = _tx.drv
	return gu
}

// String implements the fmt.Stringer.
func (gu *Guardian) String() string {
	var builder strings.Builder
	builder.WriteString("Guardian(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gu.ID))
	builder.WriteString("email=")
	builder.WriteString(gu.Email)
	builder.WriteString(", ")
	builder.WriteString("hashed_password=")
	builder.WriteString(gu.HashedPassword)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gu.Name)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(gu.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gu.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Guardians is a parsable slice of Guardian.
type Guardians []*Guardian
