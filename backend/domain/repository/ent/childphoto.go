// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/child"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/childphoto"
	"github.com/google/uuid"
)

// ChildPhoto is the model entity for the ChildPhoto schema.
type ChildPhoto struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// レコードの作成日時
	CreatedAt time.Time `json:"created_at,omitempty"`
	// レコードの最終更新日時
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChildPhotoQuery when eager-loading is set.
	Edges        ChildPhotoEdges `json:"edges"`
	child_photos *uuid.UUID
	selectValues sql.SelectValues
}

// ChildPhotoEdges holds the relations/edges for other nodes in the graph.
type ChildPhotoEdges struct {
	// Child holds the value of the child edge.
	Child *Child `json:"child,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChildOrErr returns the Child value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChildPhotoEdges) ChildOrErr() (*Child, error) {
	if e.loadedTypes[0] {
		if e.Child == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: child.Label}
		}
		return e.Child, nil
	}
	return nil, &NotLoadedError{edge: "child"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChildPhoto) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case childphoto.FieldCreatedAt, childphoto.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case childphoto.FieldID:
			values[i] = new(uuid.UUID)
		case childphoto.ForeignKeys[0]: // child_photos
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChildPhoto fields.
func (cp *ChildPhoto) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case childphoto.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cp.ID = *value
			}
		case childphoto.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cp.CreatedAt = value.Time
			}
		case childphoto.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cp.UpdatedAt = value.Time
			}
		case childphoto.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field child_photos", values[i])
			} else if value.Valid {
				cp.child_photos = new(uuid.UUID)
				*cp.child_photos = *value.S.(*uuid.UUID)
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChildPhoto.
// This includes values selected through modifiers, order, etc.
func (cp *ChildPhoto) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// QueryChild queries the "child" edge of the ChildPhoto entity.
func (cp *ChildPhoto) QueryChild() *ChildQuery {
	return NewChildPhotoClient(cp.config).QueryChild(cp)
}

// Update returns a builder for updating this ChildPhoto.
// Note that you need to call ChildPhoto.Unwrap() before calling this method if this ChildPhoto
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *ChildPhoto) Update() *ChildPhotoUpdateOne {
	return NewChildPhotoClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the ChildPhoto entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *ChildPhoto) Unwrap() *ChildPhoto {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChildPhoto is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *ChildPhoto) String() string {
	var builder strings.Builder
	builder.WriteString("ChildPhoto(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChildPhotos is a parsable slice of ChildPhoto.
type ChildPhotos []*ChildPhoto
