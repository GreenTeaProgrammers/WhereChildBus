// Code generated by ent, DO NOT EDIT.

package busrouteassociation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the busrouteassociation type in the database.
	Label = "bus_route_association"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldBusRouteID holds the string denoting the bus_route_id field in the database.
	FieldBusRouteID = "bus_route_id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgeBusRoute holds the string denoting the busroute edge name in mutations.
	EdgeBusRoute = "busRoute"
	// Table holds the table name of the busrouteassociation in the database.
	Table = "bus_route_associations"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "bus_route_associations"
	// StationInverseTable is the table name for the Station entity.
	// It exists in this package in order to avoid circular dependency with the "station" package.
	StationInverseTable = "stations"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_id"
	// BusRouteTable is the table that holds the busRoute relation/edge.
	BusRouteTable = "bus_route_associations"
	// BusRouteInverseTable is the table name for the BusRoute entity.
	// It exists in this package in order to avoid circular dependency with the "busroute" package.
	BusRouteInverseTable = "bus_routes"
	// BusRouteColumn is the table column denoting the busRoute relation/edge.
	BusRouteColumn = "bus_route_id"
)

// Columns holds all SQL columns for busrouteassociation fields.
var Columns = []string{
	FieldID,
	FieldStationID,
	FieldBusRouteID,
	FieldOrder,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the BusRouteAssociation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStationID orders the results by the station_id field.
func ByStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStationID, opts...).ToFunc()
}

// ByBusRouteID orders the results by the bus_route_id field.
func ByBusRouteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusRouteID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByStationField orders the results by station field.
func ByStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStationStep(), sql.OrderByField(field, opts...))
	}
}

// ByBusRouteField orders the results by busRoute field.
func ByBusRouteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusRouteStep(), sql.OrderByField(field, opts...))
	}
}
func newStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StationTable, StationColumn),
	)
}
func newBusRouteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusRouteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BusRouteTable, BusRouteColumn),
	)
}
