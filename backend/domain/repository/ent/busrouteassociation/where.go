// Code generated by ent, DO NOT EDIT.

package busrouteassociation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldLTE(FieldID, id))
}

// StationID applies equality check predicate on the "station_id" field. It's identical to StationIDEQ.
func StationID(v uuid.UUID) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldEQ(FieldStationID, v))
}

// BusRouteID applies equality check predicate on the "bus_route_id" field. It's identical to BusRouteIDEQ.
func BusRouteID(v uuid.UUID) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldEQ(FieldBusRouteID, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int32) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldEQ(FieldOrder, v))
}

// StationIDEQ applies the EQ predicate on the "station_id" field.
func StationIDEQ(v uuid.UUID) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldEQ(FieldStationID, v))
}

// StationIDNEQ applies the NEQ predicate on the "station_id" field.
func StationIDNEQ(v uuid.UUID) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldNEQ(FieldStationID, v))
}

// StationIDIn applies the In predicate on the "station_id" field.
func StationIDIn(vs ...uuid.UUID) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldIn(FieldStationID, vs...))
}

// StationIDNotIn applies the NotIn predicate on the "station_id" field.
func StationIDNotIn(vs ...uuid.UUID) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldNotIn(FieldStationID, vs...))
}

// BusRouteIDEQ applies the EQ predicate on the "bus_route_id" field.
func BusRouteIDEQ(v uuid.UUID) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldEQ(FieldBusRouteID, v))
}

// BusRouteIDNEQ applies the NEQ predicate on the "bus_route_id" field.
func BusRouteIDNEQ(v uuid.UUID) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldNEQ(FieldBusRouteID, v))
}

// BusRouteIDIn applies the In predicate on the "bus_route_id" field.
func BusRouteIDIn(vs ...uuid.UUID) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldIn(FieldBusRouteID, vs...))
}

// BusRouteIDNotIn applies the NotIn predicate on the "bus_route_id" field.
func BusRouteIDNotIn(vs ...uuid.UUID) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldNotIn(FieldBusRouteID, vs...))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int32) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int32) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int32) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int32) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int32) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int32) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int32) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int32) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.FieldLTE(FieldOrder, v))
}

// HasStation applies the HasEdge predicate on the "station" edge.
func HasStation() predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StationTable, StationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationWith applies the HasEdge predicate on the "station" edge with a given conditions (other predicates).
func HasStationWith(preds ...predicate.Station) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(func(s *sql.Selector) {
		step := newStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusRoute applies the HasEdge predicate on the "busRoute" edge.
func HasBusRoute() predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BusRouteTable, BusRouteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusRouteWith applies the HasEdge predicate on the "busRoute" edge with a given conditions (other predicates).
func HasBusRouteWith(preds ...predicate.BusRoute) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(func(s *sql.Selector) {
		step := newBusRouteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BusRouteAssociation) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BusRouteAssociation) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BusRouteAssociation) predicate.BusRouteAssociation {
	return predicate.BusRouteAssociation(sql.NotPredicates(p))
}
