// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busroute"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busrouteassociation"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/station"
	"github.com/google/uuid"
)

// BusRouteAssociationQuery is the builder for querying BusRouteAssociation entities.
type BusRouteAssociationQuery struct {
	config
	ctx          *QueryContext
	order        []busrouteassociation.OrderOption
	inters       []Interceptor
	predicates   []predicate.BusRouteAssociation
	withStation  *StationQuery
	withBusRoute *BusRouteQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BusRouteAssociationQuery builder.
func (braq *BusRouteAssociationQuery) Where(ps ...predicate.BusRouteAssociation) *BusRouteAssociationQuery {
	braq.predicates = append(braq.predicates, ps...)
	return braq
}

// Limit the number of records to be returned by this query.
func (braq *BusRouteAssociationQuery) Limit(limit int) *BusRouteAssociationQuery {
	braq.ctx.Limit = &limit
	return braq
}

// Offset to start from.
func (braq *BusRouteAssociationQuery) Offset(offset int) *BusRouteAssociationQuery {
	braq.ctx.Offset = &offset
	return braq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (braq *BusRouteAssociationQuery) Unique(unique bool) *BusRouteAssociationQuery {
	braq.ctx.Unique = &unique
	return braq
}

// Order specifies how the records should be ordered.
func (braq *BusRouteAssociationQuery) Order(o ...busrouteassociation.OrderOption) *BusRouteAssociationQuery {
	braq.order = append(braq.order, o...)
	return braq
}

// QueryStation chains the current query on the "station" edge.
func (braq *BusRouteAssociationQuery) QueryStation() *StationQuery {
	query := (&StationClient{config: braq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := braq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := braq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(busrouteassociation.Table, busrouteassociation.FieldID, selector),
			sqlgraph.To(station.Table, station.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, busrouteassociation.StationTable, busrouteassociation.StationColumn),
		)
		fromU = sqlgraph.SetNeighbors(braq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBusRoute chains the current query on the "busRoute" edge.
func (braq *BusRouteAssociationQuery) QueryBusRoute() *BusRouteQuery {
	query := (&BusRouteClient{config: braq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := braq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := braq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(busrouteassociation.Table, busrouteassociation.FieldID, selector),
			sqlgraph.To(busroute.Table, busroute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, busrouteassociation.BusRouteTable, busrouteassociation.BusRouteColumn),
		)
		fromU = sqlgraph.SetNeighbors(braq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BusRouteAssociation entity from the query.
// Returns a *NotFoundError when no BusRouteAssociation was found.
func (braq *BusRouteAssociationQuery) First(ctx context.Context) (*BusRouteAssociation, error) {
	nodes, err := braq.Limit(1).All(setContextOp(ctx, braq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{busrouteassociation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (braq *BusRouteAssociationQuery) FirstX(ctx context.Context) *BusRouteAssociation {
	node, err := braq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BusRouteAssociation ID from the query.
// Returns a *NotFoundError when no BusRouteAssociation ID was found.
func (braq *BusRouteAssociationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = braq.Limit(1).IDs(setContextOp(ctx, braq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{busrouteassociation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (braq *BusRouteAssociationQuery) FirstIDX(ctx context.Context) int {
	id, err := braq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BusRouteAssociation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BusRouteAssociation entity is found.
// Returns a *NotFoundError when no BusRouteAssociation entities are found.
func (braq *BusRouteAssociationQuery) Only(ctx context.Context) (*BusRouteAssociation, error) {
	nodes, err := braq.Limit(2).All(setContextOp(ctx, braq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{busrouteassociation.Label}
	default:
		return nil, &NotSingularError{busrouteassociation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (braq *BusRouteAssociationQuery) OnlyX(ctx context.Context) *BusRouteAssociation {
	node, err := braq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BusRouteAssociation ID in the query.
// Returns a *NotSingularError when more than one BusRouteAssociation ID is found.
// Returns a *NotFoundError when no entities are found.
func (braq *BusRouteAssociationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = braq.Limit(2).IDs(setContextOp(ctx, braq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{busrouteassociation.Label}
	default:
		err = &NotSingularError{busrouteassociation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (braq *BusRouteAssociationQuery) OnlyIDX(ctx context.Context) int {
	id, err := braq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BusRouteAssociations.
func (braq *BusRouteAssociationQuery) All(ctx context.Context) ([]*BusRouteAssociation, error) {
	ctx = setContextOp(ctx, braq.ctx, "All")
	if err := braq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BusRouteAssociation, *BusRouteAssociationQuery]()
	return withInterceptors[[]*BusRouteAssociation](ctx, braq, qr, braq.inters)
}

// AllX is like All, but panics if an error occurs.
func (braq *BusRouteAssociationQuery) AllX(ctx context.Context) []*BusRouteAssociation {
	nodes, err := braq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BusRouteAssociation IDs.
func (braq *BusRouteAssociationQuery) IDs(ctx context.Context) (ids []int, err error) {
	if braq.ctx.Unique == nil && braq.path != nil {
		braq.Unique(true)
	}
	ctx = setContextOp(ctx, braq.ctx, "IDs")
	if err = braq.Select(busrouteassociation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (braq *BusRouteAssociationQuery) IDsX(ctx context.Context) []int {
	ids, err := braq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (braq *BusRouteAssociationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, braq.ctx, "Count")
	if err := braq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, braq, querierCount[*BusRouteAssociationQuery](), braq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (braq *BusRouteAssociationQuery) CountX(ctx context.Context) int {
	count, err := braq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (braq *BusRouteAssociationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, braq.ctx, "Exist")
	switch _, err := braq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (braq *BusRouteAssociationQuery) ExistX(ctx context.Context) bool {
	exist, err := braq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BusRouteAssociationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (braq *BusRouteAssociationQuery) Clone() *BusRouteAssociationQuery {
	if braq == nil {
		return nil
	}
	return &BusRouteAssociationQuery{
		config:       braq.config,
		ctx:          braq.ctx.Clone(),
		order:        append([]busrouteassociation.OrderOption{}, braq.order...),
		inters:       append([]Interceptor{}, braq.inters...),
		predicates:   append([]predicate.BusRouteAssociation{}, braq.predicates...),
		withStation:  braq.withStation.Clone(),
		withBusRoute: braq.withBusRoute.Clone(),
		// clone intermediate query.
		sql:  braq.sql.Clone(),
		path: braq.path,
	}
}

// WithStation tells the query-builder to eager-load the nodes that are connected to
// the "station" edge. The optional arguments are used to configure the query builder of the edge.
func (braq *BusRouteAssociationQuery) WithStation(opts ...func(*StationQuery)) *BusRouteAssociationQuery {
	query := (&StationClient{config: braq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	braq.withStation = query
	return braq
}

// WithBusRoute tells the query-builder to eager-load the nodes that are connected to
// the "busRoute" edge. The optional arguments are used to configure the query builder of the edge.
func (braq *BusRouteAssociationQuery) WithBusRoute(opts ...func(*BusRouteQuery)) *BusRouteAssociationQuery {
	query := (&BusRouteClient{config: braq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	braq.withBusRoute = query
	return braq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		StationID uuid.UUID `json:"station_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BusRouteAssociation.Query().
//		GroupBy(busrouteassociation.FieldStationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (braq *BusRouteAssociationQuery) GroupBy(field string, fields ...string) *BusRouteAssociationGroupBy {
	braq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BusRouteAssociationGroupBy{build: braq}
	grbuild.flds = &braq.ctx.Fields
	grbuild.label = busrouteassociation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		StationID uuid.UUID `json:"station_id,omitempty"`
//	}
//
//	client.BusRouteAssociation.Query().
//		Select(busrouteassociation.FieldStationID).
//		Scan(ctx, &v)
func (braq *BusRouteAssociationQuery) Select(fields ...string) *BusRouteAssociationSelect {
	braq.ctx.Fields = append(braq.ctx.Fields, fields...)
	sbuild := &BusRouteAssociationSelect{BusRouteAssociationQuery: braq}
	sbuild.label = busrouteassociation.Label
	sbuild.flds, sbuild.scan = &braq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BusRouteAssociationSelect configured with the given aggregations.
func (braq *BusRouteAssociationQuery) Aggregate(fns ...AggregateFunc) *BusRouteAssociationSelect {
	return braq.Select().Aggregate(fns...)
}

func (braq *BusRouteAssociationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range braq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, braq); err != nil {
				return err
			}
		}
	}
	for _, f := range braq.ctx.Fields {
		if !busrouteassociation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if braq.path != nil {
		prev, err := braq.path(ctx)
		if err != nil {
			return err
		}
		braq.sql = prev
	}
	return nil
}

func (braq *BusRouteAssociationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BusRouteAssociation, error) {
	var (
		nodes       = []*BusRouteAssociation{}
		_spec       = braq.querySpec()
		loadedTypes = [2]bool{
			braq.withStation != nil,
			braq.withBusRoute != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BusRouteAssociation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BusRouteAssociation{config: braq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, braq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := braq.withStation; query != nil {
		if err := braq.loadStation(ctx, query, nodes, nil,
			func(n *BusRouteAssociation, e *Station) { n.Edges.Station = e }); err != nil {
			return nil, err
		}
	}
	if query := braq.withBusRoute; query != nil {
		if err := braq.loadBusRoute(ctx, query, nodes, nil,
			func(n *BusRouteAssociation, e *BusRoute) { n.Edges.BusRoute = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (braq *BusRouteAssociationQuery) loadStation(ctx context.Context, query *StationQuery, nodes []*BusRouteAssociation, init func(*BusRouteAssociation), assign func(*BusRouteAssociation, *Station)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*BusRouteAssociation)
	for i := range nodes {
		fk := nodes[i].StationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(station.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "station_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (braq *BusRouteAssociationQuery) loadBusRoute(ctx context.Context, query *BusRouteQuery, nodes []*BusRouteAssociation, init func(*BusRouteAssociation), assign func(*BusRouteAssociation, *BusRoute)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*BusRouteAssociation)
	for i := range nodes {
		fk := nodes[i].BusRouteID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(busroute.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "bus_route_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (braq *BusRouteAssociationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := braq.querySpec()
	_spec.Node.Columns = braq.ctx.Fields
	if len(braq.ctx.Fields) > 0 {
		_spec.Unique = braq.ctx.Unique != nil && *braq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, braq.driver, _spec)
}

func (braq *BusRouteAssociationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(busrouteassociation.Table, busrouteassociation.Columns, sqlgraph.NewFieldSpec(busrouteassociation.FieldID, field.TypeInt))
	_spec.From = braq.sql
	if unique := braq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if braq.path != nil {
		_spec.Unique = true
	}
	if fields := braq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, busrouteassociation.FieldID)
		for i := range fields {
			if fields[i] != busrouteassociation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if braq.withStation != nil {
			_spec.Node.AddColumnOnce(busrouteassociation.FieldStationID)
		}
		if braq.withBusRoute != nil {
			_spec.Node.AddColumnOnce(busrouteassociation.FieldBusRouteID)
		}
	}
	if ps := braq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := braq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := braq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := braq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (braq *BusRouteAssociationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(braq.driver.Dialect())
	t1 := builder.Table(busrouteassociation.Table)
	columns := braq.ctx.Fields
	if len(columns) == 0 {
		columns = busrouteassociation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if braq.sql != nil {
		selector = braq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if braq.ctx.Unique != nil && *braq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range braq.predicates {
		p(selector)
	}
	for _, p := range braq.order {
		p(selector)
	}
	if offset := braq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := braq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BusRouteAssociationGroupBy is the group-by builder for BusRouteAssociation entities.
type BusRouteAssociationGroupBy struct {
	selector
	build *BusRouteAssociationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bragb *BusRouteAssociationGroupBy) Aggregate(fns ...AggregateFunc) *BusRouteAssociationGroupBy {
	bragb.fns = append(bragb.fns, fns...)
	return bragb
}

// Scan applies the selector query and scans the result into the given value.
func (bragb *BusRouteAssociationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bragb.build.ctx, "GroupBy")
	if err := bragb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusRouteAssociationQuery, *BusRouteAssociationGroupBy](ctx, bragb.build, bragb, bragb.build.inters, v)
}

func (bragb *BusRouteAssociationGroupBy) sqlScan(ctx context.Context, root *BusRouteAssociationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bragb.fns))
	for _, fn := range bragb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bragb.flds)+len(bragb.fns))
		for _, f := range *bragb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bragb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bragb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BusRouteAssociationSelect is the builder for selecting fields of BusRouteAssociation entities.
type BusRouteAssociationSelect struct {
	*BusRouteAssociationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bras *BusRouteAssociationSelect) Aggregate(fns ...AggregateFunc) *BusRouteAssociationSelect {
	bras.fns = append(bras.fns, fns...)
	return bras
}

// Scan applies the selector query and scans the result into the given value.
func (bras *BusRouteAssociationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bras.ctx, "Select")
	if err := bras.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusRouteAssociationQuery, *BusRouteAssociationSelect](ctx, bras.BusRouteAssociationQuery, bras, bras.inters, v)
}

func (bras *BusRouteAssociationSelect) sqlScan(ctx context.Context, root *BusRouteAssociationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bras.fns))
	for _, fn := range bras.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bras.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bras.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
