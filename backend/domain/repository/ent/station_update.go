// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/bus"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/guardian"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/predicate"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/station"
	"github.com/google/uuid"
)

// StationUpdate is the builder for updating Station entities.
type StationUpdate struct {
	config
	hooks    []Hook
	mutation *StationMutation
}

// Where appends a list predicates to the StationUpdate builder.
func (su *StationUpdate) Where(ps ...predicate.Station) *StationUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetLatitude sets the "latitude" field.
func (su *StationUpdate) SetLatitude(f float64) *StationUpdate {
	su.mutation.ResetLatitude()
	su.mutation.SetLatitude(f)
	return su
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (su *StationUpdate) SetNillableLatitude(f *float64) *StationUpdate {
	if f != nil {
		su.SetLatitude(*f)
	}
	return su
}

// AddLatitude adds f to the "latitude" field.
func (su *StationUpdate) AddLatitude(f float64) *StationUpdate {
	su.mutation.AddLatitude(f)
	return su
}

// ClearLatitude clears the value of the "latitude" field.
func (su *StationUpdate) ClearLatitude() *StationUpdate {
	su.mutation.ClearLatitude()
	return su
}

// SetLongitude sets the "longitude" field.
func (su *StationUpdate) SetLongitude(f float64) *StationUpdate {
	su.mutation.ResetLongitude()
	su.mutation.SetLongitude(f)
	return su
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (su *StationUpdate) SetNillableLongitude(f *float64) *StationUpdate {
	if f != nil {
		su.SetLongitude(*f)
	}
	return su
}

// AddLongitude adds f to the "longitude" field.
func (su *StationUpdate) AddLongitude(f float64) *StationUpdate {
	su.mutation.AddLongitude(f)
	return su
}

// ClearLongitude clears the value of the "longitude" field.
func (su *StationUpdate) ClearLongitude() *StationUpdate {
	su.mutation.ClearLongitude()
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StationUpdate) SetCreatedAt(t time.Time) *StationUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StationUpdate) SetNillableCreatedAt(t *time.Time) *StationUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StationUpdate) SetUpdatedAt(t time.Time) *StationUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetGuardianID sets the "guardian" edge to the Guardian entity by ID.
func (su *StationUpdate) SetGuardianID(id uuid.UUID) *StationUpdate {
	su.mutation.SetGuardianID(id)
	return su
}

// SetNillableGuardianID sets the "guardian" edge to the Guardian entity by ID if the given value is not nil.
func (su *StationUpdate) SetNillableGuardianID(id *uuid.UUID) *StationUpdate {
	if id != nil {
		su = su.SetGuardianID(*id)
	}
	return su
}

// SetGuardian sets the "guardian" edge to the Guardian entity.
func (su *StationUpdate) SetGuardian(g *Guardian) *StationUpdate {
	return su.SetGuardianID(g.ID)
}

// AddBuIDs adds the "bus" edge to the Bus entity by IDs.
func (su *StationUpdate) AddBuIDs(ids ...uuid.UUID) *StationUpdate {
	su.mutation.AddBuIDs(ids...)
	return su
}

// AddBus adds the "bus" edges to the Bus entity.
func (su *StationUpdate) AddBus(b ...*Bus) *StationUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.AddBuIDs(ids...)
}

// SetMorningPreviousStationID sets the "morning_previous_station" edge to the Station entity by ID.
func (su *StationUpdate) SetMorningPreviousStationID(id uuid.UUID) *StationUpdate {
	su.mutation.SetMorningPreviousStationID(id)
	return su
}

// SetNillableMorningPreviousStationID sets the "morning_previous_station" edge to the Station entity by ID if the given value is not nil.
func (su *StationUpdate) SetNillableMorningPreviousStationID(id *uuid.UUID) *StationUpdate {
	if id != nil {
		su = su.SetMorningPreviousStationID(*id)
	}
	return su
}

// SetMorningPreviousStation sets the "morning_previous_station" edge to the Station entity.
func (su *StationUpdate) SetMorningPreviousStation(s *Station) *StationUpdate {
	return su.SetMorningPreviousStationID(s.ID)
}

// AddMorningNextStationIDs adds the "morning_next_station" edge to the Station entity by IDs.
func (su *StationUpdate) AddMorningNextStationIDs(ids ...uuid.UUID) *StationUpdate {
	su.mutation.AddMorningNextStationIDs(ids...)
	return su
}

// AddMorningNextStation adds the "morning_next_station" edges to the Station entity.
func (su *StationUpdate) AddMorningNextStation(s ...*Station) *StationUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddMorningNextStationIDs(ids...)
}

// SetEveningPreviousStationID sets the "evening_previous_station" edge to the Station entity by ID.
func (su *StationUpdate) SetEveningPreviousStationID(id uuid.UUID) *StationUpdate {
	su.mutation.SetEveningPreviousStationID(id)
	return su
}

// SetNillableEveningPreviousStationID sets the "evening_previous_station" edge to the Station entity by ID if the given value is not nil.
func (su *StationUpdate) SetNillableEveningPreviousStationID(id *uuid.UUID) *StationUpdate {
	if id != nil {
		su = su.SetEveningPreviousStationID(*id)
	}
	return su
}

// SetEveningPreviousStation sets the "evening_previous_station" edge to the Station entity.
func (su *StationUpdate) SetEveningPreviousStation(s *Station) *StationUpdate {
	return su.SetEveningPreviousStationID(s.ID)
}

// AddEveningNextStationIDs adds the "evening_next_station" edge to the Station entity by IDs.
func (su *StationUpdate) AddEveningNextStationIDs(ids ...uuid.UUID) *StationUpdate {
	su.mutation.AddEveningNextStationIDs(ids...)
	return su
}

// AddEveningNextStation adds the "evening_next_station" edges to the Station entity.
func (su *StationUpdate) AddEveningNextStation(s ...*Station) *StationUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddEveningNextStationIDs(ids...)
}

// Mutation returns the StationMutation object of the builder.
func (su *StationUpdate) Mutation() *StationMutation {
	return su.mutation
}

// ClearGuardian clears the "guardian" edge to the Guardian entity.
func (su *StationUpdate) ClearGuardian() *StationUpdate {
	su.mutation.ClearGuardian()
	return su
}

// ClearBus clears all "bus" edges to the Bus entity.
func (su *StationUpdate) ClearBus() *StationUpdate {
	su.mutation.ClearBus()
	return su
}

// RemoveBuIDs removes the "bus" edge to Bus entities by IDs.
func (su *StationUpdate) RemoveBuIDs(ids ...uuid.UUID) *StationUpdate {
	su.mutation.RemoveBuIDs(ids...)
	return su
}

// RemoveBus removes "bus" edges to Bus entities.
func (su *StationUpdate) RemoveBus(b ...*Bus) *StationUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.RemoveBuIDs(ids...)
}

// ClearMorningPreviousStation clears the "morning_previous_station" edge to the Station entity.
func (su *StationUpdate) ClearMorningPreviousStation() *StationUpdate {
	su.mutation.ClearMorningPreviousStation()
	return su
}

// ClearMorningNextStation clears all "morning_next_station" edges to the Station entity.
func (su *StationUpdate) ClearMorningNextStation() *StationUpdate {
	su.mutation.ClearMorningNextStation()
	return su
}

// RemoveMorningNextStationIDs removes the "morning_next_station" edge to Station entities by IDs.
func (su *StationUpdate) RemoveMorningNextStationIDs(ids ...uuid.UUID) *StationUpdate {
	su.mutation.RemoveMorningNextStationIDs(ids...)
	return su
}

// RemoveMorningNextStation removes "morning_next_station" edges to Station entities.
func (su *StationUpdate) RemoveMorningNextStation(s ...*Station) *StationUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveMorningNextStationIDs(ids...)
}

// ClearEveningPreviousStation clears the "evening_previous_station" edge to the Station entity.
func (su *StationUpdate) ClearEveningPreviousStation() *StationUpdate {
	su.mutation.ClearEveningPreviousStation()
	return su
}

// ClearEveningNextStation clears all "evening_next_station" edges to the Station entity.
func (su *StationUpdate) ClearEveningNextStation() *StationUpdate {
	su.mutation.ClearEveningNextStation()
	return su
}

// RemoveEveningNextStationIDs removes the "evening_next_station" edge to Station entities by IDs.
func (su *StationUpdate) RemoveEveningNextStationIDs(ids ...uuid.UUID) *StationUpdate {
	su.mutation.RemoveEveningNextStationIDs(ids...)
	return su
}

// RemoveEveningNextStation removes "evening_next_station" edges to Station entities.
func (su *StationUpdate) RemoveEveningNextStation(s ...*Station) *StationUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveEveningNextStationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StationUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StationUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StationUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StationUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StationUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := station.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *StationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(station.Table, station.Columns, sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Latitude(); ok {
		_spec.SetField(station.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedLatitude(); ok {
		_spec.AddField(station.FieldLatitude, field.TypeFloat64, value)
	}
	if su.mutation.LatitudeCleared() {
		_spec.ClearField(station.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := su.mutation.Longitude(); ok {
		_spec.SetField(station.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedLongitude(); ok {
		_spec.AddField(station.FieldLongitude, field.TypeFloat64, value)
	}
	if su.mutation.LongitudeCleared() {
		_spec.ClearField(station.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(station.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(station.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.GuardianCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   station.GuardianTable,
			Columns: []string{station.GuardianColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.GuardianIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   station.GuardianTable,
			Columns: []string{station.GuardianColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   station.BusTable,
			Columns: station.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedBusIDs(); len(nodes) > 0 && !su.mutation.BusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   station.BusTable,
			Columns: station.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   station.BusTable,
			Columns: station.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MorningPreviousStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   station.MorningPreviousStationTable,
			Columns: []string{station.MorningPreviousStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MorningPreviousStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   station.MorningPreviousStationTable,
			Columns: []string{station.MorningPreviousStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MorningNextStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MorningNextStationTable,
			Columns: []string{station.MorningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedMorningNextStationIDs(); len(nodes) > 0 && !su.mutation.MorningNextStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MorningNextStationTable,
			Columns: []string{station.MorningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MorningNextStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MorningNextStationTable,
			Columns: []string{station.MorningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EveningPreviousStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   station.EveningPreviousStationTable,
			Columns: []string{station.EveningPreviousStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EveningPreviousStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   station.EveningPreviousStationTable,
			Columns: []string{station.EveningPreviousStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EveningNextStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.EveningNextStationTable,
			Columns: []string{station.EveningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedEveningNextStationIDs(); len(nodes) > 0 && !su.mutation.EveningNextStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.EveningNextStationTable,
			Columns: []string{station.EveningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EveningNextStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.EveningNextStationTable,
			Columns: []string{station.EveningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StationUpdateOne is the builder for updating a single Station entity.
type StationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StationMutation
}

// SetLatitude sets the "latitude" field.
func (suo *StationUpdateOne) SetLatitude(f float64) *StationUpdateOne {
	suo.mutation.ResetLatitude()
	suo.mutation.SetLatitude(f)
	return suo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableLatitude(f *float64) *StationUpdateOne {
	if f != nil {
		suo.SetLatitude(*f)
	}
	return suo
}

// AddLatitude adds f to the "latitude" field.
func (suo *StationUpdateOne) AddLatitude(f float64) *StationUpdateOne {
	suo.mutation.AddLatitude(f)
	return suo
}

// ClearLatitude clears the value of the "latitude" field.
func (suo *StationUpdateOne) ClearLatitude() *StationUpdateOne {
	suo.mutation.ClearLatitude()
	return suo
}

// SetLongitude sets the "longitude" field.
func (suo *StationUpdateOne) SetLongitude(f float64) *StationUpdateOne {
	suo.mutation.ResetLongitude()
	suo.mutation.SetLongitude(f)
	return suo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableLongitude(f *float64) *StationUpdateOne {
	if f != nil {
		suo.SetLongitude(*f)
	}
	return suo
}

// AddLongitude adds f to the "longitude" field.
func (suo *StationUpdateOne) AddLongitude(f float64) *StationUpdateOne {
	suo.mutation.AddLongitude(f)
	return suo
}

// ClearLongitude clears the value of the "longitude" field.
func (suo *StationUpdateOne) ClearLongitude() *StationUpdateOne {
	suo.mutation.ClearLongitude()
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *StationUpdateOne) SetCreatedAt(t time.Time) *StationUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableCreatedAt(t *time.Time) *StationUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StationUpdateOne) SetUpdatedAt(t time.Time) *StationUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetGuardianID sets the "guardian" edge to the Guardian entity by ID.
func (suo *StationUpdateOne) SetGuardianID(id uuid.UUID) *StationUpdateOne {
	suo.mutation.SetGuardianID(id)
	return suo
}

// SetNillableGuardianID sets the "guardian" edge to the Guardian entity by ID if the given value is not nil.
func (suo *StationUpdateOne) SetNillableGuardianID(id *uuid.UUID) *StationUpdateOne {
	if id != nil {
		suo = suo.SetGuardianID(*id)
	}
	return suo
}

// SetGuardian sets the "guardian" edge to the Guardian entity.
func (suo *StationUpdateOne) SetGuardian(g *Guardian) *StationUpdateOne {
	return suo.SetGuardianID(g.ID)
}

// AddBuIDs adds the "bus" edge to the Bus entity by IDs.
func (suo *StationUpdateOne) AddBuIDs(ids ...uuid.UUID) *StationUpdateOne {
	suo.mutation.AddBuIDs(ids...)
	return suo
}

// AddBus adds the "bus" edges to the Bus entity.
func (suo *StationUpdateOne) AddBus(b ...*Bus) *StationUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.AddBuIDs(ids...)
}

// SetMorningPreviousStationID sets the "morning_previous_station" edge to the Station entity by ID.
func (suo *StationUpdateOne) SetMorningPreviousStationID(id uuid.UUID) *StationUpdateOne {
	suo.mutation.SetMorningPreviousStationID(id)
	return suo
}

// SetNillableMorningPreviousStationID sets the "morning_previous_station" edge to the Station entity by ID if the given value is not nil.
func (suo *StationUpdateOne) SetNillableMorningPreviousStationID(id *uuid.UUID) *StationUpdateOne {
	if id != nil {
		suo = suo.SetMorningPreviousStationID(*id)
	}
	return suo
}

// SetMorningPreviousStation sets the "morning_previous_station" edge to the Station entity.
func (suo *StationUpdateOne) SetMorningPreviousStation(s *Station) *StationUpdateOne {
	return suo.SetMorningPreviousStationID(s.ID)
}

// AddMorningNextStationIDs adds the "morning_next_station" edge to the Station entity by IDs.
func (suo *StationUpdateOne) AddMorningNextStationIDs(ids ...uuid.UUID) *StationUpdateOne {
	suo.mutation.AddMorningNextStationIDs(ids...)
	return suo
}

// AddMorningNextStation adds the "morning_next_station" edges to the Station entity.
func (suo *StationUpdateOne) AddMorningNextStation(s ...*Station) *StationUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddMorningNextStationIDs(ids...)
}

// SetEveningPreviousStationID sets the "evening_previous_station" edge to the Station entity by ID.
func (suo *StationUpdateOne) SetEveningPreviousStationID(id uuid.UUID) *StationUpdateOne {
	suo.mutation.SetEveningPreviousStationID(id)
	return suo
}

// SetNillableEveningPreviousStationID sets the "evening_previous_station" edge to the Station entity by ID if the given value is not nil.
func (suo *StationUpdateOne) SetNillableEveningPreviousStationID(id *uuid.UUID) *StationUpdateOne {
	if id != nil {
		suo = suo.SetEveningPreviousStationID(*id)
	}
	return suo
}

// SetEveningPreviousStation sets the "evening_previous_station" edge to the Station entity.
func (suo *StationUpdateOne) SetEveningPreviousStation(s *Station) *StationUpdateOne {
	return suo.SetEveningPreviousStationID(s.ID)
}

// AddEveningNextStationIDs adds the "evening_next_station" edge to the Station entity by IDs.
func (suo *StationUpdateOne) AddEveningNextStationIDs(ids ...uuid.UUID) *StationUpdateOne {
	suo.mutation.AddEveningNextStationIDs(ids...)
	return suo
}

// AddEveningNextStation adds the "evening_next_station" edges to the Station entity.
func (suo *StationUpdateOne) AddEveningNextStation(s ...*Station) *StationUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddEveningNextStationIDs(ids...)
}

// Mutation returns the StationMutation object of the builder.
func (suo *StationUpdateOne) Mutation() *StationMutation {
	return suo.mutation
}

// ClearGuardian clears the "guardian" edge to the Guardian entity.
func (suo *StationUpdateOne) ClearGuardian() *StationUpdateOne {
	suo.mutation.ClearGuardian()
	return suo
}

// ClearBus clears all "bus" edges to the Bus entity.
func (suo *StationUpdateOne) ClearBus() *StationUpdateOne {
	suo.mutation.ClearBus()
	return suo
}

// RemoveBuIDs removes the "bus" edge to Bus entities by IDs.
func (suo *StationUpdateOne) RemoveBuIDs(ids ...uuid.UUID) *StationUpdateOne {
	suo.mutation.RemoveBuIDs(ids...)
	return suo
}

// RemoveBus removes "bus" edges to Bus entities.
func (suo *StationUpdateOne) RemoveBus(b ...*Bus) *StationUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.RemoveBuIDs(ids...)
}

// ClearMorningPreviousStation clears the "morning_previous_station" edge to the Station entity.
func (suo *StationUpdateOne) ClearMorningPreviousStation() *StationUpdateOne {
	suo.mutation.ClearMorningPreviousStation()
	return suo
}

// ClearMorningNextStation clears all "morning_next_station" edges to the Station entity.
func (suo *StationUpdateOne) ClearMorningNextStation() *StationUpdateOne {
	suo.mutation.ClearMorningNextStation()
	return suo
}

// RemoveMorningNextStationIDs removes the "morning_next_station" edge to Station entities by IDs.
func (suo *StationUpdateOne) RemoveMorningNextStationIDs(ids ...uuid.UUID) *StationUpdateOne {
	suo.mutation.RemoveMorningNextStationIDs(ids...)
	return suo
}

// RemoveMorningNextStation removes "morning_next_station" edges to Station entities.
func (suo *StationUpdateOne) RemoveMorningNextStation(s ...*Station) *StationUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveMorningNextStationIDs(ids...)
}

// ClearEveningPreviousStation clears the "evening_previous_station" edge to the Station entity.
func (suo *StationUpdateOne) ClearEveningPreviousStation() *StationUpdateOne {
	suo.mutation.ClearEveningPreviousStation()
	return suo
}

// ClearEveningNextStation clears all "evening_next_station" edges to the Station entity.
func (suo *StationUpdateOne) ClearEveningNextStation() *StationUpdateOne {
	suo.mutation.ClearEveningNextStation()
	return suo
}

// RemoveEveningNextStationIDs removes the "evening_next_station" edge to Station entities by IDs.
func (suo *StationUpdateOne) RemoveEveningNextStationIDs(ids ...uuid.UUID) *StationUpdateOne {
	suo.mutation.RemoveEveningNextStationIDs(ids...)
	return suo
}

// RemoveEveningNextStation removes "evening_next_station" edges to Station entities.
func (suo *StationUpdateOne) RemoveEveningNextStation(s ...*Station) *StationUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveEveningNextStationIDs(ids...)
}

// Where appends a list predicates to the StationUpdate builder.
func (suo *StationUpdateOne) Where(ps ...predicate.Station) *StationUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StationUpdateOne) Select(field string, fields ...string) *StationUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Station entity.
func (suo *StationUpdateOne) Save(ctx context.Context) (*Station, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StationUpdateOne) SaveX(ctx context.Context) *Station {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StationUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StationUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StationUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := station.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *StationUpdateOne) sqlSave(ctx context.Context) (_node *Station, err error) {
	_spec := sqlgraph.NewUpdateSpec(station.Table, station.Columns, sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Station.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, station.FieldID)
		for _, f := range fields {
			if !station.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != station.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Latitude(); ok {
		_spec.SetField(station.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedLatitude(); ok {
		_spec.AddField(station.FieldLatitude, field.TypeFloat64, value)
	}
	if suo.mutation.LatitudeCleared() {
		_spec.ClearField(station.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := suo.mutation.Longitude(); ok {
		_spec.SetField(station.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedLongitude(); ok {
		_spec.AddField(station.FieldLongitude, field.TypeFloat64, value)
	}
	if suo.mutation.LongitudeCleared() {
		_spec.ClearField(station.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(station.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(station.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.GuardianCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   station.GuardianTable,
			Columns: []string{station.GuardianColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.GuardianIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   station.GuardianTable,
			Columns: []string{station.GuardianColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   station.BusTable,
			Columns: station.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedBusIDs(); len(nodes) > 0 && !suo.mutation.BusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   station.BusTable,
			Columns: station.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   station.BusTable,
			Columns: station.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MorningPreviousStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   station.MorningPreviousStationTable,
			Columns: []string{station.MorningPreviousStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MorningPreviousStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   station.MorningPreviousStationTable,
			Columns: []string{station.MorningPreviousStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MorningNextStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MorningNextStationTable,
			Columns: []string{station.MorningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedMorningNextStationIDs(); len(nodes) > 0 && !suo.mutation.MorningNextStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MorningNextStationTable,
			Columns: []string{station.MorningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MorningNextStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.MorningNextStationTable,
			Columns: []string{station.MorningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EveningPreviousStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   station.EveningPreviousStationTable,
			Columns: []string{station.EveningPreviousStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EveningPreviousStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   station.EveningPreviousStationTable,
			Columns: []string{station.EveningPreviousStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EveningNextStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.EveningNextStationTable,
			Columns: []string{station.EveningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedEveningNextStationIDs(); len(nodes) > 0 && !suo.mutation.EveningNextStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.EveningNextStationTable,
			Columns: []string{station.EveningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EveningNextStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   station.EveningNextStationTable,
			Columns: []string{station.EveningNextStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Station{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
