// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/boardingrecord"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/bus"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/childbusassociation"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/nursery"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/station"
	"github.com/google/uuid"
)

// BusCreate is the builder for creating a Bus entity.
type BusCreate struct {
	config
	mutation *BusMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BusCreate) SetName(s string) *BusCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetPlateNumber sets the "plate_number" field.
func (bc *BusCreate) SetPlateNumber(s string) *BusCreate {
	bc.mutation.SetPlateNumber(s)
	return bc
}

// SetNillablePlateNumber sets the "plate_number" field if the given value is not nil.
func (bc *BusCreate) SetNillablePlateNumber(s *string) *BusCreate {
	if s != nil {
		bc.SetPlateNumber(*s)
	}
	return bc
}

// SetLatitude sets the "latitude" field.
func (bc *BusCreate) SetLatitude(f float64) *BusCreate {
	bc.mutation.SetLatitude(f)
	return bc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (bc *BusCreate) SetNillableLatitude(f *float64) *BusCreate {
	if f != nil {
		bc.SetLatitude(*f)
	}
	return bc
}

// SetLongitude sets the "longitude" field.
func (bc *BusCreate) SetLongitude(f float64) *BusCreate {
	bc.mutation.SetLongitude(f)
	return bc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (bc *BusCreate) SetNillableLongitude(f *float64) *BusCreate {
	if f != nil {
		bc.SetLongitude(*f)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BusCreate) SetStatus(b bus.Status) *BusCreate {
	bc.mutation.SetStatus(b)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BusCreate) SetNillableStatus(b *bus.Status) *BusCreate {
	if b != nil {
		bc.SetStatus(*b)
	}
	return bc
}

// SetMorningFirstStationID sets the "morning_first_station_id" field.
func (bc *BusCreate) SetMorningFirstStationID(s string) *BusCreate {
	bc.mutation.SetMorningFirstStationID(s)
	return bc
}

// SetEveningFirstStationID sets the "evening_first_station_id" field.
func (bc *BusCreate) SetEveningFirstStationID(s string) *BusCreate {
	bc.mutation.SetEveningFirstStationID(s)
	return bc
}

// SetEnableFaceRecognition sets the "enable_face_recognition" field.
func (bc *BusCreate) SetEnableFaceRecognition(b bool) *BusCreate {
	bc.mutation.SetEnableFaceRecognition(b)
	return bc
}

// SetNillableEnableFaceRecognition sets the "enable_face_recognition" field if the given value is not nil.
func (bc *BusCreate) SetNillableEnableFaceRecognition(b *bool) *BusCreate {
	if b != nil {
		bc.SetEnableFaceRecognition(*b)
	}
	return bc
}

// SetNextStationID sets the "next_station_id" field.
func (bc *BusCreate) SetNextStationID(u uuid.UUID) *BusCreate {
	bc.mutation.SetNextStationID(u)
	return bc
}

// SetNillableNextStationID sets the "next_station_id" field if the given value is not nil.
func (bc *BusCreate) SetNillableNextStationID(u *uuid.UUID) *BusCreate {
	if u != nil {
		bc.SetNextStationID(*u)
	}
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BusCreate) SetCreatedAt(t time.Time) *BusCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BusCreate) SetNillableCreatedAt(t *time.Time) *BusCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BusCreate) SetUpdatedAt(t time.Time) *BusCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BusCreate) SetNillableUpdatedAt(t *time.Time) *BusCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BusCreate) SetID(u uuid.UUID) *BusCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BusCreate) SetNillableID(u *uuid.UUID) *BusCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// SetNurseryID sets the "nursery" edge to the Nursery entity by ID.
func (bc *BusCreate) SetNurseryID(id uuid.UUID) *BusCreate {
	bc.mutation.SetNurseryID(id)
	return bc
}

// SetNillableNurseryID sets the "nursery" edge to the Nursery entity by ID if the given value is not nil.
func (bc *BusCreate) SetNillableNurseryID(id *uuid.UUID) *BusCreate {
	if id != nil {
		bc = bc.SetNurseryID(*id)
	}
	return bc
}

// SetNursery sets the "nursery" edge to the Nursery entity.
func (bc *BusCreate) SetNursery(n *Nursery) *BusCreate {
	return bc.SetNurseryID(n.ID)
}

// AddStationIDs adds the "stations" edge to the Station entity by IDs.
func (bc *BusCreate) AddStationIDs(ids ...uuid.UUID) *BusCreate {
	bc.mutation.AddStationIDs(ids...)
	return bc
}

// AddStations adds the "stations" edges to the Station entity.
func (bc *BusCreate) AddStations(s ...*Station) *BusCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bc.AddStationIDs(ids...)
}

// AddBoardingRecordIDs adds the "boarding_records" edge to the BoardingRecord entity by IDs.
func (bc *BusCreate) AddBoardingRecordIDs(ids ...uuid.UUID) *BusCreate {
	bc.mutation.AddBoardingRecordIDs(ids...)
	return bc
}

// AddBoardingRecords adds the "boarding_records" edges to the BoardingRecord entity.
func (bc *BusCreate) AddBoardingRecords(b ...*BoardingRecord) *BusCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddBoardingRecordIDs(ids...)
}

// AddChildBusAssociationIDs adds the "childBusAssociations" edge to the ChildBusAssociation entity by IDs.
func (bc *BusCreate) AddChildBusAssociationIDs(ids ...int) *BusCreate {
	bc.mutation.AddChildBusAssociationIDs(ids...)
	return bc
}

// AddChildBusAssociations adds the "childBusAssociations" edges to the ChildBusAssociation entity.
func (bc *BusCreate) AddChildBusAssociations(c ...*ChildBusAssociation) *BusCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bc.AddChildBusAssociationIDs(ids...)
}

// Mutation returns the BusMutation object of the builder.
func (bc *BusCreate) Mutation() *BusMutation {
	return bc.mutation
}

// Save creates the Bus in the database.
func (bc *BusCreate) Save(ctx context.Context) (*Bus, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BusCreate) SaveX(ctx context.Context) *Bus {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BusCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BusCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BusCreate) defaults() {
	if _, ok := bc.mutation.Status(); !ok {
		v := bus.DefaultStatus
		bc.mutation.SetStatus(v)
	}
	if _, ok := bc.mutation.EnableFaceRecognition(); !ok {
		v := bus.DefaultEnableFaceRecognition
		bc.mutation.SetEnableFaceRecognition(v)
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bus.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bus.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bus.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BusCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Bus.name"`)}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Bus.status"`)}
	}
	if v, ok := bc.mutation.Status(); ok {
		if err := bus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bus.status": %w`, err)}
		}
	}
	if _, ok := bc.mutation.MorningFirstStationID(); !ok {
		return &ValidationError{Name: "morning_first_station_id", err: errors.New(`ent: missing required field "Bus.morning_first_station_id"`)}
	}
	if _, ok := bc.mutation.EveningFirstStationID(); !ok {
		return &ValidationError{Name: "evening_first_station_id", err: errors.New(`ent: missing required field "Bus.evening_first_station_id"`)}
	}
	if _, ok := bc.mutation.EnableFaceRecognition(); !ok {
		return &ValidationError{Name: "enable_face_recognition", err: errors.New(`ent: missing required field "Bus.enable_face_recognition"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bus.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Bus.updated_at"`)}
	}
	return nil
}

func (bc *BusCreate) sqlSave(ctx context.Context) (*Bus, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BusCreate) createSpec() (*Bus, *sqlgraph.CreateSpec) {
	var (
		_node = &Bus{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bus.Table, sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(bus.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.PlateNumber(); ok {
		_spec.SetField(bus.FieldPlateNumber, field.TypeString, value)
		_node.PlateNumber = value
	}
	if value, ok := bc.mutation.Latitude(); ok {
		_spec.SetField(bus.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := bc.mutation.Longitude(); ok {
		_spec.SetField(bus.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(bus.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.MorningFirstStationID(); ok {
		_spec.SetField(bus.FieldMorningFirstStationID, field.TypeString, value)
		_node.MorningFirstStationID = value
	}
	if value, ok := bc.mutation.EveningFirstStationID(); ok {
		_spec.SetField(bus.FieldEveningFirstStationID, field.TypeString, value)
		_node.EveningFirstStationID = value
	}
	if value, ok := bc.mutation.EnableFaceRecognition(); ok {
		_spec.SetField(bus.FieldEnableFaceRecognition, field.TypeBool, value)
		_node.EnableFaceRecognition = value
	}
	if value, ok := bc.mutation.NextStationID(); ok {
		_spec.SetField(bus.FieldNextStationID, field.TypeUUID, value)
		_node.NextStationID = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bus.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bus.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bc.mutation.NurseryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bus.NurseryTable,
			Columns: []string{bus.NurseryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nursery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bus_nursery = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.StationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   bus.StationsTable,
			Columns: bus.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(station.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.BoardingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.BoardingRecordsTable,
			Columns: []string{bus.BoardingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardingrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ChildBusAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bus.ChildBusAssociationsTable,
			Columns: []string{bus.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusCreateBulk is the builder for creating many Bus entities in bulk.
type BusCreateBulk struct {
	config
	err      error
	builders []*BusCreate
}

// Save creates the Bus entities in the database.
func (bcb *BusCreateBulk) Save(ctx context.Context) ([]*Bus, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bus, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BusCreateBulk) SaveX(ctx context.Context) []*Bus {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BusCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BusCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
