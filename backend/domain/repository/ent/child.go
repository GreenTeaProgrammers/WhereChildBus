// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/child"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/guardian"
	"github.com/google/uuid"
)

// Child is the model entity for the Child schema.
type Child struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Sex holds the value of the "sex" field.
	Sex child.Sex `json:"sex,omitempty"`
	// 持ち物が欠けていないかをチェックするかどうか
	CheckForMissingItems bool `json:"check_for_missing_items,omitempty"`
	// HasBag holds the value of the "has_bag" field.
	HasBag bool `json:"has_bag,omitempty"`
	// HasLunchBox holds the value of the "has_lunch_box" field.
	HasLunchBox bool `json:"has_lunch_box,omitempty"`
	// HasWaterBottle holds the value of the "has_water_bottle" field.
	HasWaterBottle bool `json:"has_water_bottle,omitempty"`
	// HasUmbrella holds the value of the "has_umbrella" field.
	HasUmbrella bool `json:"has_umbrella,omitempty"`
	// HasOther holds the value of the "has_other" field.
	HasOther bool `json:"has_other,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChildQuery when eager-loading is set.
	Edges             ChildEdges `json:"edges"`
	guardian_children *uuid.UUID
	selectValues      sql.SelectValues
}

// ChildEdges holds the relations/edges for other nodes in the graph.
type ChildEdges struct {
	// Guardian holds the value of the guardian edge.
	Guardian *Guardian `json:"guardian,omitempty"`
	// ChildBusAssociations holds the value of the childBusAssociations edge.
	ChildBusAssociations []*ChildBusAssociation `json:"childBusAssociations,omitempty"`
	// BoardingRecord holds the value of the boarding_record edge.
	BoardingRecord []*BoardingRecord `json:"boarding_record,omitempty"`
	// Photos holds the value of the photos edge.
	Photos []*ChildPhoto `json:"photos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// GuardianOrErr returns the Guardian value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChildEdges) GuardianOrErr() (*Guardian, error) {
	if e.loadedTypes[0] {
		if e.Guardian == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: guardian.Label}
		}
		return e.Guardian, nil
	}
	return nil, &NotLoadedError{edge: "guardian"}
}

// ChildBusAssociationsOrErr returns the ChildBusAssociations value or an error if the edge
// was not loaded in eager-loading.
func (e ChildEdges) ChildBusAssociationsOrErr() ([]*ChildBusAssociation, error) {
	if e.loadedTypes[1] {
		return e.ChildBusAssociations, nil
	}
	return nil, &NotLoadedError{edge: "childBusAssociations"}
}

// BoardingRecordOrErr returns the BoardingRecord value or an error if the edge
// was not loaded in eager-loading.
func (e ChildEdges) BoardingRecordOrErr() ([]*BoardingRecord, error) {
	if e.loadedTypes[2] {
		return e.BoardingRecord, nil
	}
	return nil, &NotLoadedError{edge: "boarding_record"}
}

// PhotosOrErr returns the Photos value or an error if the edge
// was not loaded in eager-loading.
func (e ChildEdges) PhotosOrErr() ([]*ChildPhoto, error) {
	if e.loadedTypes[3] {
		return e.Photos, nil
	}
	return nil, &NotLoadedError{edge: "photos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Child) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case child.FieldCheckForMissingItems, child.FieldHasBag, child.FieldHasLunchBox, child.FieldHasWaterBottle, child.FieldHasUmbrella, child.FieldHasOther:
			values[i] = new(sql.NullBool)
		case child.FieldAge:
			values[i] = new(sql.NullInt64)
		case child.FieldName, child.FieldSex:
			values[i] = new(sql.NullString)
		case child.FieldCreatedAt, child.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case child.FieldID:
			values[i] = new(uuid.UUID)
		case child.ForeignKeys[0]: // guardian_children
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Child fields.
func (c *Child) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case child.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case child.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case child.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				c.Age = int(value.Int64)
			}
		case child.FieldSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				c.Sex = child.Sex(value.String)
			}
		case child.FieldCheckForMissingItems:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field check_for_missing_items", values[i])
			} else if value.Valid {
				c.CheckForMissingItems = value.Bool
			}
		case child.FieldHasBag:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_bag", values[i])
			} else if value.Valid {
				c.HasBag = value.Bool
			}
		case child.FieldHasLunchBox:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_lunch_box", values[i])
			} else if value.Valid {
				c.HasLunchBox = value.Bool
			}
		case child.FieldHasWaterBottle:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_water_bottle", values[i])
			} else if value.Valid {
				c.HasWaterBottle = value.Bool
			}
		case child.FieldHasUmbrella:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_umbrella", values[i])
			} else if value.Valid {
				c.HasUmbrella = value.Bool
			}
		case child.FieldHasOther:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_other", values[i])
			} else if value.Valid {
				c.HasOther = value.Bool
			}
		case child.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case child.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case child.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field guardian_children", values[i])
			} else if value.Valid {
				c.guardian_children = new(uuid.UUID)
				*c.guardian_children = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Child.
// This includes values selected through modifiers, order, etc.
func (c *Child) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryGuardian queries the "guardian" edge of the Child entity.
func (c *Child) QueryGuardian() *GuardianQuery {
	return NewChildClient(c.config).QueryGuardian(c)
}

// QueryChildBusAssociations queries the "childBusAssociations" edge of the Child entity.
func (c *Child) QueryChildBusAssociations() *ChildBusAssociationQuery {
	return NewChildClient(c.config).QueryChildBusAssociations(c)
}

// QueryBoardingRecord queries the "boarding_record" edge of the Child entity.
func (c *Child) QueryBoardingRecord() *BoardingRecordQuery {
	return NewChildClient(c.config).QueryBoardingRecord(c)
}

// QueryPhotos queries the "photos" edge of the Child entity.
func (c *Child) QueryPhotos() *ChildPhotoQuery {
	return NewChildClient(c.config).QueryPhotos(c)
}

// Update returns a builder for updating this Child.
// Note that you need to call Child.Unwrap() before calling this method if this Child
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Child) Update() *ChildUpdateOne {
	return NewChildClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Child entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Child) Unwrap() *Child {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Child is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Child) String() string {
	var builder strings.Builder
	builder.WriteString("Child(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", c.Age))
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", c.Sex))
	builder.WriteString(", ")
	builder.WriteString("check_for_missing_items=")
	builder.WriteString(fmt.Sprintf("%v", c.CheckForMissingItems))
	builder.WriteString(", ")
	builder.WriteString("has_bag=")
	builder.WriteString(fmt.Sprintf("%v", c.HasBag))
	builder.WriteString(", ")
	builder.WriteString("has_lunch_box=")
	builder.WriteString(fmt.Sprintf("%v", c.HasLunchBox))
	builder.WriteString(", ")
	builder.WriteString("has_water_bottle=")
	builder.WriteString(fmt.Sprintf("%v", c.HasWaterBottle))
	builder.WriteString(", ")
	builder.WriteString("has_umbrella=")
	builder.WriteString(fmt.Sprintf("%v", c.HasUmbrella))
	builder.WriteString(", ")
	builder.WriteString("has_other=")
	builder.WriteString(fmt.Sprintf("%v", c.HasOther))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Childs is a parsable slice of Child.
type Childs []*Child
