// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/bus"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busroute"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/busrouteassociation"
	"github.com/GreenTeaProgrammers/WhereChildBus/backend/domain/repository/ent/childbusassociation"
	"github.com/google/uuid"
)

// BusRouteCreate is the builder for creating a BusRoute entity.
type BusRouteCreate struct {
	config
	mutation *BusRouteMutation
	hooks    []Hook
}

// SetBusType sets the "bus_type" field.
func (brc *BusRouteCreate) SetBusType(bt busroute.BusType) *BusRouteCreate {
	brc.mutation.SetBusType(bt)
	return brc
}

// SetID sets the "id" field.
func (brc *BusRouteCreate) SetID(u uuid.UUID) *BusRouteCreate {
	brc.mutation.SetID(u)
	return brc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (brc *BusRouteCreate) SetNillableID(u *uuid.UUID) *BusRouteCreate {
	if u != nil {
		brc.SetID(*u)
	}
	return brc
}

// AddBuIDs adds the "bus" edge to the Bus entity by IDs.
func (brc *BusRouteCreate) AddBuIDs(ids ...uuid.UUID) *BusRouteCreate {
	brc.mutation.AddBuIDs(ids...)
	return brc
}

// AddBus adds the "bus" edges to the Bus entity.
func (brc *BusRouteCreate) AddBus(b ...*Bus) *BusRouteCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return brc.AddBuIDs(ids...)
}

// AddChildBusAssociationIDs adds the "childBusAssociations" edge to the ChildBusAssociation entity by IDs.
func (brc *BusRouteCreate) AddChildBusAssociationIDs(ids ...int) *BusRouteCreate {
	brc.mutation.AddChildBusAssociationIDs(ids...)
	return brc
}

// AddChildBusAssociations adds the "childBusAssociations" edges to the ChildBusAssociation entity.
func (brc *BusRouteCreate) AddChildBusAssociations(c ...*ChildBusAssociation) *BusRouteCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return brc.AddChildBusAssociationIDs(ids...)
}

// AddBusRouteAssociationIDs adds the "busRouteAssociations" edge to the BusRouteAssociation entity by IDs.
func (brc *BusRouteCreate) AddBusRouteAssociationIDs(ids ...int) *BusRouteCreate {
	brc.mutation.AddBusRouteAssociationIDs(ids...)
	return brc
}

// AddBusRouteAssociations adds the "busRouteAssociations" edges to the BusRouteAssociation entity.
func (brc *BusRouteCreate) AddBusRouteAssociations(b ...*BusRouteAssociation) *BusRouteCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return brc.AddBusRouteAssociationIDs(ids...)
}

// Mutation returns the BusRouteMutation object of the builder.
func (brc *BusRouteCreate) Mutation() *BusRouteMutation {
	return brc.mutation
}

// Save creates the BusRoute in the database.
func (brc *BusRouteCreate) Save(ctx context.Context) (*BusRoute, error) {
	brc.defaults()
	return withHooks(ctx, brc.sqlSave, brc.mutation, brc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (brc *BusRouteCreate) SaveX(ctx context.Context) *BusRoute {
	v, err := brc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brc *BusRouteCreate) Exec(ctx context.Context) error {
	_, err := brc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brc *BusRouteCreate) ExecX(ctx context.Context) {
	if err := brc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (brc *BusRouteCreate) defaults() {
	if _, ok := brc.mutation.ID(); !ok {
		v := busroute.DefaultID()
		brc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (brc *BusRouteCreate) check() error {
	if _, ok := brc.mutation.BusType(); !ok {
		return &ValidationError{Name: "bus_type", err: errors.New(`ent: missing required field "BusRoute.bus_type"`)}
	}
	if v, ok := brc.mutation.BusType(); ok {
		if err := busroute.BusTypeValidator(v); err != nil {
			return &ValidationError{Name: "bus_type", err: fmt.Errorf(`ent: validator failed for field "BusRoute.bus_type": %w`, err)}
		}
	}
	return nil
}

func (brc *BusRouteCreate) sqlSave(ctx context.Context) (*BusRoute, error) {
	if err := brc.check(); err != nil {
		return nil, err
	}
	_node, _spec := brc.createSpec()
	if err := sqlgraph.CreateNode(ctx, brc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	brc.mutation.id = &_node.ID
	brc.mutation.done = true
	return _node, nil
}

func (brc *BusRouteCreate) createSpec() (*BusRoute, *sqlgraph.CreateSpec) {
	var (
		_node = &BusRoute{config: brc.config}
		_spec = sqlgraph.NewCreateSpec(busroute.Table, sqlgraph.NewFieldSpec(busroute.FieldID, field.TypeUUID))
	)
	if id, ok := brc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := brc.mutation.BusType(); ok {
		_spec.SetField(busroute.FieldBusType, field.TypeEnum, value)
		_node.BusType = value
	}
	if nodes := brc.mutation.BusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   busroute.BusTable,
			Columns: busroute.BusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := brc.mutation.ChildBusAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.ChildBusAssociationsTable,
			Columns: []string{busroute.ChildBusAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childbusassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := brc.mutation.BusRouteAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   busroute.BusRouteAssociationsTable,
			Columns: []string{busroute.BusRouteAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(busrouteassociation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusRouteCreateBulk is the builder for creating many BusRoute entities in bulk.
type BusRouteCreateBulk struct {
	config
	err      error
	builders []*BusRouteCreate
}

// Save creates the BusRoute entities in the database.
func (brcb *BusRouteCreateBulk) Save(ctx context.Context) ([]*BusRoute, error) {
	if brcb.err != nil {
		return nil, brcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(brcb.builders))
	nodes := make([]*BusRoute, len(brcb.builders))
	mutators := make([]Mutator, len(brcb.builders))
	for i := range brcb.builders {
		func(i int, root context.Context) {
			builder := brcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusRouteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, brcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, brcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, brcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (brcb *BusRouteCreateBulk) SaveX(ctx context.Context) []*BusRoute {
	v, err := brcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brcb *BusRouteCreateBulk) Exec(ctx context.Context) error {
	_, err := brcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brcb *BusRouteCreateBulk) ExecX(ctx context.Context) {
	if err := brcb.Exec(ctx); err != nil {
		panic(err)
	}
}
